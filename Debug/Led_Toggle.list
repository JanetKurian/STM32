
Led_Toggle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007098  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08007368  08007368  00017368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080073d4  080073d4  000173d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080073dc  080073dc  000173dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080073e0  080073e0  000173e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  24000000  080073e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000014  080073f8  00020014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000074  08007458  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010e4  240000d4  080074b8  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240011b8  080074b8  000211b8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00039ab3  00000000  00000000  00020102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005ea7  00000000  00000000  00059bb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b0  00000000  00000000  0005fa60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001220  00000000  00000000  00060f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00036cd6  00000000  00000000  00062130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f0be  00000000  00000000  00098e06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00158b7d  00000000  00000000  000b7ec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00210a41  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f60  00000000  00000000  00210a94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240000d4 	.word	0x240000d4
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08007350 	.word	0x08007350

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240000d8 	.word	0x240000d8
 800030c:	08007350 	.word	0x08007350

08000310 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 8000310:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 8000312:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000316:	4919      	ldr	r1, [pc, #100]	; (800037c <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 8000318:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 800031c:	4818      	ldr	r0, [pc, #96]	; (8000380 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800031e:	4917      	ldr	r1, [pc, #92]	; (800037c <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 8000320:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 8000322:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000324:	4817      	ldr	r0, [pc, #92]	; (8000384 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000326:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000328:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 800032c:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 800032e:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000332:	4915      	ldr	r1, [pc, #84]	; (8000388 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000334:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000336:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800033a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800033c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000340:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000344:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000348:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800034c:	490f      	ldr	r1, [pc, #60]	; (800038c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800034e:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000352:	4770      	bx	lr

08000354 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000354:	f7ff bffe 	b.w	8000354 <__tx_BadHandler>

08000358 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000358:	f7ff bffe 	b.w	8000358 <__tx_HardfaultHandler>

0800035c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800035c:	f7ff bffe 	b.w	800035c <__tx_SVCallHandler>

08000360 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000360:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000362:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000366:	4770      	bx	lr

08000368 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000368:	b501      	push	{r0, lr}
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800036a:	f000 f891 	bl	8000490 <_tx_timer_interrupt>
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800036e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000372:	4770      	bx	lr

08000374 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000374:	f7ff bffe 	b.w	8000374 <__tx_NMIHandler>

08000378 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000378:	f7ff bffe 	b.w	8000378 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800037c:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000380:	24000c40 	.word	0x24000c40
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000384:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000388:	0053ec5f 	.word	0x0053ec5f
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800038c:	40ff0000 	.word	0x40ff0000

08000390 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 8000390:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000394:	4a2a      	ldr	r2, [pc, #168]	; (8000440 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000396:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_FP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000398:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 800039c:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 80003a0:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 80003a4:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 80003a6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 80003aa:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 80003ae:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 80003b2:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 80003b6:	f3bf 8f6f 	isb	sy

080003ba <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 80003ba:	e7fe      	b.n	80003ba <__tx_wait_here>

080003bc <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003bc:	4821      	ldr	r0, [pc, #132]	; (8000444 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003be:	4a22      	ldr	r2, [pc, #136]	; (8000448 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 80003c0:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 80003c4:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 80003c6:	b191      	cbz	r1, 80003ee <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 80003c8:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 80003ca:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 80003ce:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80003d2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80003d6:	d101      	bne.n	80003dc <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80003d8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080003dc <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003dc:	4c1b      	ldr	r4, [pc, #108]	; (800044c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80003de:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80003e2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80003e4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80003e8:	b10d      	cbz	r5, 80003ee <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80003ea:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80003ec:	6023      	str	r3, [r4, #0]

080003ee <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80003ee:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 80003f0:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 80003f2:	b1b1      	cbz	r1, 8000422 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 80003f4:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003f6:	b662      	cpsie	i

080003f8 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 80003f8:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003fa:	4c14      	ldr	r4, [pc, #80]	; (800044c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 80003fc:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 80003fe:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000402:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000404:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 8000406:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 800040a:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800040e:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000412:	d101      	bne.n	8000418 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000414:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000418 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000418:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 800041c:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 8000420:	4770      	bx	lr

08000422 <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000422:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000424:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 8000426:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000428:	b909      	cbnz	r1, 800042e <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800042a:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 800042c:	e7f9      	b.n	8000422 <__tx_ts_wait>

0800042e <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 800042e:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000432:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000436:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800043a:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 800043c:	e7dc      	b.n	80003f8 <__tx_ts_restore>

0800043e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800043e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000440:	24000c44 	.word	0x24000c44
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000444:	24000c48 	.word	0x24000c48
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000448:	24000c4c 	.word	0x24000c4c
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800044c:	24000cdc 	.word	0x24000cdc

08000450 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000450:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000452:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000456:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800045a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800045e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000460:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000464:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000466:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000468:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800046a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800046c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800046e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000470:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000472:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000474:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000476:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000478:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800047a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800047c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800047e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000482:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000484:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000486:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800048a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800048c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800048e:	4770      	bx	lr

08000490 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000490:	4922      	ldr	r1, [pc, #136]	; (800051c <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000492:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000494:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000498:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800049a:	4b21      	ldr	r3, [pc, #132]	; (8000520 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800049c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800049e:	b13a      	cbz	r2, 80004b0 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 80004a0:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 80004a4:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 80004a6:	b91a      	cbnz	r2, 80004b0 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004a8:	4b1e      	ldr	r3, [pc, #120]	; (8000524 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 80004aa:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 80004ae:	6018      	str	r0, [r3, #0]

080004b0 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004b0:	491d      	ldr	r1, [pc, #116]	; (8000528 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 80004b2:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 80004b4:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 80004b6:	b122      	cbz	r2, 80004c2 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004b8:	4b1c      	ldr	r3, [pc, #112]	; (800052c <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 80004ba:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 80004be:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 80004c0:	e008      	b.n	80004d4 <__tx_timer_done>

080004c2 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 80004c2:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80004c6:	4b1a      	ldr	r3, [pc, #104]	; (8000530 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 80004c8:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 80004ca:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 80004cc:	d101      	bne.n	80004d2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004ce:	4b19      	ldr	r3, [pc, #100]	; (8000534 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80004d0:	6818      	ldr	r0, [r3, #0]

080004d2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80004d2:	6008      	str	r0, [r1, #0]

080004d4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80004d4:	4b13      	ldr	r3, [pc, #76]	; (8000524 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80004d6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80004d8:	b912      	cbnz	r2, 80004e0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80004da:	4914      	ldr	r1, [pc, #80]	; (800052c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80004dc:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80004de:	b1d0      	cbz	r0, 8000516 <__tx_timer_nothing_expired>

080004e0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80004e0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80004e4:	4911      	ldr	r1, [pc, #68]	; (800052c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80004e6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80004e8:	b108      	cbz	r0, 80004ee <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80004ea:	f006 fb3d 	bl	8006b68 <_tx_timer_expiration_process>

080004ee <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80004ee:	4b0d      	ldr	r3, [pc, #52]	; (8000524 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 80004f0:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 80004f2:	b172      	cbz	r2, 8000512 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 80004f4:	f006 faaa 	bl	8006a4c <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004f8:	480f      	ldr	r0, [pc, #60]	; (8000538 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 80004fa:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 80004fc:	b949      	cbnz	r1, 8000512 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004fe:	480f      	ldr	r0, [pc, #60]	; (800053c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000500:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000502:	4a0f      	ldr	r2, [pc, #60]	; (8000540 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8000504:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000506:	480f      	ldr	r0, [pc, #60]	; (8000544 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000508:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 800050c:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 800050e:	d000      	beq.n	8000512 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000510:	6002      	str	r2, [r0, #0]

08000512 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 8000512:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000516 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000516:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 800051a:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800051c:	240011b4 	.word	0x240011b4
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000520:	24000cdc 	.word	0x24000cdc
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000524:	240011b0 	.word	0x240011b0
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000528:	24000c54 	.word	0x24000c54
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800052c:	24000cd8 	.word	0x24000cd8
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000530:	24000ce4 	.word	0x24000ce4
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000534:	24000d9c 	.word	0x24000d9c
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000538:	24000c44 	.word	0x24000c44
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800053c:	24000c48 	.word	0x24000c48
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000540:	24000c4c 	.word	0x24000c4c
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000544:	e000ed04 	.word	0xe000ed04

08000548 <__aeabi_uldivmod>:
 8000548:	b953      	cbnz	r3, 8000560 <__aeabi_uldivmod+0x18>
 800054a:	b94a      	cbnz	r2, 8000560 <__aeabi_uldivmod+0x18>
 800054c:	2900      	cmp	r1, #0
 800054e:	bf08      	it	eq
 8000550:	2800      	cmpeq	r0, #0
 8000552:	bf1c      	itt	ne
 8000554:	f04f 31ff 	movne.w	r1, #4294967295
 8000558:	f04f 30ff 	movne.w	r0, #4294967295
 800055c:	f000 b96e 	b.w	800083c <__aeabi_idiv0>
 8000560:	f1ad 0c08 	sub.w	ip, sp, #8
 8000564:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000568:	f000 f806 	bl	8000578 <__udivmoddi4>
 800056c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000570:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000574:	b004      	add	sp, #16
 8000576:	4770      	bx	lr

08000578 <__udivmoddi4>:
 8000578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800057c:	9d08      	ldr	r5, [sp, #32]
 800057e:	4604      	mov	r4, r0
 8000580:	468c      	mov	ip, r1
 8000582:	2b00      	cmp	r3, #0
 8000584:	f040 8083 	bne.w	800068e <__udivmoddi4+0x116>
 8000588:	428a      	cmp	r2, r1
 800058a:	4617      	mov	r7, r2
 800058c:	d947      	bls.n	800061e <__udivmoddi4+0xa6>
 800058e:	fab2 f282 	clz	r2, r2
 8000592:	b142      	cbz	r2, 80005a6 <__udivmoddi4+0x2e>
 8000594:	f1c2 0020 	rsb	r0, r2, #32
 8000598:	fa24 f000 	lsr.w	r0, r4, r0
 800059c:	4091      	lsls	r1, r2
 800059e:	4097      	lsls	r7, r2
 80005a0:	ea40 0c01 	orr.w	ip, r0, r1
 80005a4:	4094      	lsls	r4, r2
 80005a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80005aa:	0c23      	lsrs	r3, r4, #16
 80005ac:	fbbc f6f8 	udiv	r6, ip, r8
 80005b0:	fa1f fe87 	uxth.w	lr, r7
 80005b4:	fb08 c116 	mls	r1, r8, r6, ip
 80005b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005bc:	fb06 f10e 	mul.w	r1, r6, lr
 80005c0:	4299      	cmp	r1, r3
 80005c2:	d909      	bls.n	80005d8 <__udivmoddi4+0x60>
 80005c4:	18fb      	adds	r3, r7, r3
 80005c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80005ca:	f080 8119 	bcs.w	8000800 <__udivmoddi4+0x288>
 80005ce:	4299      	cmp	r1, r3
 80005d0:	f240 8116 	bls.w	8000800 <__udivmoddi4+0x288>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	443b      	add	r3, r7
 80005d8:	1a5b      	subs	r3, r3, r1
 80005da:	b2a4      	uxth	r4, r4
 80005dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e0:	fb08 3310 	mls	r3, r8, r0, r3
 80005e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80005ec:	45a6      	cmp	lr, r4
 80005ee:	d909      	bls.n	8000604 <__udivmoddi4+0x8c>
 80005f0:	193c      	adds	r4, r7, r4
 80005f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80005f6:	f080 8105 	bcs.w	8000804 <__udivmoddi4+0x28c>
 80005fa:	45a6      	cmp	lr, r4
 80005fc:	f240 8102 	bls.w	8000804 <__udivmoddi4+0x28c>
 8000600:	3802      	subs	r0, #2
 8000602:	443c      	add	r4, r7
 8000604:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000608:	eba4 040e 	sub.w	r4, r4, lr
 800060c:	2600      	movs	r6, #0
 800060e:	b11d      	cbz	r5, 8000618 <__udivmoddi4+0xa0>
 8000610:	40d4      	lsrs	r4, r2
 8000612:	2300      	movs	r3, #0
 8000614:	e9c5 4300 	strd	r4, r3, [r5]
 8000618:	4631      	mov	r1, r6
 800061a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800061e:	b902      	cbnz	r2, 8000622 <__udivmoddi4+0xaa>
 8000620:	deff      	udf	#255	; 0xff
 8000622:	fab2 f282 	clz	r2, r2
 8000626:	2a00      	cmp	r2, #0
 8000628:	d150      	bne.n	80006cc <__udivmoddi4+0x154>
 800062a:	1bcb      	subs	r3, r1, r7
 800062c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000630:	fa1f f887 	uxth.w	r8, r7
 8000634:	2601      	movs	r6, #1
 8000636:	fbb3 fcfe 	udiv	ip, r3, lr
 800063a:	0c21      	lsrs	r1, r4, #16
 800063c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000640:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000644:	fb08 f30c 	mul.w	r3, r8, ip
 8000648:	428b      	cmp	r3, r1
 800064a:	d907      	bls.n	800065c <__udivmoddi4+0xe4>
 800064c:	1879      	adds	r1, r7, r1
 800064e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000652:	d202      	bcs.n	800065a <__udivmoddi4+0xe2>
 8000654:	428b      	cmp	r3, r1
 8000656:	f200 80e9 	bhi.w	800082c <__udivmoddi4+0x2b4>
 800065a:	4684      	mov	ip, r0
 800065c:	1ac9      	subs	r1, r1, r3
 800065e:	b2a3      	uxth	r3, r4
 8000660:	fbb1 f0fe 	udiv	r0, r1, lr
 8000664:	fb0e 1110 	mls	r1, lr, r0, r1
 8000668:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800066c:	fb08 f800 	mul.w	r8, r8, r0
 8000670:	45a0      	cmp	r8, r4
 8000672:	d907      	bls.n	8000684 <__udivmoddi4+0x10c>
 8000674:	193c      	adds	r4, r7, r4
 8000676:	f100 33ff 	add.w	r3, r0, #4294967295
 800067a:	d202      	bcs.n	8000682 <__udivmoddi4+0x10a>
 800067c:	45a0      	cmp	r8, r4
 800067e:	f200 80d9 	bhi.w	8000834 <__udivmoddi4+0x2bc>
 8000682:	4618      	mov	r0, r3
 8000684:	eba4 0408 	sub.w	r4, r4, r8
 8000688:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800068c:	e7bf      	b.n	800060e <__udivmoddi4+0x96>
 800068e:	428b      	cmp	r3, r1
 8000690:	d909      	bls.n	80006a6 <__udivmoddi4+0x12e>
 8000692:	2d00      	cmp	r5, #0
 8000694:	f000 80b1 	beq.w	80007fa <__udivmoddi4+0x282>
 8000698:	2600      	movs	r6, #0
 800069a:	e9c5 0100 	strd	r0, r1, [r5]
 800069e:	4630      	mov	r0, r6
 80006a0:	4631      	mov	r1, r6
 80006a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006a6:	fab3 f683 	clz	r6, r3
 80006aa:	2e00      	cmp	r6, #0
 80006ac:	d14a      	bne.n	8000744 <__udivmoddi4+0x1cc>
 80006ae:	428b      	cmp	r3, r1
 80006b0:	d302      	bcc.n	80006b8 <__udivmoddi4+0x140>
 80006b2:	4282      	cmp	r2, r0
 80006b4:	f200 80b8 	bhi.w	8000828 <__udivmoddi4+0x2b0>
 80006b8:	1a84      	subs	r4, r0, r2
 80006ba:	eb61 0103 	sbc.w	r1, r1, r3
 80006be:	2001      	movs	r0, #1
 80006c0:	468c      	mov	ip, r1
 80006c2:	2d00      	cmp	r5, #0
 80006c4:	d0a8      	beq.n	8000618 <__udivmoddi4+0xa0>
 80006c6:	e9c5 4c00 	strd	r4, ip, [r5]
 80006ca:	e7a5      	b.n	8000618 <__udivmoddi4+0xa0>
 80006cc:	f1c2 0320 	rsb	r3, r2, #32
 80006d0:	fa20 f603 	lsr.w	r6, r0, r3
 80006d4:	4097      	lsls	r7, r2
 80006d6:	fa01 f002 	lsl.w	r0, r1, r2
 80006da:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80006de:	40d9      	lsrs	r1, r3
 80006e0:	4330      	orrs	r0, r6
 80006e2:	0c03      	lsrs	r3, r0, #16
 80006e4:	fbb1 f6fe 	udiv	r6, r1, lr
 80006e8:	fa1f f887 	uxth.w	r8, r7
 80006ec:	fb0e 1116 	mls	r1, lr, r6, r1
 80006f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006f4:	fb06 f108 	mul.w	r1, r6, r8
 80006f8:	4299      	cmp	r1, r3
 80006fa:	fa04 f402 	lsl.w	r4, r4, r2
 80006fe:	d909      	bls.n	8000714 <__udivmoddi4+0x19c>
 8000700:	18fb      	adds	r3, r7, r3
 8000702:	f106 3cff 	add.w	ip, r6, #4294967295
 8000706:	f080 808d 	bcs.w	8000824 <__udivmoddi4+0x2ac>
 800070a:	4299      	cmp	r1, r3
 800070c:	f240 808a 	bls.w	8000824 <__udivmoddi4+0x2ac>
 8000710:	3e02      	subs	r6, #2
 8000712:	443b      	add	r3, r7
 8000714:	1a5b      	subs	r3, r3, r1
 8000716:	b281      	uxth	r1, r0
 8000718:	fbb3 f0fe 	udiv	r0, r3, lr
 800071c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000720:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000724:	fb00 f308 	mul.w	r3, r0, r8
 8000728:	428b      	cmp	r3, r1
 800072a:	d907      	bls.n	800073c <__udivmoddi4+0x1c4>
 800072c:	1879      	adds	r1, r7, r1
 800072e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000732:	d273      	bcs.n	800081c <__udivmoddi4+0x2a4>
 8000734:	428b      	cmp	r3, r1
 8000736:	d971      	bls.n	800081c <__udivmoddi4+0x2a4>
 8000738:	3802      	subs	r0, #2
 800073a:	4439      	add	r1, r7
 800073c:	1acb      	subs	r3, r1, r3
 800073e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000742:	e778      	b.n	8000636 <__udivmoddi4+0xbe>
 8000744:	f1c6 0c20 	rsb	ip, r6, #32
 8000748:	fa03 f406 	lsl.w	r4, r3, r6
 800074c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000750:	431c      	orrs	r4, r3
 8000752:	fa20 f70c 	lsr.w	r7, r0, ip
 8000756:	fa01 f306 	lsl.w	r3, r1, r6
 800075a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800075e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000762:	431f      	orrs	r7, r3
 8000764:	0c3b      	lsrs	r3, r7, #16
 8000766:	fbb1 f9fe 	udiv	r9, r1, lr
 800076a:	fa1f f884 	uxth.w	r8, r4
 800076e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000772:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000776:	fb09 fa08 	mul.w	sl, r9, r8
 800077a:	458a      	cmp	sl, r1
 800077c:	fa02 f206 	lsl.w	r2, r2, r6
 8000780:	fa00 f306 	lsl.w	r3, r0, r6
 8000784:	d908      	bls.n	8000798 <__udivmoddi4+0x220>
 8000786:	1861      	adds	r1, r4, r1
 8000788:	f109 30ff 	add.w	r0, r9, #4294967295
 800078c:	d248      	bcs.n	8000820 <__udivmoddi4+0x2a8>
 800078e:	458a      	cmp	sl, r1
 8000790:	d946      	bls.n	8000820 <__udivmoddi4+0x2a8>
 8000792:	f1a9 0902 	sub.w	r9, r9, #2
 8000796:	4421      	add	r1, r4
 8000798:	eba1 010a 	sub.w	r1, r1, sl
 800079c:	b2bf      	uxth	r7, r7
 800079e:	fbb1 f0fe 	udiv	r0, r1, lr
 80007a2:	fb0e 1110 	mls	r1, lr, r0, r1
 80007a6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80007aa:	fb00 f808 	mul.w	r8, r0, r8
 80007ae:	45b8      	cmp	r8, r7
 80007b0:	d907      	bls.n	80007c2 <__udivmoddi4+0x24a>
 80007b2:	19e7      	adds	r7, r4, r7
 80007b4:	f100 31ff 	add.w	r1, r0, #4294967295
 80007b8:	d22e      	bcs.n	8000818 <__udivmoddi4+0x2a0>
 80007ba:	45b8      	cmp	r8, r7
 80007bc:	d92c      	bls.n	8000818 <__udivmoddi4+0x2a0>
 80007be:	3802      	subs	r0, #2
 80007c0:	4427      	add	r7, r4
 80007c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80007c6:	eba7 0708 	sub.w	r7, r7, r8
 80007ca:	fba0 8902 	umull	r8, r9, r0, r2
 80007ce:	454f      	cmp	r7, r9
 80007d0:	46c6      	mov	lr, r8
 80007d2:	4649      	mov	r1, r9
 80007d4:	d31a      	bcc.n	800080c <__udivmoddi4+0x294>
 80007d6:	d017      	beq.n	8000808 <__udivmoddi4+0x290>
 80007d8:	b15d      	cbz	r5, 80007f2 <__udivmoddi4+0x27a>
 80007da:	ebb3 020e 	subs.w	r2, r3, lr
 80007de:	eb67 0701 	sbc.w	r7, r7, r1
 80007e2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80007e6:	40f2      	lsrs	r2, r6
 80007e8:	ea4c 0202 	orr.w	r2, ip, r2
 80007ec:	40f7      	lsrs	r7, r6
 80007ee:	e9c5 2700 	strd	r2, r7, [r5]
 80007f2:	2600      	movs	r6, #0
 80007f4:	4631      	mov	r1, r6
 80007f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007fa:	462e      	mov	r6, r5
 80007fc:	4628      	mov	r0, r5
 80007fe:	e70b      	b.n	8000618 <__udivmoddi4+0xa0>
 8000800:	4606      	mov	r6, r0
 8000802:	e6e9      	b.n	80005d8 <__udivmoddi4+0x60>
 8000804:	4618      	mov	r0, r3
 8000806:	e6fd      	b.n	8000604 <__udivmoddi4+0x8c>
 8000808:	4543      	cmp	r3, r8
 800080a:	d2e5      	bcs.n	80007d8 <__udivmoddi4+0x260>
 800080c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000810:	eb69 0104 	sbc.w	r1, r9, r4
 8000814:	3801      	subs	r0, #1
 8000816:	e7df      	b.n	80007d8 <__udivmoddi4+0x260>
 8000818:	4608      	mov	r0, r1
 800081a:	e7d2      	b.n	80007c2 <__udivmoddi4+0x24a>
 800081c:	4660      	mov	r0, ip
 800081e:	e78d      	b.n	800073c <__udivmoddi4+0x1c4>
 8000820:	4681      	mov	r9, r0
 8000822:	e7b9      	b.n	8000798 <__udivmoddi4+0x220>
 8000824:	4666      	mov	r6, ip
 8000826:	e775      	b.n	8000714 <__udivmoddi4+0x19c>
 8000828:	4630      	mov	r0, r6
 800082a:	e74a      	b.n	80006c2 <__udivmoddi4+0x14a>
 800082c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000830:	4439      	add	r1, r7
 8000832:	e713      	b.n	800065c <__udivmoddi4+0xe4>
 8000834:	3802      	subs	r0, #2
 8000836:	443c      	add	r4, r7
 8000838:	e724      	b.n	8000684 <__udivmoddi4+0x10c>
 800083a:	bf00      	nop

0800083c <__aeabi_idiv0>:
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop

08000840 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af02      	add	r7, sp, #8
 8000846:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 800084c:	2334      	movs	r3, #52	; 0x34
 800084e:	9300      	str	r3, [sp, #0]
 8000850:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000854:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <tx_application_define+0x40>)
 8000856:	490b      	ldr	r1, [pc, #44]	; (8000884 <tx_application_define+0x44>)
 8000858:	480b      	ldr	r0, [pc, #44]	; (8000888 <tx_application_define+0x48>)
 800085a:	f006 fbbb 	bl	8006fd4 <_txe_byte_pool_create>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d109      	bne.n	8000878 <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8000864:	4b08      	ldr	r3, [pc, #32]	; (8000888 <tx_application_define+0x48>)
 8000866:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 8000868:	68b8      	ldr	r0, [r7, #8]
 800086a:	f000 f80f 	bl	800088c <App_ThreadX_Init>
 800086e:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d000      	beq.n	8000878 <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 8000876:	e7fe      	b.n	8000876 <tx_application_define+0x36>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 8000878:	bf00      	nop
 800087a:	3710      	adds	r7, #16
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	240000f0 	.word	0x240000f0
 8000884:	08007368 	.word	0x08007368
 8000888:	240004f0 	.word	0x240004f0

0800088c <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08c      	sub	sp, #48	; 0x30
 8000890:	af08      	add	r7, sp, #32
 8000892:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000894:	2300      	movs	r3, #0
 8000896:	60fb      	str	r3, [r7, #12]
  TX_BYTE_POOL *byte_pool =( TX_BYTE_POOL*)memory_ptr;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	60bb      	str	r3, [r7, #8]
  /* USER CODE BEGIN App_ThreadX_MEM_POOL */
(void)byte_pool;
  /* USER CODE END App_ThreadX_MEM_POOL */

  /* USER CODE BEGIN App_ThreadX_Init */
tx_thread_create(&thread_ptr,"my_thread",my_thread_entry,0x1234,thread_stack,THREAD_STACK_SIZE,15,15,1,TX_AUTO_START);
 800089c:	23b0      	movs	r3, #176	; 0xb0
 800089e:	9306      	str	r3, [sp, #24]
 80008a0:	2301      	movs	r3, #1
 80008a2:	9305      	str	r3, [sp, #20]
 80008a4:	2301      	movs	r3, #1
 80008a6:	9304      	str	r3, [sp, #16]
 80008a8:	230f      	movs	r3, #15
 80008aa:	9303      	str	r3, [sp, #12]
 80008ac:	230f      	movs	r3, #15
 80008ae:	9302      	str	r3, [sp, #8]
 80008b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008b4:	9301      	str	r3, [sp, #4]
 80008b6:	4b07      	ldr	r3, [pc, #28]	; (80008d4 <App_ThreadX_Init+0x48>)
 80008b8:	9300      	str	r3, [sp, #0]
 80008ba:	f241 2334 	movw	r3, #4660	; 0x1234
 80008be:	4a06      	ldr	r2, [pc, #24]	; (80008d8 <App_ThreadX_Init+0x4c>)
 80008c0:	4906      	ldr	r1, [pc, #24]	; (80008dc <App_ThreadX_Init+0x50>)
 80008c2:	4807      	ldr	r0, [pc, #28]	; (80008e0 <App_ThreadX_Init+0x54>)
 80008c4:	f006 fc26 	bl	8007114 <_txe_thread_create>
  /* USER CODE END App_ThreadX_Init */

  return ret;
 80008c8:	68fb      	ldr	r3, [r7, #12]
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3710      	adds	r7, #16
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	240005dc 	.word	0x240005dc
 80008d8:	080008f1 	.word	0x080008f1
 80008dc:	0800737c 	.word	0x0800737c
 80008e0:	2400052c 	.word	0x2400052c

080008e4 <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 80008e8:	f005 fc36 	bl	8006158 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <my_thread_entry>:

/* USER CODE BEGIN 1 */
void my_thread_entry(ULONG inital_input){
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	while(1){
		 HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin);
 80008f8:	2102      	movs	r1, #2
 80008fa:	4803      	ldr	r0, [pc, #12]	; (8000908 <my_thread_entry+0x18>)
 80008fc:	f001 fc0d 	bl	800211a <HAL_GPIO_TogglePin>
		 tx_thread_sleep(20);
 8000900:	2014      	movs	r0, #20
 8000902:	f005 fdd1 	bl	80064a8 <_tx_thread_sleep>
		 HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin);
 8000906:	e7f7      	b.n	80008f8 <my_thread_entry+0x8>
 8000908:	58021000 	.word	0x58021000

0800090c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000910:	f000 fcb8 	bl	8001284 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000914:	f000 f816 	bl	8000944 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000918:	f000 f924 	bl	8000b64 <MX_GPIO_Init>
  MX_ETH_Init();
 800091c:	f000 f882 	bl	8000a24 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000920:	f000 f8cc 	bl	8000abc <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000924:	f000 f916 	bl	8000b54 <MX_USB_OTG_HS_USB_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8000928:	f7ff ffdc 	bl	80008e4 <MX_ThreadX_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin);
 800092c:	2102      	movs	r1, #2
 800092e:	4804      	ldr	r0, [pc, #16]	; (8000940 <main+0x34>)
 8000930:	f001 fbf3 	bl	800211a <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000934:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000938:	f000 fd00 	bl	800133c <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin);
 800093c:	e7f6      	b.n	800092c <main+0x20>
 800093e:	bf00      	nop
 8000940:	58021000 	.word	0x58021000

08000944 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b09c      	sub	sp, #112	; 0x70
 8000948:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800094a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800094e:	224c      	movs	r2, #76	; 0x4c
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f006 fcf4 	bl	8007340 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	2220      	movs	r2, #32
 800095c:	2100      	movs	r1, #0
 800095e:	4618      	mov	r0, r3
 8000960:	f006 fcee 	bl	8007340 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000964:	2002      	movs	r0, #2
 8000966:	f001 fbf3 	bl	8002150 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800096a:	2300      	movs	r3, #0
 800096c:	603b      	str	r3, [r7, #0]
 800096e:	4b2c      	ldr	r3, [pc, #176]	; (8000a20 <SystemClock_Config+0xdc>)
 8000970:	699b      	ldr	r3, [r3, #24]
 8000972:	4a2b      	ldr	r2, [pc, #172]	; (8000a20 <SystemClock_Config+0xdc>)
 8000974:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000978:	6193      	str	r3, [r2, #24]
 800097a:	4b29      	ldr	r3, [pc, #164]	; (8000a20 <SystemClock_Config+0xdc>)
 800097c:	699b      	ldr	r3, [r3, #24]
 800097e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000986:	bf00      	nop
 8000988:	4b25      	ldr	r3, [pc, #148]	; (8000a20 <SystemClock_Config+0xdc>)
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000990:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000994:	d1f8      	bne.n	8000988 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000996:	2321      	movs	r3, #33	; 0x21
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800099a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800099e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80009a0:	2301      	movs	r3, #1
 80009a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a4:	2302      	movs	r3, #2
 80009a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009a8:	2302      	movs	r3, #2
 80009aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009ac:	2304      	movs	r3, #4
 80009ae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 80009b0:	f240 1313 	movw	r3, #275	; 0x113
 80009b4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80009b6:	2301      	movs	r3, #1
 80009b8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009ba:	2304      	movs	r3, #4
 80009bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009be:	2302      	movs	r3, #2
 80009c0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80009c2:	2304      	movs	r3, #4
 80009c4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009c6:	2300      	movs	r3, #0
 80009c8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d2:	4618      	mov	r0, r3
 80009d4:	f001 fbf6 	bl	80021c4 <HAL_RCC_OscConfig>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80009de:	f000 f9cf 	bl	8000d80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e2:	233f      	movs	r3, #63	; 0x3f
 80009e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e6:	2303      	movs	r3, #3
 80009e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80009ee:	2308      	movs	r3, #8
 80009f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009f2:	2340      	movs	r3, #64	; 0x40
 80009f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009f6:	2340      	movs	r3, #64	; 0x40
 80009f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009fe:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a00:	2340      	movs	r3, #64	; 0x40
 8000a02:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a04:	1d3b      	adds	r3, r7, #4
 8000a06:	2103      	movs	r1, #3
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f001 ff87 	bl	800291c <HAL_RCC_ClockConfig>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000a14:	f000 f9b4 	bl	8000d80 <Error_Handler>
  }
}
 8000a18:	bf00      	nop
 8000a1a:	3770      	adds	r7, #112	; 0x70
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	58024800 	.word	0x58024800

08000a24 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a28:	4b1e      	ldr	r3, [pc, #120]	; (8000aa4 <MX_ETH_Init+0x80>)
 8000a2a:	4a1f      	ldr	r2, [pc, #124]	; (8000aa8 <MX_ETH_Init+0x84>)
 8000a2c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000a2e:	4b1f      	ldr	r3, [pc, #124]	; (8000aac <MX_ETH_Init+0x88>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a34:	4b1d      	ldr	r3, [pc, #116]	; (8000aac <MX_ETH_Init+0x88>)
 8000a36:	2280      	movs	r2, #128	; 0x80
 8000a38:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000a3a:	4b1c      	ldr	r3, [pc, #112]	; (8000aac <MX_ETH_Init+0x88>)
 8000a3c:	22e1      	movs	r2, #225	; 0xe1
 8000a3e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000a40:	4b1a      	ldr	r3, [pc, #104]	; (8000aac <MX_ETH_Init+0x88>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000a46:	4b19      	ldr	r3, [pc, #100]	; (8000aac <MX_ETH_Init+0x88>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a4c:	4b17      	ldr	r3, [pc, #92]	; (8000aac <MX_ETH_Init+0x88>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a52:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <MX_ETH_Init+0x80>)
 8000a54:	4a15      	ldr	r2, [pc, #84]	; (8000aac <MX_ETH_Init+0x88>)
 8000a56:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a58:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <MX_ETH_Init+0x80>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a5e:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <MX_ETH_Init+0x80>)
 8000a60:	4a13      	ldr	r2, [pc, #76]	; (8000ab0 <MX_ETH_Init+0x8c>)
 8000a62:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a64:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <MX_ETH_Init+0x80>)
 8000a66:	4a13      	ldr	r2, [pc, #76]	; (8000ab4 <MX_ETH_Init+0x90>)
 8000a68:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 4;
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <MX_ETH_Init+0x80>)
 8000a6c:	2204      	movs	r2, #4
 8000a6e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a70:	480c      	ldr	r0, [pc, #48]	; (8000aa4 <MX_ETH_Init+0x80>)
 8000a72:	f000 fd7b 	bl	800156c <HAL_ETH_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_ETH_Init+0x5c>
  {
    Error_Handler();
 8000a7c:	f000 f980 	bl	8000d80 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a80:	2234      	movs	r2, #52	; 0x34
 8000a82:	2100      	movs	r1, #0
 8000a84:	480c      	ldr	r0, [pc, #48]	; (8000ab8 <MX_ETH_Init+0x94>)
 8000a86:	f006 fc5b 	bl	8007340 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <MX_ETH_Init+0x94>)
 8000a8c:	2221      	movs	r2, #33	; 0x21
 8000a8e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a90:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <MX_ETH_Init+0x94>)
 8000a92:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a96:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a98:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <MX_ETH_Init+0x94>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	24000a6c 	.word	0x24000a6c
 8000aa8:	40028000 	.word	0x40028000
 8000aac:	24000524 	.word	0x24000524
 8000ab0:	24000074 	.word	0x24000074
 8000ab4:	24000014 	.word	0x24000014
 8000ab8:	24000af4 	.word	0x24000af4

08000abc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ac0:	4b22      	ldr	r3, [pc, #136]	; (8000b4c <MX_USART3_UART_Init+0x90>)
 8000ac2:	4a23      	ldr	r2, [pc, #140]	; (8000b50 <MX_USART3_UART_Init+0x94>)
 8000ac4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ac6:	4b21      	ldr	r3, [pc, #132]	; (8000b4c <MX_USART3_UART_Init+0x90>)
 8000ac8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000acc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ace:	4b1f      	ldr	r3, [pc, #124]	; (8000b4c <MX_USART3_UART_Init+0x90>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ad4:	4b1d      	ldr	r3, [pc, #116]	; (8000b4c <MX_USART3_UART_Init+0x90>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ada:	4b1c      	ldr	r3, [pc, #112]	; (8000b4c <MX_USART3_UART_Init+0x90>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ae0:	4b1a      	ldr	r3, [pc, #104]	; (8000b4c <MX_USART3_UART_Init+0x90>)
 8000ae2:	220c      	movs	r2, #12
 8000ae4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae6:	4b19      	ldr	r3, [pc, #100]	; (8000b4c <MX_USART3_UART_Init+0x90>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aec:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <MX_USART3_UART_Init+0x90>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000af2:	4b16      	ldr	r3, [pc, #88]	; (8000b4c <MX_USART3_UART_Init+0x90>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000af8:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <MX_USART3_UART_Init+0x90>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000afe:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <MX_USART3_UART_Init+0x90>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b04:	4811      	ldr	r0, [pc, #68]	; (8000b4c <MX_USART3_UART_Init+0x90>)
 8000b06:	f004 f8e7 	bl	8004cd8 <HAL_UART_Init>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b10:	f000 f936 	bl	8000d80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b14:	2100      	movs	r1, #0
 8000b16:	480d      	ldr	r0, [pc, #52]	; (8000b4c <MX_USART3_UART_Init+0x90>)
 8000b18:	f005 f97a 	bl	8005e10 <HAL_UARTEx_SetTxFifoThreshold>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b22:	f000 f92d 	bl	8000d80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b26:	2100      	movs	r1, #0
 8000b28:	4808      	ldr	r0, [pc, #32]	; (8000b4c <MX_USART3_UART_Init+0x90>)
 8000b2a:	f005 f9af 	bl	8005e8c <HAL_UARTEx_SetRxFifoThreshold>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b34:	f000 f924 	bl	8000d80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b38:	4804      	ldr	r0, [pc, #16]	; (8000b4c <MX_USART3_UART_Init+0x90>)
 8000b3a:	f005 f930 	bl	8005d9e <HAL_UARTEx_DisableFifoMode>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b44:	f000 f91c 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b48:	bf00      	nop
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	240009dc 	.word	0x240009dc
 8000b50:	40004800 	.word	0x40004800

08000b54 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
	...

08000b64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08c      	sub	sp, #48	; 0x30
 8000b68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6a:	f107 031c 	add.w	r3, r7, #28
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]
 8000b78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7a:	4b71      	ldr	r3, [pc, #452]	; (8000d40 <MX_GPIO_Init+0x1dc>)
 8000b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b80:	4a6f      	ldr	r2, [pc, #444]	; (8000d40 <MX_GPIO_Init+0x1dc>)
 8000b82:	f043 0304 	orr.w	r3, r3, #4
 8000b86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b8a:	4b6d      	ldr	r3, [pc, #436]	; (8000d40 <MX_GPIO_Init+0x1dc>)
 8000b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b90:	f003 0304 	and.w	r3, r3, #4
 8000b94:	61bb      	str	r3, [r7, #24]
 8000b96:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b98:	4b69      	ldr	r3, [pc, #420]	; (8000d40 <MX_GPIO_Init+0x1dc>)
 8000b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b9e:	4a68      	ldr	r2, [pc, #416]	; (8000d40 <MX_GPIO_Init+0x1dc>)
 8000ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ba4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ba8:	4b65      	ldr	r3, [pc, #404]	; (8000d40 <MX_GPIO_Init+0x1dc>)
 8000baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bb2:	617b      	str	r3, [r7, #20]
 8000bb4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb6:	4b62      	ldr	r3, [pc, #392]	; (8000d40 <MX_GPIO_Init+0x1dc>)
 8000bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bbc:	4a60      	ldr	r2, [pc, #384]	; (8000d40 <MX_GPIO_Init+0x1dc>)
 8000bbe:	f043 0301 	orr.w	r3, r3, #1
 8000bc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bc6:	4b5e      	ldr	r3, [pc, #376]	; (8000d40 <MX_GPIO_Init+0x1dc>)
 8000bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bcc:	f003 0301 	and.w	r3, r3, #1
 8000bd0:	613b      	str	r3, [r7, #16]
 8000bd2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd4:	4b5a      	ldr	r3, [pc, #360]	; (8000d40 <MX_GPIO_Init+0x1dc>)
 8000bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bda:	4a59      	ldr	r2, [pc, #356]	; (8000d40 <MX_GPIO_Init+0x1dc>)
 8000bdc:	f043 0302 	orr.w	r3, r3, #2
 8000be0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000be4:	4b56      	ldr	r3, [pc, #344]	; (8000d40 <MX_GPIO_Init+0x1dc>)
 8000be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bea:	f003 0302 	and.w	r3, r3, #2
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bf2:	4b53      	ldr	r3, [pc, #332]	; (8000d40 <MX_GPIO_Init+0x1dc>)
 8000bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf8:	4a51      	ldr	r2, [pc, #324]	; (8000d40 <MX_GPIO_Init+0x1dc>)
 8000bfa:	f043 0308 	orr.w	r3, r3, #8
 8000bfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c02:	4b4f      	ldr	r3, [pc, #316]	; (8000d40 <MX_GPIO_Init+0x1dc>)
 8000c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c08:	f003 0308 	and.w	r3, r3, #8
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c10:	4b4b      	ldr	r3, [pc, #300]	; (8000d40 <MX_GPIO_Init+0x1dc>)
 8000c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c16:	4a4a      	ldr	r2, [pc, #296]	; (8000d40 <MX_GPIO_Init+0x1dc>)
 8000c18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c20:	4b47      	ldr	r3, [pc, #284]	; (8000d40 <MX_GPIO_Init+0x1dc>)
 8000c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c2e:	4b44      	ldr	r3, [pc, #272]	; (8000d40 <MX_GPIO_Init+0x1dc>)
 8000c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c34:	4a42      	ldr	r2, [pc, #264]	; (8000d40 <MX_GPIO_Init+0x1dc>)
 8000c36:	f043 0310 	orr.w	r3, r3, #16
 8000c3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c3e:	4b40      	ldr	r3, [pc, #256]	; (8000d40 <MX_GPIO_Init+0x1dc>)
 8000c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c44:	f003 0310 	and.w	r3, r3, #16
 8000c48:	603b      	str	r3, [r7, #0]
 8000c4a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f244 0101 	movw	r1, #16385	; 0x4001
 8000c52:	483c      	ldr	r0, [pc, #240]	; (8000d44 <MX_GPIO_Init+0x1e0>)
 8000c54:	f001 fa48 	bl	80020e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c5e:	483a      	ldr	r0, [pc, #232]	; (8000d48 <MX_GPIO_Init+0x1e4>)
 8000c60:	f001 fa42 	bl	80020e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2102      	movs	r1, #2
 8000c68:	4838      	ldr	r0, [pc, #224]	; (8000d4c <MX_GPIO_Init+0x1e8>)
 8000c6a:	f001 fa3d 	bl	80020e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c74:	2300      	movs	r3, #0
 8000c76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c7c:	f107 031c 	add.w	r3, r7, #28
 8000c80:	4619      	mov	r1, r3
 8000c82:	4833      	ldr	r0, [pc, #204]	; (8000d50 <MX_GPIO_Init+0x1ec>)
 8000c84:	f001 f888 	bl	8001d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000c88:	f244 0301 	movw	r3, #16385	; 0x4001
 8000c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	2300      	movs	r3, #0
 8000c98:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c9a:	f107 031c 	add.w	r3, r7, #28
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4828      	ldr	r0, [pc, #160]	; (8000d44 <MX_GPIO_Init+0x1e0>)
 8000ca2:	f001 f879 	bl	8001d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000ca6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000caa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cac:	2301      	movs	r3, #1
 8000cae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000cb8:	f107 031c 	add.w	r3, r7, #28
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4822      	ldr	r0, [pc, #136]	; (8000d48 <MX_GPIO_Init+0x1e4>)
 8000cc0:	f001 f86a 	bl	8001d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000cc4:	2380      	movs	r3, #128	; 0x80
 8000cc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cc8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ccc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000cd2:	f107 031c 	add.w	r3, r7, #28
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	481e      	ldr	r0, [pc, #120]	; (8000d54 <MX_GPIO_Init+0x1f0>)
 8000cda:	f001 f85d 	bl	8001d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000cde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ce2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000cec:	f107 031c 	add.w	r3, r7, #28
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4819      	ldr	r0, [pc, #100]	; (8000d58 <MX_GPIO_Init+0x1f4>)
 8000cf4:	f001 f850 	bl	8001d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000cf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	2300      	movs	r3, #0
 8000d08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000d0a:	230a      	movs	r3, #10
 8000d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000d0e:	f107 031c 	add.w	r3, r7, #28
 8000d12:	4619      	mov	r1, r3
 8000d14:	4810      	ldr	r0, [pc, #64]	; (8000d58 <MX_GPIO_Init+0x1f4>)
 8000d16:	f001 f83f 	bl	8001d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2300      	movs	r3, #0
 8000d28:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000d2a:	f107 031c 	add.w	r3, r7, #28
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4806      	ldr	r0, [pc, #24]	; (8000d4c <MX_GPIO_Init+0x1e8>)
 8000d32:	f001 f831 	bl	8001d98 <HAL_GPIO_Init>

}
 8000d36:	bf00      	nop
 8000d38:	3730      	adds	r7, #48	; 0x30
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	58024400 	.word	0x58024400
 8000d44:	58020400 	.word	0x58020400
 8000d48:	58020c00 	.word	0x58020c00
 8000d4c:	58021000 	.word	0x58021000
 8000d50:	58020800 	.word	0x58020800
 8000d54:	58021800 	.word	0x58021800
 8000d58:	58020000 	.word	0x58020000

08000d5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a04      	ldr	r2, [pc, #16]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d101      	bne.n	8000d72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d6e:	f000 fac5 	bl	80012fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40001000 	.word	0x40001000

08000d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d84:	b672      	cpsid	i
}
 8000d86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <Error_Handler+0x8>
	...

08000d8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d92:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <HAL_MspInit+0x30>)
 8000d94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d98:	4a08      	ldr	r2, [pc, #32]	; (8000dbc <HAL_MspInit+0x30>)
 8000d9a:	f043 0302 	orr.w	r3, r3, #2
 8000d9e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000da2:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_MspInit+0x30>)
 8000da4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000da8:	f003 0302 	and.w	r3, r3, #2
 8000dac:	607b      	str	r3, [r7, #4]
 8000dae:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db0:	bf00      	nop
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	58024400 	.word	0x58024400

08000dc0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08e      	sub	sp, #56	; 0x38
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a59      	ldr	r2, [pc, #356]	; (8000f44 <HAL_ETH_MspInit+0x184>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	f040 80ab 	bne.w	8000f3a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000de4:	4b58      	ldr	r3, [pc, #352]	; (8000f48 <HAL_ETH_MspInit+0x188>)
 8000de6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dea:	4a57      	ldr	r2, [pc, #348]	; (8000f48 <HAL_ETH_MspInit+0x188>)
 8000dec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000df0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000df4:	4b54      	ldr	r3, [pc, #336]	; (8000f48 <HAL_ETH_MspInit+0x188>)
 8000df6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dfe:	623b      	str	r3, [r7, #32]
 8000e00:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000e02:	4b51      	ldr	r3, [pc, #324]	; (8000f48 <HAL_ETH_MspInit+0x188>)
 8000e04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e08:	4a4f      	ldr	r2, [pc, #316]	; (8000f48 <HAL_ETH_MspInit+0x188>)
 8000e0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e0e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e12:	4b4d      	ldr	r3, [pc, #308]	; (8000f48 <HAL_ETH_MspInit+0x188>)
 8000e14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e1c:	61fb      	str	r3, [r7, #28]
 8000e1e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000e20:	4b49      	ldr	r3, [pc, #292]	; (8000f48 <HAL_ETH_MspInit+0x188>)
 8000e22:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e26:	4a48      	ldr	r2, [pc, #288]	; (8000f48 <HAL_ETH_MspInit+0x188>)
 8000e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e2c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e30:	4b45      	ldr	r3, [pc, #276]	; (8000f48 <HAL_ETH_MspInit+0x188>)
 8000e32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e3a:	61bb      	str	r3, [r7, #24]
 8000e3c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e3e:	4b42      	ldr	r3, [pc, #264]	; (8000f48 <HAL_ETH_MspInit+0x188>)
 8000e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e44:	4a40      	ldr	r2, [pc, #256]	; (8000f48 <HAL_ETH_MspInit+0x188>)
 8000e46:	f043 0304 	orr.w	r3, r3, #4
 8000e4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e4e:	4b3e      	ldr	r3, [pc, #248]	; (8000f48 <HAL_ETH_MspInit+0x188>)
 8000e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e54:	f003 0304 	and.w	r3, r3, #4
 8000e58:	617b      	str	r3, [r7, #20]
 8000e5a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5c:	4b3a      	ldr	r3, [pc, #232]	; (8000f48 <HAL_ETH_MspInit+0x188>)
 8000e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e62:	4a39      	ldr	r2, [pc, #228]	; (8000f48 <HAL_ETH_MspInit+0x188>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e6c:	4b36      	ldr	r3, [pc, #216]	; (8000f48 <HAL_ETH_MspInit+0x188>)
 8000e6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	613b      	str	r3, [r7, #16]
 8000e78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7a:	4b33      	ldr	r3, [pc, #204]	; (8000f48 <HAL_ETH_MspInit+0x188>)
 8000e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e80:	4a31      	ldr	r2, [pc, #196]	; (8000f48 <HAL_ETH_MspInit+0x188>)
 8000e82:	f043 0302 	orr.w	r3, r3, #2
 8000e86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e8a:	4b2f      	ldr	r3, [pc, #188]	; (8000f48 <HAL_ETH_MspInit+0x188>)
 8000e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e90:	f003 0302 	and.w	r3, r3, #2
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e98:	4b2b      	ldr	r3, [pc, #172]	; (8000f48 <HAL_ETH_MspInit+0x188>)
 8000e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e9e:	4a2a      	ldr	r2, [pc, #168]	; (8000f48 <HAL_ETH_MspInit+0x188>)
 8000ea0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ea4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ea8:	4b27      	ldr	r3, [pc, #156]	; (8000f48 <HAL_ETH_MspInit+0x188>)
 8000eaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000eb6:	2332      	movs	r3, #50	; 0x32
 8000eb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ec6:	230b      	movs	r3, #11
 8000ec8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ece:	4619      	mov	r1, r3
 8000ed0:	481e      	ldr	r0, [pc, #120]	; (8000f4c <HAL_ETH_MspInit+0x18c>)
 8000ed2:	f000 ff61 	bl	8001d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000ed6:	2386      	movs	r3, #134	; 0x86
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eda:	2302      	movs	r3, #2
 8000edc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ee6:	230b      	movs	r3, #11
 8000ee8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4817      	ldr	r0, [pc, #92]	; (8000f50 <HAL_ETH_MspInit+0x190>)
 8000ef2:	f000 ff51 	bl	8001d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ef6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000efa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efc:	2302      	movs	r3, #2
 8000efe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f04:	2300      	movs	r3, #0
 8000f06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f08:	230b      	movs	r3, #11
 8000f0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000f0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f10:	4619      	mov	r1, r3
 8000f12:	4810      	ldr	r0, [pc, #64]	; (8000f54 <HAL_ETH_MspInit+0x194>)
 8000f14:	f000 ff40 	bl	8001d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000f18:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000f1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f26:	2300      	movs	r3, #0
 8000f28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f2a:	230b      	movs	r3, #11
 8000f2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f32:	4619      	mov	r1, r3
 8000f34:	4808      	ldr	r0, [pc, #32]	; (8000f58 <HAL_ETH_MspInit+0x198>)
 8000f36:	f000 ff2f 	bl	8001d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000f3a:	bf00      	nop
 8000f3c:	3738      	adds	r7, #56	; 0x38
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40028000 	.word	0x40028000
 8000f48:	58024400 	.word	0x58024400
 8000f4c:	58020800 	.word	0x58020800
 8000f50:	58020000 	.word	0x58020000
 8000f54:	58020400 	.word	0x58020400
 8000f58:	58021800 	.word	0x58021800

08000f5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b0b6      	sub	sp, #216	; 0xd8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f74:	f107 0310 	add.w	r3, r7, #16
 8000f78:	22b4      	movs	r2, #180	; 0xb4
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f006 f9df 	bl	8007340 <memset>
  if(huart->Instance==USART3)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a25      	ldr	r2, [pc, #148]	; (800101c <HAL_UART_MspInit+0xc0>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d142      	bne.n	8001012 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f90:	2300      	movs	r3, #0
 8000f92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f96:	f107 0310 	add.w	r3, r7, #16
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f002 f88c 	bl	80030b8 <HAL_RCCEx_PeriphCLKConfig>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000fa6:	f7ff feeb 	bl	8000d80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000faa:	4b1d      	ldr	r3, [pc, #116]	; (8001020 <HAL_UART_MspInit+0xc4>)
 8000fac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fb0:	4a1b      	ldr	r2, [pc, #108]	; (8001020 <HAL_UART_MspInit+0xc4>)
 8000fb2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fb6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000fba:	4b19      	ldr	r3, [pc, #100]	; (8001020 <HAL_UART_MspInit+0xc4>)
 8000fbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fc8:	4b15      	ldr	r3, [pc, #84]	; (8001020 <HAL_UART_MspInit+0xc4>)
 8000fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fce:	4a14      	ldr	r2, [pc, #80]	; (8001020 <HAL_UART_MspInit+0xc4>)
 8000fd0:	f043 0308 	orr.w	r3, r3, #8
 8000fd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fd8:	4b11      	ldr	r3, [pc, #68]	; (8001020 <HAL_UART_MspInit+0xc4>)
 8000fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fde:	f003 0308 	and.w	r3, r3, #8
 8000fe2:	60bb      	str	r3, [r7, #8]
 8000fe4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8000fe6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001000:	2307      	movs	r3, #7
 8001002:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001006:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800100a:	4619      	mov	r1, r3
 800100c:	4805      	ldr	r0, [pc, #20]	; (8001024 <HAL_UART_MspInit+0xc8>)
 800100e:	f000 fec3 	bl	8001d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001012:	bf00      	nop
 8001014:	37d8      	adds	r7, #216	; 0xd8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40004800 	.word	0x40004800
 8001020:	58024400 	.word	0x58024400
 8001024:	58020c00 	.word	0x58020c00

08001028 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b090      	sub	sp, #64	; 0x40
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b0f      	cmp	r3, #15
 8001034:	d827      	bhi.n	8001086 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001036:	2200      	movs	r2, #0
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	2036      	movs	r0, #54	; 0x36
 800103c:	f000 fa6e 	bl	800151c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001040:	2036      	movs	r0, #54	; 0x36
 8001042:	f000 fa85 	bl	8001550 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001046:	4a29      	ldr	r2, [pc, #164]	; (80010ec <HAL_InitTick+0xc4>)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800104c:	4b28      	ldr	r3, [pc, #160]	; (80010f0 <HAL_InitTick+0xc8>)
 800104e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001052:	4a27      	ldr	r2, [pc, #156]	; (80010f0 <HAL_InitTick+0xc8>)
 8001054:	f043 0310 	orr.w	r3, r3, #16
 8001058:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800105c:	4b24      	ldr	r3, [pc, #144]	; (80010f0 <HAL_InitTick+0xc8>)
 800105e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001062:	f003 0310 	and.w	r3, r3, #16
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800106a:	f107 0210 	add.w	r2, r7, #16
 800106e:	f107 0314 	add.w	r3, r7, #20
 8001072:	4611      	mov	r1, r2
 8001074:	4618      	mov	r0, r3
 8001076:	f001 ffdd 	bl	8003034 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800107a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800107c:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800107e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001080:	2b00      	cmp	r3, #0
 8001082:	d106      	bne.n	8001092 <HAL_InitTick+0x6a>
 8001084:	e001      	b.n	800108a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e02b      	b.n	80010e2 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800108a:	f001 ffa7 	bl	8002fdc <HAL_RCC_GetPCLK1Freq>
 800108e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001090:	e004      	b.n	800109c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001092:	f001 ffa3 	bl	8002fdc <HAL_RCC_GetPCLK1Freq>
 8001096:	4603      	mov	r3, r0
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800109c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800109e:	4a15      	ldr	r2, [pc, #84]	; (80010f4 <HAL_InitTick+0xcc>)
 80010a0:	fba2 2303 	umull	r2, r3, r2, r3
 80010a4:	0c9b      	lsrs	r3, r3, #18
 80010a6:	3b01      	subs	r3, #1
 80010a8:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80010aa:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <HAL_InitTick+0xd0>)
 80010ac:	4a13      	ldr	r2, [pc, #76]	; (80010fc <HAL_InitTick+0xd4>)
 80010ae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80010b0:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <HAL_InitTick+0xd0>)
 80010b2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010b6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80010b8:	4a0f      	ldr	r2, [pc, #60]	; (80010f8 <HAL_InitTick+0xd0>)
 80010ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010bc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80010be:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <HAL_InitTick+0xd0>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c4:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <HAL_InitTick+0xd0>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80010ca:	480b      	ldr	r0, [pc, #44]	; (80010f8 <HAL_InitTick+0xd0>)
 80010cc:	f003 fb10 	bl	80046f0 <HAL_TIM_Base_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d104      	bne.n	80010e0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80010d6:	4808      	ldr	r0, [pc, #32]	; (80010f8 <HAL_InitTick+0xd0>)
 80010d8:	f003 fb6c 	bl	80047b4 <HAL_TIM_Base_Start_IT>
 80010dc:	4603      	mov	r3, r0
 80010de:	e000      	b.n	80010e2 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3740      	adds	r7, #64	; 0x40
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	24000008 	.word	0x24000008
 80010f0:	58024400 	.word	0x58024400
 80010f4:	431bde83 	.word	0x431bde83
 80010f8:	24000b28 	.word	0x24000b28
 80010fc:	40001000 	.word	0x40001000

08001100 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001104:	e7fe      	b.n	8001104 <NMI_Handler+0x4>

08001106 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800110a:	e7fe      	b.n	800110a <HardFault_Handler+0x4>

0800110c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001110:	e7fe      	b.n	8001110 <MemManage_Handler+0x4>

08001112 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001116:	e7fe      	b.n	8001116 <BusFault_Handler+0x4>

08001118 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800111c:	e7fe      	b.n	800111c <UsageFault_Handler+0x4>

0800111e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001130:	4802      	ldr	r0, [pc, #8]	; (800113c <TIM6_DAC_IRQHandler+0x10>)
 8001132:	f003 fbc5 	bl	80048c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	24000b28 	.word	0x24000b28

08001140 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001144:	4b32      	ldr	r3, [pc, #200]	; (8001210 <SystemInit+0xd0>)
 8001146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800114a:	4a31      	ldr	r2, [pc, #196]	; (8001210 <SystemInit+0xd0>)
 800114c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001150:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001154:	4b2f      	ldr	r3, [pc, #188]	; (8001214 <SystemInit+0xd4>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 030f 	and.w	r3, r3, #15
 800115c:	2b06      	cmp	r3, #6
 800115e:	d807      	bhi.n	8001170 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001160:	4b2c      	ldr	r3, [pc, #176]	; (8001214 <SystemInit+0xd4>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f023 030f 	bic.w	r3, r3, #15
 8001168:	4a2a      	ldr	r2, [pc, #168]	; (8001214 <SystemInit+0xd4>)
 800116a:	f043 0307 	orr.w	r3, r3, #7
 800116e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001170:	4b29      	ldr	r3, [pc, #164]	; (8001218 <SystemInit+0xd8>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a28      	ldr	r2, [pc, #160]	; (8001218 <SystemInit+0xd8>)
 8001176:	f043 0301 	orr.w	r3, r3, #1
 800117a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800117c:	4b26      	ldr	r3, [pc, #152]	; (8001218 <SystemInit+0xd8>)
 800117e:	2200      	movs	r2, #0
 8001180:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001182:	4b25      	ldr	r3, [pc, #148]	; (8001218 <SystemInit+0xd8>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	4924      	ldr	r1, [pc, #144]	; (8001218 <SystemInit+0xd8>)
 8001188:	4b24      	ldr	r3, [pc, #144]	; (800121c <SystemInit+0xdc>)
 800118a:	4013      	ands	r3, r2
 800118c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800118e:	4b21      	ldr	r3, [pc, #132]	; (8001214 <SystemInit+0xd4>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0308 	and.w	r3, r3, #8
 8001196:	2b00      	cmp	r3, #0
 8001198:	d007      	beq.n	80011aa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800119a:	4b1e      	ldr	r3, [pc, #120]	; (8001214 <SystemInit+0xd4>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f023 030f 	bic.w	r3, r3, #15
 80011a2:	4a1c      	ldr	r2, [pc, #112]	; (8001214 <SystemInit+0xd4>)
 80011a4:	f043 0307 	orr.w	r3, r3, #7
 80011a8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80011aa:	4b1b      	ldr	r3, [pc, #108]	; (8001218 <SystemInit+0xd8>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80011b0:	4b19      	ldr	r3, [pc, #100]	; (8001218 <SystemInit+0xd8>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80011b6:	4b18      	ldr	r3, [pc, #96]	; (8001218 <SystemInit+0xd8>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80011bc:	4b16      	ldr	r3, [pc, #88]	; (8001218 <SystemInit+0xd8>)
 80011be:	4a18      	ldr	r2, [pc, #96]	; (8001220 <SystemInit+0xe0>)
 80011c0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80011c2:	4b15      	ldr	r3, [pc, #84]	; (8001218 <SystemInit+0xd8>)
 80011c4:	4a17      	ldr	r2, [pc, #92]	; (8001224 <SystemInit+0xe4>)
 80011c6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80011c8:	4b13      	ldr	r3, [pc, #76]	; (8001218 <SystemInit+0xd8>)
 80011ca:	4a17      	ldr	r2, [pc, #92]	; (8001228 <SystemInit+0xe8>)
 80011cc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80011ce:	4b12      	ldr	r3, [pc, #72]	; (8001218 <SystemInit+0xd8>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80011d4:	4b10      	ldr	r3, [pc, #64]	; (8001218 <SystemInit+0xd8>)
 80011d6:	4a14      	ldr	r2, [pc, #80]	; (8001228 <SystemInit+0xe8>)
 80011d8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80011da:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <SystemInit+0xd8>)
 80011dc:	2200      	movs	r2, #0
 80011de:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80011e0:	4b0d      	ldr	r3, [pc, #52]	; (8001218 <SystemInit+0xd8>)
 80011e2:	4a11      	ldr	r2, [pc, #68]	; (8001228 <SystemInit+0xe8>)
 80011e4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80011e6:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <SystemInit+0xd8>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011ec:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <SystemInit+0xd8>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a09      	ldr	r2, [pc, #36]	; (8001218 <SystemInit+0xd8>)
 80011f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011f6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011f8:	4b07      	ldr	r3, [pc, #28]	; (8001218 <SystemInit+0xd8>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80011fe:	4b0b      	ldr	r3, [pc, #44]	; (800122c <SystemInit+0xec>)
 8001200:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001204:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001206:	bf00      	nop
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000ed00 	.word	0xe000ed00
 8001214:	52002000 	.word	0x52002000
 8001218:	58024400 	.word	0x58024400
 800121c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001220:	02020200 	.word	0x02020200
 8001224:	01ff0000 	.word	0x01ff0000
 8001228:	01010280 	.word	0x01010280
 800122c:	52004000 	.word	0x52004000

08001230 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001230:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001268 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001234:	f7ff ff84 	bl	8001140 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001238:	480c      	ldr	r0, [pc, #48]	; (800126c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800123a:	490d      	ldr	r1, [pc, #52]	; (8001270 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800123c:	4a0d      	ldr	r2, [pc, #52]	; (8001274 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800123e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001240:	e002      	b.n	8001248 <LoopCopyDataInit>

08001242 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001242:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001244:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001246:	3304      	adds	r3, #4

08001248 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001248:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800124a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800124c:	d3f9      	bcc.n	8001242 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800124e:	4a0a      	ldr	r2, [pc, #40]	; (8001278 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001250:	4c0a      	ldr	r4, [pc, #40]	; (800127c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001252:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001254:	e001      	b.n	800125a <LoopFillZerobss>

08001256 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001256:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001258:	3204      	adds	r2, #4

0800125a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800125a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800125c:	d3fb      	bcc.n	8001256 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800125e:	f006 f84b 	bl	80072f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001262:	f7ff fb53 	bl	800090c <main>
  bx  lr
 8001266:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001268:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800126c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001270:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8001274:	080073e4 	.word	0x080073e4
  ldr r2, =_sbss
 8001278:	240000d4 	.word	0x240000d4
  ldr r4, =_ebss
 800127c:	240011b8 	.word	0x240011b8

08001280 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001280:	e7fe      	b.n	8001280 <ADC3_IRQHandler>
	...

08001284 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800128a:	2003      	movs	r0, #3
 800128c:	f000 f93b 	bl	8001506 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001290:	f001 fcfa 	bl	8002c88 <HAL_RCC_GetSysClockFreq>
 8001294:	4602      	mov	r2, r0
 8001296:	4b15      	ldr	r3, [pc, #84]	; (80012ec <HAL_Init+0x68>)
 8001298:	699b      	ldr	r3, [r3, #24]
 800129a:	0a1b      	lsrs	r3, r3, #8
 800129c:	f003 030f 	and.w	r3, r3, #15
 80012a0:	4913      	ldr	r1, [pc, #76]	; (80012f0 <HAL_Init+0x6c>)
 80012a2:	5ccb      	ldrb	r3, [r1, r3]
 80012a4:	f003 031f 	and.w	r3, r3, #31
 80012a8:	fa22 f303 	lsr.w	r3, r2, r3
 80012ac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012ae:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <HAL_Init+0x68>)
 80012b0:	699b      	ldr	r3, [r3, #24]
 80012b2:	f003 030f 	and.w	r3, r3, #15
 80012b6:	4a0e      	ldr	r2, [pc, #56]	; (80012f0 <HAL_Init+0x6c>)
 80012b8:	5cd3      	ldrb	r3, [r2, r3]
 80012ba:	f003 031f 	and.w	r3, r3, #31
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	fa22 f303 	lsr.w	r3, r2, r3
 80012c4:	4a0b      	ldr	r2, [pc, #44]	; (80012f4 <HAL_Init+0x70>)
 80012c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80012c8:	4a0b      	ldr	r2, [pc, #44]	; (80012f8 <HAL_Init+0x74>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012ce:	200f      	movs	r0, #15
 80012d0:	f7ff feaa 	bl	8001028 <HAL_InitTick>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e002      	b.n	80012e4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80012de:	f7ff fd55 	bl	8000d8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012e2:	2300      	movs	r3, #0
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	58024400 	.word	0x58024400
 80012f0:	0800739c 	.word	0x0800739c
 80012f4:	24000004 	.word	0x24000004
 80012f8:	24000000 	.word	0x24000000

080012fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <HAL_IncTick+0x20>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	461a      	mov	r2, r3
 8001306:	4b06      	ldr	r3, [pc, #24]	; (8001320 <HAL_IncTick+0x24>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4413      	add	r3, r2
 800130c:	4a04      	ldr	r2, [pc, #16]	; (8001320 <HAL_IncTick+0x24>)
 800130e:	6013      	str	r3, [r2, #0]
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	2400000c 	.word	0x2400000c
 8001320:	24000b74 	.word	0x24000b74

08001324 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return uwTick;
 8001328:	4b03      	ldr	r3, [pc, #12]	; (8001338 <HAL_GetTick+0x14>)
 800132a:	681b      	ldr	r3, [r3, #0]
}
 800132c:	4618      	mov	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	24000b74 	.word	0x24000b74

0800133c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001344:	f7ff ffee 	bl	8001324 <HAL_GetTick>
 8001348:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001354:	d005      	beq.n	8001362 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001356:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <HAL_Delay+0x44>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	461a      	mov	r2, r3
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	4413      	add	r3, r2
 8001360:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001362:	bf00      	nop
 8001364:	f7ff ffde 	bl	8001324 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	68fa      	ldr	r2, [r7, #12]
 8001370:	429a      	cmp	r2, r3
 8001372:	d8f7      	bhi.n	8001364 <HAL_Delay+0x28>
  {
  }
}
 8001374:	bf00      	nop
 8001376:	bf00      	nop
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	2400000c 	.word	0x2400000c

08001384 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800138c:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001394:	4904      	ldr	r1, [pc, #16]	; (80013a8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4313      	orrs	r3, r2
 800139a:	604b      	str	r3, [r1, #4]
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	58000400 	.word	0x58000400

080013ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013bc:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <__NVIC_SetPriorityGrouping+0x40>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013c2:	68ba      	ldr	r2, [r7, #8]
 80013c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013c8:	4013      	ands	r3, r2
 80013ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013d4:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <__NVIC_SetPriorityGrouping+0x44>)
 80013d6:	4313      	orrs	r3, r2
 80013d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013da:	4a04      	ldr	r2, [pc, #16]	; (80013ec <__NVIC_SetPriorityGrouping+0x40>)
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	60d3      	str	r3, [r2, #12]
}
 80013e0:	bf00      	nop
 80013e2:	3714      	adds	r7, #20
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	e000ed00 	.word	0xe000ed00
 80013f0:	05fa0000 	.word	0x05fa0000

080013f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013f8:	4b04      	ldr	r3, [pc, #16]	; (800140c <__NVIC_GetPriorityGrouping+0x18>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	0a1b      	lsrs	r3, r3, #8
 80013fe:	f003 0307 	and.w	r3, r3, #7
}
 8001402:	4618      	mov	r0, r3
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800141a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800141e:	2b00      	cmp	r3, #0
 8001420:	db0b      	blt.n	800143a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001422:	88fb      	ldrh	r3, [r7, #6]
 8001424:	f003 021f 	and.w	r2, r3, #31
 8001428:	4907      	ldr	r1, [pc, #28]	; (8001448 <__NVIC_EnableIRQ+0x38>)
 800142a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800142e:	095b      	lsrs	r3, r3, #5
 8001430:	2001      	movs	r0, #1
 8001432:	fa00 f202 	lsl.w	r2, r0, r2
 8001436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	e000e100 	.word	0xe000e100

0800144c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	6039      	str	r1, [r7, #0]
 8001456:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001458:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800145c:	2b00      	cmp	r3, #0
 800145e:	db0a      	blt.n	8001476 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	b2da      	uxtb	r2, r3
 8001464:	490c      	ldr	r1, [pc, #48]	; (8001498 <__NVIC_SetPriority+0x4c>)
 8001466:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800146a:	0112      	lsls	r2, r2, #4
 800146c:	b2d2      	uxtb	r2, r2
 800146e:	440b      	add	r3, r1
 8001470:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001474:	e00a      	b.n	800148c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	b2da      	uxtb	r2, r3
 800147a:	4908      	ldr	r1, [pc, #32]	; (800149c <__NVIC_SetPriority+0x50>)
 800147c:	88fb      	ldrh	r3, [r7, #6]
 800147e:	f003 030f 	and.w	r3, r3, #15
 8001482:	3b04      	subs	r3, #4
 8001484:	0112      	lsls	r2, r2, #4
 8001486:	b2d2      	uxtb	r2, r2
 8001488:	440b      	add	r3, r1
 800148a:	761a      	strb	r2, [r3, #24]
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	e000e100 	.word	0xe000e100
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b089      	sub	sp, #36	; 0x24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	f1c3 0307 	rsb	r3, r3, #7
 80014ba:	2b04      	cmp	r3, #4
 80014bc:	bf28      	it	cs
 80014be:	2304      	movcs	r3, #4
 80014c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	3304      	adds	r3, #4
 80014c6:	2b06      	cmp	r3, #6
 80014c8:	d902      	bls.n	80014d0 <NVIC_EncodePriority+0x30>
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	3b03      	subs	r3, #3
 80014ce:	e000      	b.n	80014d2 <NVIC_EncodePriority+0x32>
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d4:	f04f 32ff 	mov.w	r2, #4294967295
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	43da      	mvns	r2, r3
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	401a      	ands	r2, r3
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014e8:	f04f 31ff 	mov.w	r1, #4294967295
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	fa01 f303 	lsl.w	r3, r1, r3
 80014f2:	43d9      	mvns	r1, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f8:	4313      	orrs	r3, r2
         );
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3724      	adds	r7, #36	; 0x24
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff ff4c 	bl	80013ac <__NVIC_SetPriorityGrouping>
}
 8001514:	bf00      	nop
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
 8001528:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800152a:	f7ff ff63 	bl	80013f4 <__NVIC_GetPriorityGrouping>
 800152e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	68b9      	ldr	r1, [r7, #8]
 8001534:	6978      	ldr	r0, [r7, #20]
 8001536:	f7ff ffb3 	bl	80014a0 <NVIC_EncodePriority>
 800153a:	4602      	mov	r2, r0
 800153c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001540:	4611      	mov	r1, r2
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff ff82 	bl	800144c <__NVIC_SetPriority>
}
 8001548:	bf00      	nop
 800154a:	3718      	adds	r7, #24
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800155a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff ff56 	bl	8001410 <__NVIC_EnableIRQ>
}
 8001564:	bf00      	nop
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d101      	bne.n	800157e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e0c6      	b.n	800170c <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001582:	2b00      	cmp	r3, #0
 8001584:	d102      	bne.n	800158c <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f7ff fc1a 	bl	8000dc0 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2223      	movs	r2, #35	; 0x23
 8001590:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001592:	4b60      	ldr	r3, [pc, #384]	; (8001714 <HAL_ETH_Init+0x1a8>)
 8001594:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001598:	4a5e      	ldr	r2, [pc, #376]	; (8001714 <HAL_ETH_Init+0x1a8>)
 800159a:	f043 0302 	orr.w	r3, r3, #2
 800159e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80015a2:	4b5c      	ldr	r3, [pc, #368]	; (8001714 <HAL_ETH_Init+0x1a8>)
 80015a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	7a1b      	ldrb	r3, [r3, #8]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d103      	bne.n	80015c0 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80015b8:	2000      	movs	r0, #0
 80015ba:	f7ff fee3 	bl	8001384 <HAL_SYSCFG_ETHInterfaceSelect>
 80015be:	e003      	b.n	80015c8 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80015c0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80015c4:	f7ff fede 	bl	8001384 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f042 0201 	orr.w	r2, r2, #1
 80015da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015e0:	f7ff fea0 	bl	8001324 <HAL_GetTick>
 80015e4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80015e6:	e00f      	b.n	8001608 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 80015e8:	f7ff fe9c 	bl	8001324 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80015f6:	d907      	bls.n	8001608 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2204      	movs	r2, #4
 80015fc:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	22e0      	movs	r2, #224	; 0xe0
 8001602:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e081      	b.n	800170c <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1e6      	bne.n	80015e8 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f000 fac0 	bl	8001ba0 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001620:	f001 fcac 	bl	8002f7c <HAL_RCC_GetHCLKFreq>
 8001624:	4603      	mov	r3, r0
 8001626:	4a3c      	ldr	r2, [pc, #240]	; (8001718 <HAL_ETH_Init+0x1ac>)
 8001628:	fba2 2303 	umull	r2, r3, r2, r3
 800162c:	0c9a      	lsrs	r2, r3, #18
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	3a01      	subs	r2, #1
 8001634:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f000 fa13 	bl	8001a64 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001654:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001658:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	f003 0303 	and.w	r3, r3, #3
 8001662:	2b00      	cmp	r3, #0
 8001664:	d007      	beq.n	8001676 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2201      	movs	r2, #1
 800166a:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	22e0      	movs	r2, #224	; 0xe0
 8001670:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e04a      	b.n	800170c <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	f241 1308 	movw	r3, #4360	; 0x1108
 800167e:	4413      	add	r3, r2
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	4b26      	ldr	r3, [pc, #152]	; (800171c <HAL_ETH_Init+0x1b0>)
 8001684:	4013      	ands	r3, r2
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	6952      	ldr	r2, [r2, #20]
 800168a:	0052      	lsls	r2, r2, #1
 800168c:	6879      	ldr	r1, [r7, #4]
 800168e:	6809      	ldr	r1, [r1, #0]
 8001690:	431a      	orrs	r2, r3
 8001692:	f241 1308 	movw	r3, #4360	; 0x1108
 8001696:	440b      	add	r3, r1
 8001698:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 fad8 	bl	8001c50 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f000 fb1c 	bl	8001cde <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	3305      	adds	r3, #5
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	021a      	lsls	r2, r3, #8
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	3304      	adds	r3, #4
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	4619      	mov	r1, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	430a      	orrs	r2, r1
 80016c0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	3303      	adds	r3, #3
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	061a      	lsls	r2, r3, #24
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	3302      	adds	r3, #2
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	041b      	lsls	r3, r3, #16
 80016d8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	3301      	adds	r3, #1
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80016e4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80016f2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80016f4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2210      	movs	r2, #16
 8001702:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2210      	movs	r2, #16
 8001708:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800170a:	2300      	movs	r3, #0
}
 800170c:	4618      	mov	r0, r3
 800170e:	3710      	adds	r7, #16
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	58024400 	.word	0x58024400
 8001718:	431bde83 	.word	0x431bde83
 800171c:	ffff8001 	.word	0xffff8001

08001720 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8001732:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	791b      	ldrb	r3, [r3, #4]
 8001738:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 800173a:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	7b1b      	ldrb	r3, [r3, #12]
 8001740:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001742:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	7b5b      	ldrb	r3, [r3, #13]
 8001748:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800174a:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	7b9b      	ldrb	r3, [r3, #14]
 8001750:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001752:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	7bdb      	ldrb	r3, [r3, #15]
 8001758:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800175a:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	7c12      	ldrb	r2, [r2, #16]
 8001760:	2a00      	cmp	r2, #0
 8001762:	d102      	bne.n	800176a <ETH_SetMACConfig+0x4a>
 8001764:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001768:	e000      	b.n	800176c <ETH_SetMACConfig+0x4c>
 800176a:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800176c:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	7c52      	ldrb	r2, [r2, #17]
 8001772:	2a00      	cmp	r2, #0
 8001774:	d102      	bne.n	800177c <ETH_SetMACConfig+0x5c>
 8001776:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800177a:	e000      	b.n	800177e <ETH_SetMACConfig+0x5e>
 800177c:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800177e:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	7c9b      	ldrb	r3, [r3, #18]
 8001784:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001786:	431a      	orrs	r2, r3
                                macconf->Speed |
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 800178c:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8001792:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	7f1b      	ldrb	r3, [r3, #28]
 8001798:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 800179a:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	7f5b      	ldrb	r3, [r3, #29]
 80017a0:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80017a2:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	7f92      	ldrb	r2, [r2, #30]
 80017a8:	2a00      	cmp	r2, #0
 80017aa:	d102      	bne.n	80017b2 <ETH_SetMACConfig+0x92>
 80017ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017b0:	e000      	b.n	80017b4 <ETH_SetMACConfig+0x94>
 80017b2:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80017b4:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	7fdb      	ldrb	r3, [r3, #31]
 80017ba:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80017bc:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80017be:	683a      	ldr	r2, [r7, #0]
 80017c0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80017c4:	2a00      	cmp	r2, #0
 80017c6:	d102      	bne.n	80017ce <ETH_SetMACConfig+0xae>
 80017c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017cc:	e000      	b.n	80017d0 <ETH_SetMACConfig+0xb0>
 80017ce:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80017d0:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80017d6:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80017de:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80017e0:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80017e6:	4313      	orrs	r3, r2
 80017e8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	4b56      	ldr	r3, [pc, #344]	; (800194c <ETH_SetMACConfig+0x22c>)
 80017f2:	4013      	ands	r3, r2
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	6812      	ldr	r2, [r2, #0]
 80017f8:	68f9      	ldr	r1, [r7, #12]
 80017fa:	430b      	orrs	r3, r1
 80017fc:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001802:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800180a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800180c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001814:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001816:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800181e:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001820:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8001822:	683a      	ldr	r2, [r7, #0]
 8001824:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001828:	2a00      	cmp	r2, #0
 800182a:	d102      	bne.n	8001832 <ETH_SetMACConfig+0x112>
 800182c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001830:	e000      	b.n	8001834 <ETH_SetMACConfig+0x114>
 8001832:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001834:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800183a:	4313      	orrs	r3, r2
 800183c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	685a      	ldr	r2, [r3, #4]
 8001844:	4b42      	ldr	r3, [pc, #264]	; (8001950 <ETH_SetMACConfig+0x230>)
 8001846:	4013      	ands	r3, r2
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	6812      	ldr	r2, [r2, #0]
 800184c:	68f9      	ldr	r1, [r7, #12]
 800184e:	430b      	orrs	r3, r1
 8001850:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001858:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800185e:	4313      	orrs	r3, r2
 8001860:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	68da      	ldr	r2, [r3, #12]
 8001868:	4b3a      	ldr	r3, [pc, #232]	; (8001954 <ETH_SetMACConfig+0x234>)
 800186a:	4013      	ands	r3, r2
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	6812      	ldr	r2, [r2, #0]
 8001870:	68f9      	ldr	r1, [r7, #12]
 8001872:	430b      	orrs	r3, r1
 8001874:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800187c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001882:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800188a:	2a00      	cmp	r2, #0
 800188c:	d101      	bne.n	8001892 <ETH_SetMACConfig+0x172>
 800188e:	2280      	movs	r2, #128	; 0x80
 8001890:	e000      	b.n	8001894 <ETH_SetMACConfig+0x174>
 8001892:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001894:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800189a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800189c:	4313      	orrs	r3, r2
 800189e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80018a6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80018aa:	4013      	ands	r3, r2
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	6812      	ldr	r2, [r2, #0]
 80018b0:	68f9      	ldr	r1, [r7, #12]
 80018b2:	430b      	orrs	r3, r1
 80018b4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80018bc:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80018c4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80018c6:	4313      	orrs	r3, r2
 80018c8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018d2:	f023 0103 	bic.w	r1, r3, #3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	430a      	orrs	r2, r1
 80018de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80018ea:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	430a      	orrs	r2, r1
 80018f8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001906:	2a00      	cmp	r2, #0
 8001908:	d101      	bne.n	800190e <ETH_SetMACConfig+0x1ee>
 800190a:	2240      	movs	r2, #64	; 0x40
 800190c:	e000      	b.n	8001910 <ETH_SetMACConfig+0x1f0>
 800190e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001910:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001918:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800191a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001922:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001924:	4313      	orrs	r3, r2
 8001926:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001930:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	68fa      	ldr	r2, [r7, #12]
 800193a:	430a      	orrs	r2, r1
 800193c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001940:	bf00      	nop
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	00048083 	.word	0x00048083
 8001950:	c0f88000 	.word	0xc0f88000
 8001954:	fffffef0 	.word	0xfffffef0

08001958 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	4b38      	ldr	r3, [pc, #224]	; (8001a50 <ETH_SetDMAConfig+0xf8>)
 800196e:	4013      	ands	r3, r2
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	6812      	ldr	r2, [r2, #0]
 8001974:	6879      	ldr	r1, [r7, #4]
 8001976:	6809      	ldr	r1, [r1, #0]
 8001978:	431a      	orrs	r2, r3
 800197a:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800197e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	791b      	ldrb	r3, [r3, #4]
 8001984:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800198a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	7b1b      	ldrb	r3, [r3, #12]
 8001990:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001992:	4313      	orrs	r3, r2
 8001994:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	f241 0304 	movw	r3, #4100	; 0x1004
 800199e:	4413      	add	r3, r2
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	4b2c      	ldr	r3, [pc, #176]	; (8001a54 <ETH_SetDMAConfig+0xfc>)
 80019a4:	4013      	ands	r3, r2
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	6811      	ldr	r1, [r2, #0]
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	431a      	orrs	r2, r3
 80019ae:	f241 0304 	movw	r3, #4100	; 0x1004
 80019b2:	440b      	add	r3, r1
 80019b4:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	7b5b      	ldrb	r3, [r3, #13]
 80019ba:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80019c0:	4313      	orrs	r3, r2
 80019c2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	4b22      	ldr	r3, [pc, #136]	; (8001a58 <ETH_SetDMAConfig+0x100>)
 80019d0:	4013      	ands	r3, r2
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	6811      	ldr	r1, [r2, #0]
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	431a      	orrs	r2, r3
 80019da:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 80019de:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	7d1b      	ldrb	r3, [r3, #20]
 80019e8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80019ea:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	7f5b      	ldrb	r3, [r3, #29]
 80019f0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80019f2:	4313      	orrs	r3, r2
 80019f4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	f241 1304 	movw	r3, #4356	; 0x1104
 80019fe:	4413      	add	r3, r2
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	4b16      	ldr	r3, [pc, #88]	; (8001a5c <ETH_SetDMAConfig+0x104>)
 8001a04:	4013      	ands	r3, r2
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	6811      	ldr	r1, [r2, #0]
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	431a      	orrs	r2, r3
 8001a0e:	f241 1304 	movw	r3, #4356	; 0x1104
 8001a12:	440b      	add	r3, r1
 8001a14:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	7f1b      	ldrb	r3, [r3, #28]
 8001a1a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001a20:	4313      	orrs	r3, r2
 8001a22:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	f241 1308 	movw	r3, #4360	; 0x1108
 8001a2c:	4413      	add	r3, r2
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <ETH_SetDMAConfig+0x108>)
 8001a32:	4013      	ands	r3, r2
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	6811      	ldr	r1, [r2, #0]
 8001a38:	68fa      	ldr	r2, [r7, #12]
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	f241 1308 	movw	r3, #4360	; 0x1108
 8001a40:	440b      	add	r3, r1
 8001a42:	601a      	str	r2, [r3, #0]
}
 8001a44:	bf00      	nop
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	ffff87fd 	.word	0xffff87fd
 8001a54:	ffff2ffe 	.word	0xffff2ffe
 8001a58:	fffec000 	.word	0xfffec000
 8001a5c:	ffc0efef 	.word	0xffc0efef
 8001a60:	7fc0ffff 	.word	0x7fc0ffff

08001a64 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b0a4      	sub	sp, #144	; 0x90
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001a72:	2300      	movs	r3, #0
 8001a74:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001a76:	2300      	movs	r3, #0
 8001a78:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001a82:	2301      	movs	r3, #1
 8001a84:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001a94:	2300      	movs	r3, #0
 8001a96:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001aa0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aa4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001aac:	2300      	movs	r3, #0
 8001aae:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001abc:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001ac0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001acc:	2301      	movs	r3, #1
 8001ace:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001aea:	2300      	movs	r3, #0
 8001aec:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001af0:	2300      	movs	r3, #0
 8001af2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001af6:	2301      	movs	r3, #1
 8001af8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001afc:	2320      	movs	r3, #32
 8001afe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001b02:	2301      	movs	r3, #1
 8001b04:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001b0e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001b14:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b18:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001b20:	2302      	movs	r3, #2
 8001b22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001b26:	2300      	movs	r3, #0
 8001b28:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001b32:	2300      	movs	r3, #0
 8001b34:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001b42:	2301      	movs	r3, #1
 8001b44:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001b48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7ff fde6 	bl	8001720 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001b54:	2301      	movs	r3, #1
 8001b56:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001b60:	2300      	movs	r3, #0
 8001b62:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001b66:	2300      	movs	r3, #0
 8001b68:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001b6e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b72:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001b74:	2300      	movs	r3, #0
 8001b76:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001b78:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b7c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8001b84:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001b88:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001b8a:	f107 0308 	add.w	r3, r7, #8
 8001b8e:	4619      	mov	r1, r3
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff fee1 	bl	8001958 <ETH_SetDMAConfig>
}
 8001b96:	bf00      	nop
 8001b98:	3790      	adds	r7, #144	; 0x90
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
	...

08001ba0 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001bb0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001bb8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001bba:	f001 f9df 	bl	8002f7c <HAL_RCC_GetHCLKFreq>
 8001bbe:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	4a1e      	ldr	r2, [pc, #120]	; (8001c3c <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d908      	bls.n	8001bda <ETH_MAC_MDIO_ClkConfig+0x3a>
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	4a1d      	ldr	r2, [pc, #116]	; (8001c40 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d804      	bhi.n	8001bda <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	e027      	b.n	8001c2a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	4a18      	ldr	r2, [pc, #96]	; (8001c40 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d908      	bls.n	8001bf4 <ETH_MAC_MDIO_ClkConfig+0x54>
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	4a17      	ldr	r2, [pc, #92]	; (8001c44 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d204      	bcs.n	8001bf4 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	e01a      	b.n	8001c2a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	4a13      	ldr	r2, [pc, #76]	; (8001c44 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d303      	bcc.n	8001c04 <ETH_MAC_MDIO_ClkConfig+0x64>
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	4a12      	ldr	r2, [pc, #72]	; (8001c48 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d911      	bls.n	8001c28 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	4a10      	ldr	r2, [pc, #64]	; (8001c48 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d908      	bls.n	8001c1e <ETH_MAC_MDIO_ClkConfig+0x7e>
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	4a0f      	ldr	r2, [pc, #60]	; (8001c4c <ETH_MAC_MDIO_ClkConfig+0xac>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d804      	bhi.n	8001c1e <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	e005      	b.n	8001c2a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	e000      	b.n	8001c2a <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001c28:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001c34:	bf00      	nop
 8001c36:	3710      	adds	r7, #16
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	01312cff 	.word	0x01312cff
 8001c40:	02160ebf 	.word	0x02160ebf
 8001c44:	03938700 	.word	0x03938700
 8001c48:	05f5e0ff 	.word	0x05f5e0ff
 8001c4c:	08f0d17f 	.word	0x08f0d17f

08001c50 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	e01d      	b.n	8001c9a <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	68d9      	ldr	r1, [r3, #12]
 8001c62:	68fa      	ldr	r2, [r7, #12]
 8001c64:	4613      	mov	r3, r2
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	4413      	add	r3, r2
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	440b      	add	r3, r1
 8001c6e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	2200      	movs	r2, #0
 8001c86:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001c88:	68b9      	ldr	r1, [r7, #8]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	3206      	adds	r2, #6
 8001c90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	3301      	adds	r3, #1
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2b03      	cmp	r3, #3
 8001c9e:	d9de      	bls.n	8001c5e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	f241 132c 	movw	r3, #4396	; 0x112c
 8001cae:	4413      	add	r3, r2
 8001cb0:	2203      	movs	r2, #3
 8001cb2:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	68d9      	ldr	r1, [r3, #12]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	f241 1314 	movw	r3, #4372	; 0x1114
 8001cc0:	4413      	add	r3, r2
 8001cc2:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68da      	ldr	r2, [r3, #12]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8001cd0:	601a      	str	r2, [r3, #0]
}
 8001cd2:	bf00      	nop
 8001cd4:	3714      	adds	r7, #20
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b085      	sub	sp, #20
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	e024      	b.n	8001d36 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6919      	ldr	r1, [r3, #16]
 8001cf0:	68fa      	ldr	r2, [r7, #12]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	4413      	add	r3, r2
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	440b      	add	r3, r1
 8001cfc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	2200      	movs	r2, #0
 8001d08:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	2200      	movs	r2, #0
 8001d14:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001d22:	68ba      	ldr	r2, [r7, #8]
 8001d24:	6879      	ldr	r1, [r7, #4]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	3310      	adds	r3, #16
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	3301      	adds	r3, #1
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2b03      	cmp	r3, #3
 8001d3a:	d9d7      	bls.n	8001cec <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	f241 1330 	movw	r3, #4400	; 0x1130
 8001d62:	4413      	add	r3, r2
 8001d64:	2203      	movs	r2, #3
 8001d66:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6919      	ldr	r1, [r3, #16]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	f241 131c 	movw	r3, #4380	; 0x111c
 8001d74:	4413      	add	r3, r2
 8001d76:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	f241 1328 	movw	r3, #4392	; 0x1128
 8001d88:	4413      	add	r3, r2
 8001d8a:	6019      	str	r1, [r3, #0]
}
 8001d8c:	bf00      	nop
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b089      	sub	sp, #36	; 0x24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001da2:	2300      	movs	r3, #0
 8001da4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001da6:	4b86      	ldr	r3, [pc, #536]	; (8001fc0 <HAL_GPIO_Init+0x228>)
 8001da8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001daa:	e18c      	b.n	80020c6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	2101      	movs	r1, #1
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	fa01 f303 	lsl.w	r3, r1, r3
 8001db8:	4013      	ands	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f000 817e 	beq.w	80020c0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f003 0303 	and.w	r3, r3, #3
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d005      	beq.n	8001ddc <HAL_GPIO_Init+0x44>
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 0303 	and.w	r3, r3, #3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d130      	bne.n	8001e3e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	2203      	movs	r2, #3
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	43db      	mvns	r3, r3
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4013      	ands	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	68da      	ldr	r2, [r3, #12]
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e12:	2201      	movs	r2, #1
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	091b      	lsrs	r3, r3, #4
 8001e28:	f003 0201 	and.w	r2, r3, #1
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f003 0303 	and.w	r3, r3, #3
 8001e46:	2b03      	cmp	r3, #3
 8001e48:	d017      	beq.n	8001e7a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	2203      	movs	r2, #3
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	689a      	ldr	r2, [r3, #8]
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d123      	bne.n	8001ece <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	08da      	lsrs	r2, r3, #3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	3208      	adds	r2, #8
 8001e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	220f      	movs	r2, #15
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	691a      	ldr	r2, [r3, #16]
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	f003 0307 	and.w	r3, r3, #7
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	08da      	lsrs	r2, r3, #3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3208      	adds	r2, #8
 8001ec8:	69b9      	ldr	r1, [r7, #24]
 8001eca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	2203      	movs	r2, #3
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f003 0203 	and.w	r2, r3, #3
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f000 80d8 	beq.w	80020c0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f10:	4b2c      	ldr	r3, [pc, #176]	; (8001fc4 <HAL_GPIO_Init+0x22c>)
 8001f12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f16:	4a2b      	ldr	r2, [pc, #172]	; (8001fc4 <HAL_GPIO_Init+0x22c>)
 8001f18:	f043 0302 	orr.w	r3, r3, #2
 8001f1c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001f20:	4b28      	ldr	r3, [pc, #160]	; (8001fc4 <HAL_GPIO_Init+0x22c>)
 8001f22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f2e:	4a26      	ldr	r2, [pc, #152]	; (8001fc8 <HAL_GPIO_Init+0x230>)
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	089b      	lsrs	r3, r3, #2
 8001f34:	3302      	adds	r3, #2
 8001f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	f003 0303 	and.w	r3, r3, #3
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	220f      	movs	r2, #15
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a1d      	ldr	r2, [pc, #116]	; (8001fcc <HAL_GPIO_Init+0x234>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d04a      	beq.n	8001ff0 <HAL_GPIO_Init+0x258>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a1c      	ldr	r2, [pc, #112]	; (8001fd0 <HAL_GPIO_Init+0x238>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d02b      	beq.n	8001fba <HAL_GPIO_Init+0x222>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a1b      	ldr	r2, [pc, #108]	; (8001fd4 <HAL_GPIO_Init+0x23c>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d025      	beq.n	8001fb6 <HAL_GPIO_Init+0x21e>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a1a      	ldr	r2, [pc, #104]	; (8001fd8 <HAL_GPIO_Init+0x240>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d01f      	beq.n	8001fb2 <HAL_GPIO_Init+0x21a>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a19      	ldr	r2, [pc, #100]	; (8001fdc <HAL_GPIO_Init+0x244>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d019      	beq.n	8001fae <HAL_GPIO_Init+0x216>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a18      	ldr	r2, [pc, #96]	; (8001fe0 <HAL_GPIO_Init+0x248>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d013      	beq.n	8001faa <HAL_GPIO_Init+0x212>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a17      	ldr	r2, [pc, #92]	; (8001fe4 <HAL_GPIO_Init+0x24c>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d00d      	beq.n	8001fa6 <HAL_GPIO_Init+0x20e>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a16      	ldr	r2, [pc, #88]	; (8001fe8 <HAL_GPIO_Init+0x250>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d007      	beq.n	8001fa2 <HAL_GPIO_Init+0x20a>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a15      	ldr	r2, [pc, #84]	; (8001fec <HAL_GPIO_Init+0x254>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d101      	bne.n	8001f9e <HAL_GPIO_Init+0x206>
 8001f9a:	2309      	movs	r3, #9
 8001f9c:	e029      	b.n	8001ff2 <HAL_GPIO_Init+0x25a>
 8001f9e:	230a      	movs	r3, #10
 8001fa0:	e027      	b.n	8001ff2 <HAL_GPIO_Init+0x25a>
 8001fa2:	2307      	movs	r3, #7
 8001fa4:	e025      	b.n	8001ff2 <HAL_GPIO_Init+0x25a>
 8001fa6:	2306      	movs	r3, #6
 8001fa8:	e023      	b.n	8001ff2 <HAL_GPIO_Init+0x25a>
 8001faa:	2305      	movs	r3, #5
 8001fac:	e021      	b.n	8001ff2 <HAL_GPIO_Init+0x25a>
 8001fae:	2304      	movs	r3, #4
 8001fb0:	e01f      	b.n	8001ff2 <HAL_GPIO_Init+0x25a>
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e01d      	b.n	8001ff2 <HAL_GPIO_Init+0x25a>
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	e01b      	b.n	8001ff2 <HAL_GPIO_Init+0x25a>
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e019      	b.n	8001ff2 <HAL_GPIO_Init+0x25a>
 8001fbe:	bf00      	nop
 8001fc0:	58000080 	.word	0x58000080
 8001fc4:	58024400 	.word	0x58024400
 8001fc8:	58000400 	.word	0x58000400
 8001fcc:	58020000 	.word	0x58020000
 8001fd0:	58020400 	.word	0x58020400
 8001fd4:	58020800 	.word	0x58020800
 8001fd8:	58020c00 	.word	0x58020c00
 8001fdc:	58021000 	.word	0x58021000
 8001fe0:	58021400 	.word	0x58021400
 8001fe4:	58021800 	.word	0x58021800
 8001fe8:	58021c00 	.word	0x58021c00
 8001fec:	58022400 	.word	0x58022400
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	69fa      	ldr	r2, [r7, #28]
 8001ff4:	f002 0203 	and.w	r2, r2, #3
 8001ff8:	0092      	lsls	r2, r2, #2
 8001ffa:	4093      	lsls	r3, r2
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002002:	4938      	ldr	r1, [pc, #224]	; (80020e4 <HAL_GPIO_Init+0x34c>)
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	089b      	lsrs	r3, r3, #2
 8002008:	3302      	adds	r3, #2
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002010:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	43db      	mvns	r3, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4013      	ands	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	4313      	orrs	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002036:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800203e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	43db      	mvns	r3, r3
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	4013      	ands	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d003      	beq.n	8002064 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	4313      	orrs	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002064:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	43db      	mvns	r3, r3
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	4013      	ands	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d003      	beq.n	8002090 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	4313      	orrs	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	43db      	mvns	r3, r3
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	4013      	ands	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	3301      	adds	r3, #1
 80020c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	fa22 f303 	lsr.w	r3, r2, r3
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f47f ae6b 	bne.w	8001dac <HAL_GPIO_Init+0x14>
  }
}
 80020d6:	bf00      	nop
 80020d8:	bf00      	nop
 80020da:	3724      	adds	r7, #36	; 0x24
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	58000400 	.word	0x58000400

080020e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	460b      	mov	r3, r1
 80020f2:	807b      	strh	r3, [r7, #2]
 80020f4:	4613      	mov	r3, r2
 80020f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020f8:	787b      	ldrb	r3, [r7, #1]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d003      	beq.n	8002106 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020fe:	887a      	ldrh	r2, [r7, #2]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002104:	e003      	b.n	800210e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002106:	887b      	ldrh	r3, [r7, #2]
 8002108:	041a      	lsls	r2, r3, #16
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	619a      	str	r2, [r3, #24]
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr

0800211a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800211a:	b480      	push	{r7}
 800211c:	b085      	sub	sp, #20
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
 8002122:	460b      	mov	r3, r1
 8002124:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800212c:	887a      	ldrh	r2, [r7, #2]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	4013      	ands	r3, r2
 8002132:	041a      	lsls	r2, r3, #16
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	43d9      	mvns	r1, r3
 8002138:	887b      	ldrh	r3, [r7, #2]
 800213a:	400b      	ands	r3, r1
 800213c:	431a      	orrs	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	619a      	str	r2, [r3, #24]
}
 8002142:	bf00      	nop
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
	...

08002150 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002158:	4b19      	ldr	r3, [pc, #100]	; (80021c0 <HAL_PWREx_ConfigSupply+0x70>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b04      	cmp	r3, #4
 8002162:	d00a      	beq.n	800217a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002164:	4b16      	ldr	r3, [pc, #88]	; (80021c0 <HAL_PWREx_ConfigSupply+0x70>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	f003 0307 	and.w	r3, r3, #7
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	429a      	cmp	r2, r3
 8002170:	d001      	beq.n	8002176 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e01f      	b.n	80021b6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002176:	2300      	movs	r3, #0
 8002178:	e01d      	b.n	80021b6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800217a:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <HAL_PWREx_ConfigSupply+0x70>)
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	f023 0207 	bic.w	r2, r3, #7
 8002182:	490f      	ldr	r1, [pc, #60]	; (80021c0 <HAL_PWREx_ConfigSupply+0x70>)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4313      	orrs	r3, r2
 8002188:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800218a:	f7ff f8cb 	bl	8001324 <HAL_GetTick>
 800218e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002190:	e009      	b.n	80021a6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002192:	f7ff f8c7 	bl	8001324 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021a0:	d901      	bls.n	80021a6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e007      	b.n	80021b6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80021a6:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <HAL_PWREx_ConfigSupply+0x70>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021b2:	d1ee      	bne.n	8002192 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	58024800 	.word	0x58024800

080021c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b08c      	sub	sp, #48	; 0x30
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e397      	b.n	8002906 <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 8087 	beq.w	80022f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021e4:	4b9e      	ldr	r3, [pc, #632]	; (8002460 <HAL_RCC_OscConfig+0x29c>)
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80021ee:	4b9c      	ldr	r3, [pc, #624]	; (8002460 <HAL_RCC_OscConfig+0x29c>)
 80021f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80021f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021f6:	2b10      	cmp	r3, #16
 80021f8:	d007      	beq.n	800220a <HAL_RCC_OscConfig+0x46>
 80021fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021fc:	2b18      	cmp	r3, #24
 80021fe:	d110      	bne.n	8002222 <HAL_RCC_OscConfig+0x5e>
 8002200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002202:	f003 0303 	and.w	r3, r3, #3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d10b      	bne.n	8002222 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800220a:	4b95      	ldr	r3, [pc, #596]	; (8002460 <HAL_RCC_OscConfig+0x29c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d06c      	beq.n	80022f0 <HAL_RCC_OscConfig+0x12c>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d168      	bne.n	80022f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e371      	b.n	8002906 <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800222a:	d106      	bne.n	800223a <HAL_RCC_OscConfig+0x76>
 800222c:	4b8c      	ldr	r3, [pc, #560]	; (8002460 <HAL_RCC_OscConfig+0x29c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a8b      	ldr	r2, [pc, #556]	; (8002460 <HAL_RCC_OscConfig+0x29c>)
 8002232:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002236:	6013      	str	r3, [r2, #0]
 8002238:	e02e      	b.n	8002298 <HAL_RCC_OscConfig+0xd4>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d10c      	bne.n	800225c <HAL_RCC_OscConfig+0x98>
 8002242:	4b87      	ldr	r3, [pc, #540]	; (8002460 <HAL_RCC_OscConfig+0x29c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a86      	ldr	r2, [pc, #536]	; (8002460 <HAL_RCC_OscConfig+0x29c>)
 8002248:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800224c:	6013      	str	r3, [r2, #0]
 800224e:	4b84      	ldr	r3, [pc, #528]	; (8002460 <HAL_RCC_OscConfig+0x29c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a83      	ldr	r2, [pc, #524]	; (8002460 <HAL_RCC_OscConfig+0x29c>)
 8002254:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	e01d      	b.n	8002298 <HAL_RCC_OscConfig+0xd4>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002264:	d10c      	bne.n	8002280 <HAL_RCC_OscConfig+0xbc>
 8002266:	4b7e      	ldr	r3, [pc, #504]	; (8002460 <HAL_RCC_OscConfig+0x29c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a7d      	ldr	r2, [pc, #500]	; (8002460 <HAL_RCC_OscConfig+0x29c>)
 800226c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	4b7b      	ldr	r3, [pc, #492]	; (8002460 <HAL_RCC_OscConfig+0x29c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a7a      	ldr	r2, [pc, #488]	; (8002460 <HAL_RCC_OscConfig+0x29c>)
 8002278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800227c:	6013      	str	r3, [r2, #0]
 800227e:	e00b      	b.n	8002298 <HAL_RCC_OscConfig+0xd4>
 8002280:	4b77      	ldr	r3, [pc, #476]	; (8002460 <HAL_RCC_OscConfig+0x29c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a76      	ldr	r2, [pc, #472]	; (8002460 <HAL_RCC_OscConfig+0x29c>)
 8002286:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800228a:	6013      	str	r3, [r2, #0]
 800228c:	4b74      	ldr	r3, [pc, #464]	; (8002460 <HAL_RCC_OscConfig+0x29c>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a73      	ldr	r2, [pc, #460]	; (8002460 <HAL_RCC_OscConfig+0x29c>)
 8002292:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002296:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d013      	beq.n	80022c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a0:	f7ff f840 	bl	8001324 <HAL_GetTick>
 80022a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022a8:	f7ff f83c 	bl	8001324 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b64      	cmp	r3, #100	; 0x64
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e325      	b.n	8002906 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022ba:	4b69      	ldr	r3, [pc, #420]	; (8002460 <HAL_RCC_OscConfig+0x29c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d0f0      	beq.n	80022a8 <HAL_RCC_OscConfig+0xe4>
 80022c6:	e014      	b.n	80022f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c8:	f7ff f82c 	bl	8001324 <HAL_GetTick>
 80022cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022d0:	f7ff f828 	bl	8001324 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b64      	cmp	r3, #100	; 0x64
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e311      	b.n	8002906 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80022e2:	4b5f      	ldr	r3, [pc, #380]	; (8002460 <HAL_RCC_OscConfig+0x29c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f0      	bne.n	80022d0 <HAL_RCC_OscConfig+0x10c>
 80022ee:	e000      	b.n	80022f2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f000 808a 	beq.w	8002414 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002300:	4b57      	ldr	r3, [pc, #348]	; (8002460 <HAL_RCC_OscConfig+0x29c>)
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002308:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800230a:	4b55      	ldr	r3, [pc, #340]	; (8002460 <HAL_RCC_OscConfig+0x29c>)
 800230c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800230e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002310:	6a3b      	ldr	r3, [r7, #32]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d007      	beq.n	8002326 <HAL_RCC_OscConfig+0x162>
 8002316:	6a3b      	ldr	r3, [r7, #32]
 8002318:	2b18      	cmp	r3, #24
 800231a:	d137      	bne.n	800238c <HAL_RCC_OscConfig+0x1c8>
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	f003 0303 	and.w	r3, r3, #3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d132      	bne.n	800238c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002326:	4b4e      	ldr	r3, [pc, #312]	; (8002460 <HAL_RCC_OscConfig+0x29c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0304 	and.w	r3, r3, #4
 800232e:	2b00      	cmp	r3, #0
 8002330:	d005      	beq.n	800233e <HAL_RCC_OscConfig+0x17a>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e2e3      	b.n	8002906 <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800233e:	4b48      	ldr	r3, [pc, #288]	; (8002460 <HAL_RCC_OscConfig+0x29c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f023 0219 	bic.w	r2, r3, #25
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	4945      	ldr	r1, [pc, #276]	; (8002460 <HAL_RCC_OscConfig+0x29c>)
 800234c:	4313      	orrs	r3, r2
 800234e:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002350:	f7fe ffe8 	bl	8001324 <HAL_GetTick>
 8002354:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002358:	f7fe ffe4 	bl	8001324 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e2cd      	b.n	8002906 <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800236a:	4b3d      	ldr	r3, [pc, #244]	; (8002460 <HAL_RCC_OscConfig+0x29c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0304 	and.w	r3, r3, #4
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0f0      	beq.n	8002358 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002376:	4b3a      	ldr	r3, [pc, #232]	; (8002460 <HAL_RCC_OscConfig+0x29c>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	061b      	lsls	r3, r3, #24
 8002384:	4936      	ldr	r1, [pc, #216]	; (8002460 <HAL_RCC_OscConfig+0x29c>)
 8002386:	4313      	orrs	r3, r2
 8002388:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800238a:	e043      	b.n	8002414 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d026      	beq.n	80023e2 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002394:	4b32      	ldr	r3, [pc, #200]	; (8002460 <HAL_RCC_OscConfig+0x29c>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f023 0219 	bic.w	r2, r3, #25
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	492f      	ldr	r1, [pc, #188]	; (8002460 <HAL_RCC_OscConfig+0x29c>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a6:	f7fe ffbd 	bl	8001324 <HAL_GetTick>
 80023aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023ac:	e008      	b.n	80023c0 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023ae:	f7fe ffb9 	bl	8001324 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e2a2      	b.n	8002906 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023c0:	4b27      	ldr	r3, [pc, #156]	; (8002460 <HAL_RCC_OscConfig+0x29c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0304 	and.w	r3, r3, #4
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0f0      	beq.n	80023ae <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023cc:	4b24      	ldr	r3, [pc, #144]	; (8002460 <HAL_RCC_OscConfig+0x29c>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	061b      	lsls	r3, r3, #24
 80023da:	4921      	ldr	r1, [pc, #132]	; (8002460 <HAL_RCC_OscConfig+0x29c>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	604b      	str	r3, [r1, #4]
 80023e0:	e018      	b.n	8002414 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023e2:	4b1f      	ldr	r3, [pc, #124]	; (8002460 <HAL_RCC_OscConfig+0x29c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a1e      	ldr	r2, [pc, #120]	; (8002460 <HAL_RCC_OscConfig+0x29c>)
 80023e8:	f023 0301 	bic.w	r3, r3, #1
 80023ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ee:	f7fe ff99 	bl	8001324 <HAL_GetTick>
 80023f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80023f4:	e008      	b.n	8002408 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023f6:	f7fe ff95 	bl	8001324 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e27e      	b.n	8002906 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002408:	4b15      	ldr	r3, [pc, #84]	; (8002460 <HAL_RCC_OscConfig+0x29c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1f0      	bne.n	80023f6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0310 	and.w	r3, r3, #16
 800241c:	2b00      	cmp	r3, #0
 800241e:	d06d      	beq.n	80024fc <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002420:	4b0f      	ldr	r3, [pc, #60]	; (8002460 <HAL_RCC_OscConfig+0x29c>)
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002428:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800242a:	4b0d      	ldr	r3, [pc, #52]	; (8002460 <HAL_RCC_OscConfig+0x29c>)
 800242c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	2b08      	cmp	r3, #8
 8002434:	d007      	beq.n	8002446 <HAL_RCC_OscConfig+0x282>
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	2b18      	cmp	r3, #24
 800243a:	d11e      	bne.n	800247a <HAL_RCC_OscConfig+0x2b6>
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	f003 0303 	and.w	r3, r3, #3
 8002442:	2b01      	cmp	r3, #1
 8002444:	d119      	bne.n	800247a <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002446:	4b06      	ldr	r3, [pc, #24]	; (8002460 <HAL_RCC_OscConfig+0x29c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800244e:	2b00      	cmp	r3, #0
 8002450:	d008      	beq.n	8002464 <HAL_RCC_OscConfig+0x2a0>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	2b80      	cmp	r3, #128	; 0x80
 8002458:	d004      	beq.n	8002464 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e253      	b.n	8002906 <HAL_RCC_OscConfig+0x742>
 800245e:	bf00      	nop
 8002460:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002464:	4ba3      	ldr	r3, [pc, #652]	; (80026f4 <HAL_RCC_OscConfig+0x530>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a1b      	ldr	r3, [r3, #32]
 8002470:	061b      	lsls	r3, r3, #24
 8002472:	49a0      	ldr	r1, [pc, #640]	; (80026f4 <HAL_RCC_OscConfig+0x530>)
 8002474:	4313      	orrs	r3, r2
 8002476:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002478:	e040      	b.n	80024fc <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d023      	beq.n	80024ca <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002482:	4b9c      	ldr	r3, [pc, #624]	; (80026f4 <HAL_RCC_OscConfig+0x530>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a9b      	ldr	r2, [pc, #620]	; (80026f4 <HAL_RCC_OscConfig+0x530>)
 8002488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800248c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248e:	f7fe ff49 	bl	8001324 <HAL_GetTick>
 8002492:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002494:	e008      	b.n	80024a8 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002496:	f7fe ff45 	bl	8001324 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e22e      	b.n	8002906 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80024a8:	4b92      	ldr	r3, [pc, #584]	; (80026f4 <HAL_RCC_OscConfig+0x530>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0f0      	beq.n	8002496 <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80024b4:	4b8f      	ldr	r3, [pc, #572]	; (80026f4 <HAL_RCC_OscConfig+0x530>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	061b      	lsls	r3, r3, #24
 80024c2:	498c      	ldr	r1, [pc, #560]	; (80026f4 <HAL_RCC_OscConfig+0x530>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	60cb      	str	r3, [r1, #12]
 80024c8:	e018      	b.n	80024fc <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80024ca:	4b8a      	ldr	r3, [pc, #552]	; (80026f4 <HAL_RCC_OscConfig+0x530>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a89      	ldr	r2, [pc, #548]	; (80026f4 <HAL_RCC_OscConfig+0x530>)
 80024d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d6:	f7fe ff25 	bl	8001324 <HAL_GetTick>
 80024da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80024dc:	e008      	b.n	80024f0 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80024de:	f7fe ff21 	bl	8001324 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e20a      	b.n	8002906 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80024f0:	4b80      	ldr	r3, [pc, #512]	; (80026f4 <HAL_RCC_OscConfig+0x530>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1f0      	bne.n	80024de <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0308 	and.w	r3, r3, #8
 8002504:	2b00      	cmp	r3, #0
 8002506:	d036      	beq.n	8002576 <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d019      	beq.n	8002544 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002510:	4b78      	ldr	r3, [pc, #480]	; (80026f4 <HAL_RCC_OscConfig+0x530>)
 8002512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002514:	4a77      	ldr	r2, [pc, #476]	; (80026f4 <HAL_RCC_OscConfig+0x530>)
 8002516:	f043 0301 	orr.w	r3, r3, #1
 800251a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800251c:	f7fe ff02 	bl	8001324 <HAL_GetTick>
 8002520:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002524:	f7fe fefe 	bl	8001324 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e1e7      	b.n	8002906 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002536:	4b6f      	ldr	r3, [pc, #444]	; (80026f4 <HAL_RCC_OscConfig+0x530>)
 8002538:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0f0      	beq.n	8002524 <HAL_RCC_OscConfig+0x360>
 8002542:	e018      	b.n	8002576 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002544:	4b6b      	ldr	r3, [pc, #428]	; (80026f4 <HAL_RCC_OscConfig+0x530>)
 8002546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002548:	4a6a      	ldr	r2, [pc, #424]	; (80026f4 <HAL_RCC_OscConfig+0x530>)
 800254a:	f023 0301 	bic.w	r3, r3, #1
 800254e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002550:	f7fe fee8 	bl	8001324 <HAL_GetTick>
 8002554:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002558:	f7fe fee4 	bl	8001324 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e1cd      	b.n	8002906 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800256a:	4b62      	ldr	r3, [pc, #392]	; (80026f4 <HAL_RCC_OscConfig+0x530>)
 800256c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1f0      	bne.n	8002558 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0320 	and.w	r3, r3, #32
 800257e:	2b00      	cmp	r3, #0
 8002580:	d036      	beq.n	80025f0 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d019      	beq.n	80025be <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800258a:	4b5a      	ldr	r3, [pc, #360]	; (80026f4 <HAL_RCC_OscConfig+0x530>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a59      	ldr	r2, [pc, #356]	; (80026f4 <HAL_RCC_OscConfig+0x530>)
 8002590:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002594:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002596:	f7fe fec5 	bl	8001324 <HAL_GetTick>
 800259a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800259c:	e008      	b.n	80025b0 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800259e:	f7fe fec1 	bl	8001324 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e1aa      	b.n	8002906 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80025b0:	4b50      	ldr	r3, [pc, #320]	; (80026f4 <HAL_RCC_OscConfig+0x530>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0f0      	beq.n	800259e <HAL_RCC_OscConfig+0x3da>
 80025bc:	e018      	b.n	80025f0 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80025be:	4b4d      	ldr	r3, [pc, #308]	; (80026f4 <HAL_RCC_OscConfig+0x530>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a4c      	ldr	r2, [pc, #304]	; (80026f4 <HAL_RCC_OscConfig+0x530>)
 80025c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80025c8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80025ca:	f7fe feab 	bl	8001324 <HAL_GetTick>
 80025ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80025d0:	e008      	b.n	80025e4 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80025d2:	f7fe fea7 	bl	8001324 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e190      	b.n	8002906 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80025e4:	4b43      	ldr	r3, [pc, #268]	; (80026f4 <HAL_RCC_OscConfig+0x530>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1f0      	bne.n	80025d2 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f000 8085 	beq.w	8002708 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80025fe:	4b3e      	ldr	r3, [pc, #248]	; (80026f8 <HAL_RCC_OscConfig+0x534>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a3d      	ldr	r2, [pc, #244]	; (80026f8 <HAL_RCC_OscConfig+0x534>)
 8002604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002608:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800260a:	f7fe fe8b 	bl	8001324 <HAL_GetTick>
 800260e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002610:	e008      	b.n	8002624 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002612:	f7fe fe87 	bl	8001324 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b64      	cmp	r3, #100	; 0x64
 800261e:	d901      	bls.n	8002624 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e170      	b.n	8002906 <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002624:	4b34      	ldr	r3, [pc, #208]	; (80026f8 <HAL_RCC_OscConfig+0x534>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800262c:	2b00      	cmp	r3, #0
 800262e:	d0f0      	beq.n	8002612 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d106      	bne.n	8002646 <HAL_RCC_OscConfig+0x482>
 8002638:	4b2e      	ldr	r3, [pc, #184]	; (80026f4 <HAL_RCC_OscConfig+0x530>)
 800263a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263c:	4a2d      	ldr	r2, [pc, #180]	; (80026f4 <HAL_RCC_OscConfig+0x530>)
 800263e:	f043 0301 	orr.w	r3, r3, #1
 8002642:	6713      	str	r3, [r2, #112]	; 0x70
 8002644:	e02d      	b.n	80026a2 <HAL_RCC_OscConfig+0x4de>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d10c      	bne.n	8002668 <HAL_RCC_OscConfig+0x4a4>
 800264e:	4b29      	ldr	r3, [pc, #164]	; (80026f4 <HAL_RCC_OscConfig+0x530>)
 8002650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002652:	4a28      	ldr	r2, [pc, #160]	; (80026f4 <HAL_RCC_OscConfig+0x530>)
 8002654:	f023 0301 	bic.w	r3, r3, #1
 8002658:	6713      	str	r3, [r2, #112]	; 0x70
 800265a:	4b26      	ldr	r3, [pc, #152]	; (80026f4 <HAL_RCC_OscConfig+0x530>)
 800265c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265e:	4a25      	ldr	r2, [pc, #148]	; (80026f4 <HAL_RCC_OscConfig+0x530>)
 8002660:	f023 0304 	bic.w	r3, r3, #4
 8002664:	6713      	str	r3, [r2, #112]	; 0x70
 8002666:	e01c      	b.n	80026a2 <HAL_RCC_OscConfig+0x4de>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	2b05      	cmp	r3, #5
 800266e:	d10c      	bne.n	800268a <HAL_RCC_OscConfig+0x4c6>
 8002670:	4b20      	ldr	r3, [pc, #128]	; (80026f4 <HAL_RCC_OscConfig+0x530>)
 8002672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002674:	4a1f      	ldr	r2, [pc, #124]	; (80026f4 <HAL_RCC_OscConfig+0x530>)
 8002676:	f043 0304 	orr.w	r3, r3, #4
 800267a:	6713      	str	r3, [r2, #112]	; 0x70
 800267c:	4b1d      	ldr	r3, [pc, #116]	; (80026f4 <HAL_RCC_OscConfig+0x530>)
 800267e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002680:	4a1c      	ldr	r2, [pc, #112]	; (80026f4 <HAL_RCC_OscConfig+0x530>)
 8002682:	f043 0301 	orr.w	r3, r3, #1
 8002686:	6713      	str	r3, [r2, #112]	; 0x70
 8002688:	e00b      	b.n	80026a2 <HAL_RCC_OscConfig+0x4de>
 800268a:	4b1a      	ldr	r3, [pc, #104]	; (80026f4 <HAL_RCC_OscConfig+0x530>)
 800268c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268e:	4a19      	ldr	r2, [pc, #100]	; (80026f4 <HAL_RCC_OscConfig+0x530>)
 8002690:	f023 0301 	bic.w	r3, r3, #1
 8002694:	6713      	str	r3, [r2, #112]	; 0x70
 8002696:	4b17      	ldr	r3, [pc, #92]	; (80026f4 <HAL_RCC_OscConfig+0x530>)
 8002698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800269a:	4a16      	ldr	r2, [pc, #88]	; (80026f4 <HAL_RCC_OscConfig+0x530>)
 800269c:	f023 0304 	bic.w	r3, r3, #4
 80026a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d015      	beq.n	80026d6 <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026aa:	f7fe fe3b 	bl	8001324 <HAL_GetTick>
 80026ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026b0:	e00a      	b.n	80026c8 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026b2:	f7fe fe37 	bl	8001324 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e11e      	b.n	8002906 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026c8:	4b0a      	ldr	r3, [pc, #40]	; (80026f4 <HAL_RCC_OscConfig+0x530>)
 80026ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d0ee      	beq.n	80026b2 <HAL_RCC_OscConfig+0x4ee>
 80026d4:	e018      	b.n	8002708 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d6:	f7fe fe25 	bl	8001324 <HAL_GetTick>
 80026da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80026dc:	e00e      	b.n	80026fc <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026de:	f7fe fe21 	bl	8001324 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d905      	bls.n	80026fc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e108      	b.n	8002906 <HAL_RCC_OscConfig+0x742>
 80026f4:	58024400 	.word	0x58024400
 80026f8:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80026fc:	4b84      	ldr	r3, [pc, #528]	; (8002910 <HAL_RCC_OscConfig+0x74c>)
 80026fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1ea      	bne.n	80026de <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 80f9 	beq.w	8002904 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002712:	4b7f      	ldr	r3, [pc, #508]	; (8002910 <HAL_RCC_OscConfig+0x74c>)
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800271a:	2b18      	cmp	r3, #24
 800271c:	f000 80b4 	beq.w	8002888 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002724:	2b02      	cmp	r3, #2
 8002726:	f040 8095 	bne.w	8002854 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800272a:	4b79      	ldr	r3, [pc, #484]	; (8002910 <HAL_RCC_OscConfig+0x74c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a78      	ldr	r2, [pc, #480]	; (8002910 <HAL_RCC_OscConfig+0x74c>)
 8002730:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002734:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002736:	f7fe fdf5 	bl	8001324 <HAL_GetTick>
 800273a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800273c:	e008      	b.n	8002750 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800273e:	f7fe fdf1 	bl	8001324 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e0da      	b.n	8002906 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002750:	4b6f      	ldr	r3, [pc, #444]	; (8002910 <HAL_RCC_OscConfig+0x74c>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1f0      	bne.n	800273e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800275c:	4b6c      	ldr	r3, [pc, #432]	; (8002910 <HAL_RCC_OscConfig+0x74c>)
 800275e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002760:	4b6c      	ldr	r3, [pc, #432]	; (8002914 <HAL_RCC_OscConfig+0x750>)
 8002762:	4013      	ands	r3, r2
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800276c:	0112      	lsls	r2, r2, #4
 800276e:	430a      	orrs	r2, r1
 8002770:	4967      	ldr	r1, [pc, #412]	; (8002910 <HAL_RCC_OscConfig+0x74c>)
 8002772:	4313      	orrs	r3, r2
 8002774:	628b      	str	r3, [r1, #40]	; 0x28
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	3b01      	subs	r3, #1
 800277c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002784:	3b01      	subs	r3, #1
 8002786:	025b      	lsls	r3, r3, #9
 8002788:	b29b      	uxth	r3, r3
 800278a:	431a      	orrs	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002790:	3b01      	subs	r3, #1
 8002792:	041b      	lsls	r3, r3, #16
 8002794:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002798:	431a      	orrs	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800279e:	3b01      	subs	r3, #1
 80027a0:	061b      	lsls	r3, r3, #24
 80027a2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80027a6:	495a      	ldr	r1, [pc, #360]	; (8002910 <HAL_RCC_OscConfig+0x74c>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80027ac:	4b58      	ldr	r3, [pc, #352]	; (8002910 <HAL_RCC_OscConfig+0x74c>)
 80027ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b0:	4a57      	ldr	r2, [pc, #348]	; (8002910 <HAL_RCC_OscConfig+0x74c>)
 80027b2:	f023 0301 	bic.w	r3, r3, #1
 80027b6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80027b8:	4b55      	ldr	r3, [pc, #340]	; (8002910 <HAL_RCC_OscConfig+0x74c>)
 80027ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027bc:	4b56      	ldr	r3, [pc, #344]	; (8002918 <HAL_RCC_OscConfig+0x754>)
 80027be:	4013      	ands	r3, r2
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80027c4:	00d2      	lsls	r2, r2, #3
 80027c6:	4952      	ldr	r1, [pc, #328]	; (8002910 <HAL_RCC_OscConfig+0x74c>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80027cc:	4b50      	ldr	r3, [pc, #320]	; (8002910 <HAL_RCC_OscConfig+0x74c>)
 80027ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d0:	f023 020c 	bic.w	r2, r3, #12
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d8:	494d      	ldr	r1, [pc, #308]	; (8002910 <HAL_RCC_OscConfig+0x74c>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80027de:	4b4c      	ldr	r3, [pc, #304]	; (8002910 <HAL_RCC_OscConfig+0x74c>)
 80027e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e2:	f023 0202 	bic.w	r2, r3, #2
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ea:	4949      	ldr	r1, [pc, #292]	; (8002910 <HAL_RCC_OscConfig+0x74c>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80027f0:	4b47      	ldr	r3, [pc, #284]	; (8002910 <HAL_RCC_OscConfig+0x74c>)
 80027f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f4:	4a46      	ldr	r2, [pc, #280]	; (8002910 <HAL_RCC_OscConfig+0x74c>)
 80027f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027fc:	4b44      	ldr	r3, [pc, #272]	; (8002910 <HAL_RCC_OscConfig+0x74c>)
 80027fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002800:	4a43      	ldr	r2, [pc, #268]	; (8002910 <HAL_RCC_OscConfig+0x74c>)
 8002802:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002806:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002808:	4b41      	ldr	r3, [pc, #260]	; (8002910 <HAL_RCC_OscConfig+0x74c>)
 800280a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280c:	4a40      	ldr	r2, [pc, #256]	; (8002910 <HAL_RCC_OscConfig+0x74c>)
 800280e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002812:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002814:	4b3e      	ldr	r3, [pc, #248]	; (8002910 <HAL_RCC_OscConfig+0x74c>)
 8002816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002818:	4a3d      	ldr	r2, [pc, #244]	; (8002910 <HAL_RCC_OscConfig+0x74c>)
 800281a:	f043 0301 	orr.w	r3, r3, #1
 800281e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002820:	4b3b      	ldr	r3, [pc, #236]	; (8002910 <HAL_RCC_OscConfig+0x74c>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a3a      	ldr	r2, [pc, #232]	; (8002910 <HAL_RCC_OscConfig+0x74c>)
 8002826:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800282a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282c:	f7fe fd7a 	bl	8001324 <HAL_GetTick>
 8002830:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002834:	f7fe fd76 	bl	8001324 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e05f      	b.n	8002906 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002846:	4b32      	ldr	r3, [pc, #200]	; (8002910 <HAL_RCC_OscConfig+0x74c>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d0f0      	beq.n	8002834 <HAL_RCC_OscConfig+0x670>
 8002852:	e057      	b.n	8002904 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002854:	4b2e      	ldr	r3, [pc, #184]	; (8002910 <HAL_RCC_OscConfig+0x74c>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a2d      	ldr	r2, [pc, #180]	; (8002910 <HAL_RCC_OscConfig+0x74c>)
 800285a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800285e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002860:	f7fe fd60 	bl	8001324 <HAL_GetTick>
 8002864:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002868:	f7fe fd5c 	bl	8001324 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e045      	b.n	8002906 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800287a:	4b25      	ldr	r3, [pc, #148]	; (8002910 <HAL_RCC_OscConfig+0x74c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1f0      	bne.n	8002868 <HAL_RCC_OscConfig+0x6a4>
 8002886:	e03d      	b.n	8002904 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002888:	4b21      	ldr	r3, [pc, #132]	; (8002910 <HAL_RCC_OscConfig+0x74c>)
 800288a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800288e:	4b20      	ldr	r3, [pc, #128]	; (8002910 <HAL_RCC_OscConfig+0x74c>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002898:	2b01      	cmp	r3, #1
 800289a:	d031      	beq.n	8002900 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	f003 0203 	and.w	r2, r3, #3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d12a      	bne.n	8002900 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	091b      	lsrs	r3, r3, #4
 80028ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d122      	bne.n	8002900 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d11a      	bne.n	8002900 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	0a5b      	lsrs	r3, r3, #9
 80028ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80028d8:	429a      	cmp	r2, r3
 80028da:	d111      	bne.n	8002900 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	0c1b      	lsrs	r3, r3, #16
 80028e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d108      	bne.n	8002900 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	0e1b      	lsrs	r3, r3, #24
 80028f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028fa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d001      	beq.n	8002904 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e000      	b.n	8002906 <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3730      	adds	r7, #48	; 0x30
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	58024400 	.word	0x58024400
 8002914:	fffffc0c 	.word	0xfffffc0c
 8002918:	ffff0007 	.word	0xffff0007

0800291c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d101      	bne.n	8002930 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e19c      	b.n	8002c6a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002930:	4b8a      	ldr	r3, [pc, #552]	; (8002b5c <HAL_RCC_ClockConfig+0x240>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 030f 	and.w	r3, r3, #15
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	429a      	cmp	r2, r3
 800293c:	d910      	bls.n	8002960 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800293e:	4b87      	ldr	r3, [pc, #540]	; (8002b5c <HAL_RCC_ClockConfig+0x240>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f023 020f 	bic.w	r2, r3, #15
 8002946:	4985      	ldr	r1, [pc, #532]	; (8002b5c <HAL_RCC_ClockConfig+0x240>)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	4313      	orrs	r3, r2
 800294c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800294e:	4b83      	ldr	r3, [pc, #524]	; (8002b5c <HAL_RCC_ClockConfig+0x240>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 030f 	and.w	r3, r3, #15
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	429a      	cmp	r2, r3
 800295a:	d001      	beq.n	8002960 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e184      	b.n	8002c6a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	2b00      	cmp	r3, #0
 800296a:	d010      	beq.n	800298e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	691a      	ldr	r2, [r3, #16]
 8002970:	4b7b      	ldr	r3, [pc, #492]	; (8002b60 <HAL_RCC_ClockConfig+0x244>)
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002978:	429a      	cmp	r2, r3
 800297a:	d908      	bls.n	800298e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800297c:	4b78      	ldr	r3, [pc, #480]	; (8002b60 <HAL_RCC_ClockConfig+0x244>)
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	4975      	ldr	r1, [pc, #468]	; (8002b60 <HAL_RCC_ClockConfig+0x244>)
 800298a:	4313      	orrs	r3, r2
 800298c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0308 	and.w	r3, r3, #8
 8002996:	2b00      	cmp	r3, #0
 8002998:	d010      	beq.n	80029bc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	695a      	ldr	r2, [r3, #20]
 800299e:	4b70      	ldr	r3, [pc, #448]	; (8002b60 <HAL_RCC_ClockConfig+0x244>)
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d908      	bls.n	80029bc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80029aa:	4b6d      	ldr	r3, [pc, #436]	; (8002b60 <HAL_RCC_ClockConfig+0x244>)
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	496a      	ldr	r1, [pc, #424]	; (8002b60 <HAL_RCC_ClockConfig+0x244>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0310 	and.w	r3, r3, #16
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d010      	beq.n	80029ea <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	699a      	ldr	r2, [r3, #24]
 80029cc:	4b64      	ldr	r3, [pc, #400]	; (8002b60 <HAL_RCC_ClockConfig+0x244>)
 80029ce:	69db      	ldr	r3, [r3, #28]
 80029d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d908      	bls.n	80029ea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80029d8:	4b61      	ldr	r3, [pc, #388]	; (8002b60 <HAL_RCC_ClockConfig+0x244>)
 80029da:	69db      	ldr	r3, [r3, #28]
 80029dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	495e      	ldr	r1, [pc, #376]	; (8002b60 <HAL_RCC_ClockConfig+0x244>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0320 	and.w	r3, r3, #32
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d010      	beq.n	8002a18 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69da      	ldr	r2, [r3, #28]
 80029fa:	4b59      	ldr	r3, [pc, #356]	; (8002b60 <HAL_RCC_ClockConfig+0x244>)
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d908      	bls.n	8002a18 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002a06:	4b56      	ldr	r3, [pc, #344]	; (8002b60 <HAL_RCC_ClockConfig+0x244>)
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	4953      	ldr	r1, [pc, #332]	; (8002b60 <HAL_RCC_ClockConfig+0x244>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d010      	beq.n	8002a46 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68da      	ldr	r2, [r3, #12]
 8002a28:	4b4d      	ldr	r3, [pc, #308]	; (8002b60 <HAL_RCC_ClockConfig+0x244>)
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	f003 030f 	and.w	r3, r3, #15
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d908      	bls.n	8002a46 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a34:	4b4a      	ldr	r3, [pc, #296]	; (8002b60 <HAL_RCC_ClockConfig+0x244>)
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	f023 020f 	bic.w	r2, r3, #15
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	4947      	ldr	r1, [pc, #284]	; (8002b60 <HAL_RCC_ClockConfig+0x244>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d055      	beq.n	8002afe <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002a52:	4b43      	ldr	r3, [pc, #268]	; (8002b60 <HAL_RCC_ClockConfig+0x244>)
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	4940      	ldr	r1, [pc, #256]	; (8002b60 <HAL_RCC_ClockConfig+0x244>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d107      	bne.n	8002a7c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a6c:	4b3c      	ldr	r3, [pc, #240]	; (8002b60 <HAL_RCC_ClockConfig+0x244>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d121      	bne.n	8002abc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e0f6      	b.n	8002c6a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	2b03      	cmp	r3, #3
 8002a82:	d107      	bne.n	8002a94 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a84:	4b36      	ldr	r3, [pc, #216]	; (8002b60 <HAL_RCC_ClockConfig+0x244>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d115      	bne.n	8002abc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e0ea      	b.n	8002c6a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d107      	bne.n	8002aac <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a9c:	4b30      	ldr	r3, [pc, #192]	; (8002b60 <HAL_RCC_ClockConfig+0x244>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d109      	bne.n	8002abc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e0de      	b.n	8002c6a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002aac:	4b2c      	ldr	r3, [pc, #176]	; (8002b60 <HAL_RCC_ClockConfig+0x244>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d101      	bne.n	8002abc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e0d6      	b.n	8002c6a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002abc:	4b28      	ldr	r3, [pc, #160]	; (8002b60 <HAL_RCC_ClockConfig+0x244>)
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	f023 0207 	bic.w	r2, r3, #7
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	4925      	ldr	r1, [pc, #148]	; (8002b60 <HAL_RCC_ClockConfig+0x244>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ace:	f7fe fc29 	bl	8001324 <HAL_GetTick>
 8002ad2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad4:	e00a      	b.n	8002aec <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ad6:	f7fe fc25 	bl	8001324 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d901      	bls.n	8002aec <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e0be      	b.n	8002c6a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aec:	4b1c      	ldr	r3, [pc, #112]	; (8002b60 <HAL_RCC_ClockConfig+0x244>)
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d1eb      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d010      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68da      	ldr	r2, [r3, #12]
 8002b0e:	4b14      	ldr	r3, [pc, #80]	; (8002b60 <HAL_RCC_ClockConfig+0x244>)
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	f003 030f 	and.w	r3, r3, #15
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d208      	bcs.n	8002b2c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b1a:	4b11      	ldr	r3, [pc, #68]	; (8002b60 <HAL_RCC_ClockConfig+0x244>)
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	f023 020f 	bic.w	r2, r3, #15
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	490e      	ldr	r1, [pc, #56]	; (8002b60 <HAL_RCC_ClockConfig+0x244>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b2c:	4b0b      	ldr	r3, [pc, #44]	; (8002b5c <HAL_RCC_ClockConfig+0x240>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 030f 	and.w	r3, r3, #15
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d214      	bcs.n	8002b64 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3a:	4b08      	ldr	r3, [pc, #32]	; (8002b5c <HAL_RCC_ClockConfig+0x240>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f023 020f 	bic.w	r2, r3, #15
 8002b42:	4906      	ldr	r1, [pc, #24]	; (8002b5c <HAL_RCC_ClockConfig+0x240>)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b4a:	4b04      	ldr	r3, [pc, #16]	; (8002b5c <HAL_RCC_ClockConfig+0x240>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d005      	beq.n	8002b64 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e086      	b.n	8002c6a <HAL_RCC_ClockConfig+0x34e>
 8002b5c:	52002000 	.word	0x52002000
 8002b60:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d010      	beq.n	8002b92 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	691a      	ldr	r2, [r3, #16]
 8002b74:	4b3f      	ldr	r3, [pc, #252]	; (8002c74 <HAL_RCC_ClockConfig+0x358>)
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d208      	bcs.n	8002b92 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002b80:	4b3c      	ldr	r3, [pc, #240]	; (8002c74 <HAL_RCC_ClockConfig+0x358>)
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	4939      	ldr	r1, [pc, #228]	; (8002c74 <HAL_RCC_ClockConfig+0x358>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0308 	and.w	r3, r3, #8
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d010      	beq.n	8002bc0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	695a      	ldr	r2, [r3, #20]
 8002ba2:	4b34      	ldr	r3, [pc, #208]	; (8002c74 <HAL_RCC_ClockConfig+0x358>)
 8002ba4:	69db      	ldr	r3, [r3, #28]
 8002ba6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d208      	bcs.n	8002bc0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002bae:	4b31      	ldr	r3, [pc, #196]	; (8002c74 <HAL_RCC_ClockConfig+0x358>)
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	492e      	ldr	r1, [pc, #184]	; (8002c74 <HAL_RCC_ClockConfig+0x358>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0310 	and.w	r3, r3, #16
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d010      	beq.n	8002bee <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	699a      	ldr	r2, [r3, #24]
 8002bd0:	4b28      	ldr	r3, [pc, #160]	; (8002c74 <HAL_RCC_ClockConfig+0x358>)
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d208      	bcs.n	8002bee <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002bdc:	4b25      	ldr	r3, [pc, #148]	; (8002c74 <HAL_RCC_ClockConfig+0x358>)
 8002bde:	69db      	ldr	r3, [r3, #28]
 8002be0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	4922      	ldr	r1, [pc, #136]	; (8002c74 <HAL_RCC_ClockConfig+0x358>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0320 	and.w	r3, r3, #32
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d010      	beq.n	8002c1c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	69da      	ldr	r2, [r3, #28]
 8002bfe:	4b1d      	ldr	r3, [pc, #116]	; (8002c74 <HAL_RCC_ClockConfig+0x358>)
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d208      	bcs.n	8002c1c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002c0a:	4b1a      	ldr	r3, [pc, #104]	; (8002c74 <HAL_RCC_ClockConfig+0x358>)
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	4917      	ldr	r1, [pc, #92]	; (8002c74 <HAL_RCC_ClockConfig+0x358>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002c1c:	f000 f834 	bl	8002c88 <HAL_RCC_GetSysClockFreq>
 8002c20:	4602      	mov	r2, r0
 8002c22:	4b14      	ldr	r3, [pc, #80]	; (8002c74 <HAL_RCC_ClockConfig+0x358>)
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	0a1b      	lsrs	r3, r3, #8
 8002c28:	f003 030f 	and.w	r3, r3, #15
 8002c2c:	4912      	ldr	r1, [pc, #72]	; (8002c78 <HAL_RCC_ClockConfig+0x35c>)
 8002c2e:	5ccb      	ldrb	r3, [r1, r3]
 8002c30:	f003 031f 	and.w	r3, r3, #31
 8002c34:	fa22 f303 	lsr.w	r3, r2, r3
 8002c38:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c3a:	4b0e      	ldr	r3, [pc, #56]	; (8002c74 <HAL_RCC_ClockConfig+0x358>)
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	f003 030f 	and.w	r3, r3, #15
 8002c42:	4a0d      	ldr	r2, [pc, #52]	; (8002c78 <HAL_RCC_ClockConfig+0x35c>)
 8002c44:	5cd3      	ldrb	r3, [r2, r3]
 8002c46:	f003 031f 	and.w	r3, r3, #31
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c50:	4a0a      	ldr	r2, [pc, #40]	; (8002c7c <HAL_RCC_ClockConfig+0x360>)
 8002c52:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c54:	4a0a      	ldr	r2, [pc, #40]	; (8002c80 <HAL_RCC_ClockConfig+0x364>)
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002c5a:	4b0a      	ldr	r3, [pc, #40]	; (8002c84 <HAL_RCC_ClockConfig+0x368>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7fe f9e2 	bl	8001028 <HAL_InitTick>
 8002c64:	4603      	mov	r3, r0
 8002c66:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3718      	adds	r7, #24
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	58024400 	.word	0x58024400
 8002c78:	0800739c 	.word	0x0800739c
 8002c7c:	24000004 	.word	0x24000004
 8002c80:	24000000 	.word	0x24000000
 8002c84:	24000008 	.word	0x24000008

08002c88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b089      	sub	sp, #36	; 0x24
 8002c8c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c8e:	4bb3      	ldr	r3, [pc, #716]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c96:	2b18      	cmp	r3, #24
 8002c98:	f200 8155 	bhi.w	8002f46 <HAL_RCC_GetSysClockFreq+0x2be>
 8002c9c:	a201      	add	r2, pc, #4	; (adr r2, 8002ca4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca2:	bf00      	nop
 8002ca4:	08002d09 	.word	0x08002d09
 8002ca8:	08002f47 	.word	0x08002f47
 8002cac:	08002f47 	.word	0x08002f47
 8002cb0:	08002f47 	.word	0x08002f47
 8002cb4:	08002f47 	.word	0x08002f47
 8002cb8:	08002f47 	.word	0x08002f47
 8002cbc:	08002f47 	.word	0x08002f47
 8002cc0:	08002f47 	.word	0x08002f47
 8002cc4:	08002d2f 	.word	0x08002d2f
 8002cc8:	08002f47 	.word	0x08002f47
 8002ccc:	08002f47 	.word	0x08002f47
 8002cd0:	08002f47 	.word	0x08002f47
 8002cd4:	08002f47 	.word	0x08002f47
 8002cd8:	08002f47 	.word	0x08002f47
 8002cdc:	08002f47 	.word	0x08002f47
 8002ce0:	08002f47 	.word	0x08002f47
 8002ce4:	08002d35 	.word	0x08002d35
 8002ce8:	08002f47 	.word	0x08002f47
 8002cec:	08002f47 	.word	0x08002f47
 8002cf0:	08002f47 	.word	0x08002f47
 8002cf4:	08002f47 	.word	0x08002f47
 8002cf8:	08002f47 	.word	0x08002f47
 8002cfc:	08002f47 	.word	0x08002f47
 8002d00:	08002f47 	.word	0x08002f47
 8002d04:	08002d3b 	.word	0x08002d3b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d08:	4b94      	ldr	r3, [pc, #592]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0320 	and.w	r3, r3, #32
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d009      	beq.n	8002d28 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002d14:	4b91      	ldr	r3, [pc, #580]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	08db      	lsrs	r3, r3, #3
 8002d1a:	f003 0303 	and.w	r3, r3, #3
 8002d1e:	4a90      	ldr	r2, [pc, #576]	; (8002f60 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002d20:	fa22 f303 	lsr.w	r3, r2, r3
 8002d24:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002d26:	e111      	b.n	8002f4c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002d28:	4b8d      	ldr	r3, [pc, #564]	; (8002f60 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002d2a:	61bb      	str	r3, [r7, #24]
    break;
 8002d2c:	e10e      	b.n	8002f4c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002d2e:	4b8d      	ldr	r3, [pc, #564]	; (8002f64 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002d30:	61bb      	str	r3, [r7, #24]
    break;
 8002d32:	e10b      	b.n	8002f4c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002d34:	4b8c      	ldr	r3, [pc, #560]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002d36:	61bb      	str	r3, [r7, #24]
    break;
 8002d38:	e108      	b.n	8002f4c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002d3a:	4b88      	ldr	r3, [pc, #544]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3e:	f003 0303 	and.w	r3, r3, #3
 8002d42:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002d44:	4b85      	ldr	r3, [pc, #532]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d48:	091b      	lsrs	r3, r3, #4
 8002d4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d4e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002d50:	4b82      	ldr	r3, [pc, #520]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002d5a:	4b80      	ldr	r3, [pc, #512]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d5e:	08db      	lsrs	r3, r3, #3
 8002d60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	fb02 f303 	mul.w	r3, r2, r3
 8002d6a:	ee07 3a90 	vmov	s15, r3
 8002d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d72:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f000 80e1 	beq.w	8002f40 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	f000 8083 	beq.w	8002e8c <HAL_RCC_GetSysClockFreq+0x204>
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	f200 80a1 	bhi.w	8002ed0 <HAL_RCC_GetSysClockFreq+0x248>
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d003      	beq.n	8002d9c <HAL_RCC_GetSysClockFreq+0x114>
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d056      	beq.n	8002e48 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002d9a:	e099      	b.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d9c:	4b6f      	ldr	r3, [pc, #444]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0320 	and.w	r3, r3, #32
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d02d      	beq.n	8002e04 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002da8:	4b6c      	ldr	r3, [pc, #432]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	08db      	lsrs	r3, r3, #3
 8002dae:	f003 0303 	and.w	r3, r3, #3
 8002db2:	4a6b      	ldr	r2, [pc, #428]	; (8002f60 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002db4:	fa22 f303 	lsr.w	r3, r2, r3
 8002db8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	ee07 3a90 	vmov	s15, r3
 8002dc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	ee07 3a90 	vmov	s15, r3
 8002dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dd2:	4b62      	ldr	r3, [pc, #392]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dda:	ee07 3a90 	vmov	s15, r3
 8002dde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002de2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002de6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002f6c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002dea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002dee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002df2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002df6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dfe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002e02:	e087      	b.n	8002f14 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	ee07 3a90 	vmov	s15, r3
 8002e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e0e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002f70 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002e12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e16:	4b51      	ldr	r3, [pc, #324]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e1e:	ee07 3a90 	vmov	s15, r3
 8002e22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e26:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e2a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002f6c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002e46:	e065      	b.n	8002f14 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	ee07 3a90 	vmov	s15, r3
 8002e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e52:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002f74 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002e56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e5a:	4b40      	ldr	r3, [pc, #256]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e62:	ee07 3a90 	vmov	s15, r3
 8002e66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e6e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002f6c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002e8a:	e043      	b.n	8002f14 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	ee07 3a90 	vmov	s15, r3
 8002e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e96:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002f78 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002e9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e9e:	4b2f      	ldr	r3, [pc, #188]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ea6:	ee07 3a90 	vmov	s15, r3
 8002eaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002eae:	ed97 6a02 	vldr	s12, [r7, #8]
 8002eb2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002f6c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002eb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002eba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ebe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002ece:	e021      	b.n	8002f14 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	ee07 3a90 	vmov	s15, r3
 8002ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eda:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002f74 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002ede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ee2:	4b1e      	ldr	r3, [pc, #120]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eea:	ee07 3a90 	vmov	s15, r3
 8002eee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ef2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ef6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002f6c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002efa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002efe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002f12:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002f14:	4b11      	ldr	r3, [pc, #68]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f18:	0a5b      	lsrs	r3, r3, #9
 8002f1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f1e:	3301      	adds	r3, #1
 8002f20:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	ee07 3a90 	vmov	s15, r3
 8002f28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002f30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f38:	ee17 3a90 	vmov	r3, s15
 8002f3c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002f3e:	e005      	b.n	8002f4c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002f40:	2300      	movs	r3, #0
 8002f42:	61bb      	str	r3, [r7, #24]
    break;
 8002f44:	e002      	b.n	8002f4c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002f46:	4b07      	ldr	r3, [pc, #28]	; (8002f64 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002f48:	61bb      	str	r3, [r7, #24]
    break;
 8002f4a:	bf00      	nop
  }

  return sysclockfreq;
 8002f4c:	69bb      	ldr	r3, [r7, #24]
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3724      	adds	r7, #36	; 0x24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	58024400 	.word	0x58024400
 8002f60:	03d09000 	.word	0x03d09000
 8002f64:	003d0900 	.word	0x003d0900
 8002f68:	007a1200 	.word	0x007a1200
 8002f6c:	46000000 	.word	0x46000000
 8002f70:	4c742400 	.word	0x4c742400
 8002f74:	4a742400 	.word	0x4a742400
 8002f78:	4af42400 	.word	0x4af42400

08002f7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002f82:	f7ff fe81 	bl	8002c88 <HAL_RCC_GetSysClockFreq>
 8002f86:	4602      	mov	r2, r0
 8002f88:	4b10      	ldr	r3, [pc, #64]	; (8002fcc <HAL_RCC_GetHCLKFreq+0x50>)
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	0a1b      	lsrs	r3, r3, #8
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	490f      	ldr	r1, [pc, #60]	; (8002fd0 <HAL_RCC_GetHCLKFreq+0x54>)
 8002f94:	5ccb      	ldrb	r3, [r1, r3]
 8002f96:	f003 031f 	and.w	r3, r3, #31
 8002f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f9e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002fa0:	4b0a      	ldr	r3, [pc, #40]	; (8002fcc <HAL_RCC_GetHCLKFreq+0x50>)
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	f003 030f 	and.w	r3, r3, #15
 8002fa8:	4a09      	ldr	r2, [pc, #36]	; (8002fd0 <HAL_RCC_GetHCLKFreq+0x54>)
 8002faa:	5cd3      	ldrb	r3, [r2, r3]
 8002fac:	f003 031f 	and.w	r3, r3, #31
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	fa22 f303 	lsr.w	r3, r2, r3
 8002fb6:	4a07      	ldr	r2, [pc, #28]	; (8002fd4 <HAL_RCC_GetHCLKFreq+0x58>)
 8002fb8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002fba:	4a07      	ldr	r2, [pc, #28]	; (8002fd8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002fc0:	4b04      	ldr	r3, [pc, #16]	; (8002fd4 <HAL_RCC_GetHCLKFreq+0x58>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3708      	adds	r7, #8
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	58024400 	.word	0x58024400
 8002fd0:	0800739c 	.word	0x0800739c
 8002fd4:	24000004 	.word	0x24000004
 8002fd8:	24000000 	.word	0x24000000

08002fdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002fe0:	f7ff ffcc 	bl	8002f7c <HAL_RCC_GetHCLKFreq>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	4b06      	ldr	r3, [pc, #24]	; (8003000 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	091b      	lsrs	r3, r3, #4
 8002fec:	f003 0307 	and.w	r3, r3, #7
 8002ff0:	4904      	ldr	r1, [pc, #16]	; (8003004 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ff2:	5ccb      	ldrb	r3, [r1, r3]
 8002ff4:	f003 031f 	and.w	r3, r3, #31
 8002ff8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	58024400 	.word	0x58024400
 8003004:	0800739c 	.word	0x0800739c

08003008 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800300c:	f7ff ffb6 	bl	8002f7c <HAL_RCC_GetHCLKFreq>
 8003010:	4602      	mov	r2, r0
 8003012:	4b06      	ldr	r3, [pc, #24]	; (800302c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	0a1b      	lsrs	r3, r3, #8
 8003018:	f003 0307 	and.w	r3, r3, #7
 800301c:	4904      	ldr	r1, [pc, #16]	; (8003030 <HAL_RCC_GetPCLK2Freq+0x28>)
 800301e:	5ccb      	ldrb	r3, [r1, r3]
 8003020:	f003 031f 	and.w	r3, r3, #31
 8003024:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003028:	4618      	mov	r0, r3
 800302a:	bd80      	pop	{r7, pc}
 800302c:	58024400 	.word	0x58024400
 8003030:	0800739c 	.word	0x0800739c

08003034 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	223f      	movs	r2, #63	; 0x3f
 8003042:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003044:	4b1a      	ldr	r3, [pc, #104]	; (80030b0 <HAL_RCC_GetClockConfig+0x7c>)
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	f003 0207 	and.w	r2, r3, #7
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003050:	4b17      	ldr	r3, [pc, #92]	; (80030b0 <HAL_RCC_GetClockConfig+0x7c>)
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800305c:	4b14      	ldr	r3, [pc, #80]	; (80030b0 <HAL_RCC_GetClockConfig+0x7c>)
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	f003 020f 	and.w	r2, r3, #15
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003068:	4b11      	ldr	r3, [pc, #68]	; (80030b0 <HAL_RCC_GetClockConfig+0x7c>)
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003074:	4b0e      	ldr	r3, [pc, #56]	; (80030b0 <HAL_RCC_GetClockConfig+0x7c>)
 8003076:	69db      	ldr	r3, [r3, #28]
 8003078:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003080:	4b0b      	ldr	r3, [pc, #44]	; (80030b0 <HAL_RCC_GetClockConfig+0x7c>)
 8003082:	69db      	ldr	r3, [r3, #28]
 8003084:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800308c:	4b08      	ldr	r3, [pc, #32]	; (80030b0 <HAL_RCC_GetClockConfig+0x7c>)
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003098:	4b06      	ldr	r3, [pc, #24]	; (80030b4 <HAL_RCC_GetClockConfig+0x80>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 020f 	and.w	r2, r3, #15
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	601a      	str	r2, [r3, #0]
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr
 80030b0:	58024400 	.word	0x58024400
 80030b4:	52002000 	.word	0x52002000

080030b8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030c0:	2300      	movs	r3, #0
 80030c2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030c4:	2300      	movs	r3, #0
 80030c6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d03f      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80030dc:	d02a      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80030de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80030e2:	d824      	bhi.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80030e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030e8:	d018      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80030ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030ee:	d81e      	bhi.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d003      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80030f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030f8:	d007      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x52>
 80030fa:	e018      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030fc:	4bab      	ldr	r3, [pc, #684]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80030fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003100:	4aaa      	ldr	r2, [pc, #680]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003102:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003106:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003108:	e015      	b.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	3304      	adds	r3, #4
 800310e:	2102      	movs	r1, #2
 8003110:	4618      	mov	r0, r3
 8003112:	f001 f989 	bl	8004428 <RCCEx_PLL2_Config>
 8003116:	4603      	mov	r3, r0
 8003118:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800311a:	e00c      	b.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3324      	adds	r3, #36	; 0x24
 8003120:	2102      	movs	r1, #2
 8003122:	4618      	mov	r0, r3
 8003124:	f001 fa32 	bl	800458c <RCCEx_PLL3_Config>
 8003128:	4603      	mov	r3, r0
 800312a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800312c:	e003      	b.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	75fb      	strb	r3, [r7, #23]
      break;
 8003132:	e000      	b.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003134:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003136:	7dfb      	ldrb	r3, [r7, #23]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d109      	bne.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800313c:	4b9b      	ldr	r3, [pc, #620]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800313e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003140:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003148:	4998      	ldr	r1, [pc, #608]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800314a:	4313      	orrs	r3, r2
 800314c:	650b      	str	r3, [r1, #80]	; 0x50
 800314e:	e001      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003150:	7dfb      	ldrb	r3, [r7, #23]
 8003152:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315c:	2b00      	cmp	r3, #0
 800315e:	d03d      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003164:	2b04      	cmp	r3, #4
 8003166:	d826      	bhi.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003168:	a201      	add	r2, pc, #4	; (adr r2, 8003170 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800316a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800316e:	bf00      	nop
 8003170:	08003185 	.word	0x08003185
 8003174:	08003193 	.word	0x08003193
 8003178:	080031a5 	.word	0x080031a5
 800317c:	080031bd 	.word	0x080031bd
 8003180:	080031bd 	.word	0x080031bd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003184:	4b89      	ldr	r3, [pc, #548]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003188:	4a88      	ldr	r2, [pc, #544]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800318a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800318e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003190:	e015      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	3304      	adds	r3, #4
 8003196:	2100      	movs	r1, #0
 8003198:	4618      	mov	r0, r3
 800319a:	f001 f945 	bl	8004428 <RCCEx_PLL2_Config>
 800319e:	4603      	mov	r3, r0
 80031a0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80031a2:	e00c      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	3324      	adds	r3, #36	; 0x24
 80031a8:	2100      	movs	r1, #0
 80031aa:	4618      	mov	r0, r3
 80031ac:	f001 f9ee 	bl	800458c <RCCEx_PLL3_Config>
 80031b0:	4603      	mov	r3, r0
 80031b2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80031b4:	e003      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	75fb      	strb	r3, [r7, #23]
      break;
 80031ba:	e000      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80031bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031be:	7dfb      	ldrb	r3, [r7, #23]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d109      	bne.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031c4:	4b79      	ldr	r3, [pc, #484]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031c8:	f023 0207 	bic.w	r2, r3, #7
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d0:	4976      	ldr	r1, [pc, #472]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	650b      	str	r3, [r1, #80]	; 0x50
 80031d6:	e001      	b.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031d8:	7dfb      	ldrb	r3, [r7, #23]
 80031da:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d051      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80031ee:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80031f2:	d036      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80031f4:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80031f8:	d830      	bhi.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80031fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031fe:	d032      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003200:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003204:	d82a      	bhi.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003206:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800320a:	d02e      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800320c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003210:	d824      	bhi.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003212:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003216:	d018      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003218:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800321c:	d81e      	bhi.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800321e:	2b00      	cmp	r3, #0
 8003220:	d003      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x172>
 8003222:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003226:	d007      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003228:	e018      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800322a:	4b60      	ldr	r3, [pc, #384]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800322c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322e:	4a5f      	ldr	r2, [pc, #380]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003234:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003236:	e019      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3304      	adds	r3, #4
 800323c:	2100      	movs	r1, #0
 800323e:	4618      	mov	r0, r3
 8003240:	f001 f8f2 	bl	8004428 <RCCEx_PLL2_Config>
 8003244:	4603      	mov	r3, r0
 8003246:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003248:	e010      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	3324      	adds	r3, #36	; 0x24
 800324e:	2100      	movs	r1, #0
 8003250:	4618      	mov	r0, r3
 8003252:	f001 f99b 	bl	800458c <RCCEx_PLL3_Config>
 8003256:	4603      	mov	r3, r0
 8003258:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800325a:	e007      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	75fb      	strb	r3, [r7, #23]
      break;
 8003260:	e004      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003262:	bf00      	nop
 8003264:	e002      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003266:	bf00      	nop
 8003268:	e000      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800326a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800326c:	7dfb      	ldrb	r3, [r7, #23]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10a      	bne.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003272:	4b4e      	ldr	r3, [pc, #312]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003276:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003280:	494a      	ldr	r1, [pc, #296]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003282:	4313      	orrs	r3, r2
 8003284:	658b      	str	r3, [r1, #88]	; 0x58
 8003286:	e001      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003288:	7dfb      	ldrb	r3, [r7, #23]
 800328a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003294:	2b00      	cmp	r3, #0
 8003296:	d051      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800329e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80032a2:	d036      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 80032a4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80032a8:	d830      	bhi.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x254>
 80032aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032ae:	d032      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 80032b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032b4:	d82a      	bhi.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x254>
 80032b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80032ba:	d02e      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x262>
 80032bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80032c0:	d824      	bhi.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x254>
 80032c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032c6:	d018      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x242>
 80032c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032cc:	d81e      	bhi.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x254>
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x222>
 80032d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032d6:	d007      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80032d8:	e018      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032da:	4b34      	ldr	r3, [pc, #208]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032de:	4a33      	ldr	r2, [pc, #204]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80032e6:	e019      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	3304      	adds	r3, #4
 80032ec:	2100      	movs	r1, #0
 80032ee:	4618      	mov	r0, r3
 80032f0:	f001 f89a 	bl	8004428 <RCCEx_PLL2_Config>
 80032f4:	4603      	mov	r3, r0
 80032f6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80032f8:	e010      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	3324      	adds	r3, #36	; 0x24
 80032fe:	2100      	movs	r1, #0
 8003300:	4618      	mov	r0, r3
 8003302:	f001 f943 	bl	800458c <RCCEx_PLL3_Config>
 8003306:	4603      	mov	r3, r0
 8003308:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800330a:	e007      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	75fb      	strb	r3, [r7, #23]
      break;
 8003310:	e004      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003312:	bf00      	nop
 8003314:	e002      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003316:	bf00      	nop
 8003318:	e000      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800331a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800331c:	7dfb      	ldrb	r3, [r7, #23]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10a      	bne.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003322:	4b22      	ldr	r3, [pc, #136]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003326:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003330:	491e      	ldr	r1, [pc, #120]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003332:	4313      	orrs	r3, r2
 8003334:	658b      	str	r3, [r1, #88]	; 0x58
 8003336:	e001      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003338:	7dfb      	ldrb	r3, [r7, #23]
 800333a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d035      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800334c:	2b30      	cmp	r3, #48	; 0x30
 800334e:	d01c      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003350:	2b30      	cmp	r3, #48	; 0x30
 8003352:	d817      	bhi.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8003354:	2b20      	cmp	r3, #32
 8003356:	d00c      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003358:	2b20      	cmp	r3, #32
 800335a:	d813      	bhi.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800335c:	2b00      	cmp	r3, #0
 800335e:	d016      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8003360:	2b10      	cmp	r3, #16
 8003362:	d10f      	bne.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003364:	4b11      	ldr	r3, [pc, #68]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003368:	4a10      	ldr	r2, [pc, #64]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800336a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800336e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003370:	e00e      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	3304      	adds	r3, #4
 8003376:	2102      	movs	r1, #2
 8003378:	4618      	mov	r0, r3
 800337a:	f001 f855 	bl	8004428 <RCCEx_PLL2_Config>
 800337e:	4603      	mov	r3, r0
 8003380:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003382:	e005      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	75fb      	strb	r3, [r7, #23]
      break;
 8003388:	e002      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800338a:	bf00      	nop
 800338c:	e000      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800338e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003390:	7dfb      	ldrb	r3, [r7, #23]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10c      	bne.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003396:	4b05      	ldr	r3, [pc, #20]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800339a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033a2:	4902      	ldr	r1, [pc, #8]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80033a8:	e004      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80033aa:	bf00      	nop
 80033ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033b0:	7dfb      	ldrb	r3, [r7, #23]
 80033b2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d047      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033c8:	d030      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x374>
 80033ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033ce:	d82a      	bhi.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80033d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80033d4:	d02c      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x378>
 80033d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80033da:	d824      	bhi.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80033dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033e0:	d018      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80033e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033e6:	d81e      	bhi.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d003      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80033ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033f0:	d007      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80033f2:	e018      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033f4:	4bac      	ldr	r3, [pc, #688]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80033f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f8:	4aab      	ldr	r2, [pc, #684]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80033fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003400:	e017      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	3304      	adds	r3, #4
 8003406:	2100      	movs	r1, #0
 8003408:	4618      	mov	r0, r3
 800340a:	f001 f80d 	bl	8004428 <RCCEx_PLL2_Config>
 800340e:	4603      	mov	r3, r0
 8003410:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003412:	e00e      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	3324      	adds	r3, #36	; 0x24
 8003418:	2100      	movs	r1, #0
 800341a:	4618      	mov	r0, r3
 800341c:	f001 f8b6 	bl	800458c <RCCEx_PLL3_Config>
 8003420:	4603      	mov	r3, r0
 8003422:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003424:	e005      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	75fb      	strb	r3, [r7, #23]
      break;
 800342a:	e002      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800342c:	bf00      	nop
 800342e:	e000      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8003430:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003432:	7dfb      	ldrb	r3, [r7, #23]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d109      	bne.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003438:	4b9b      	ldr	r3, [pc, #620]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800343a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800343c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003444:	4998      	ldr	r1, [pc, #608]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003446:	4313      	orrs	r3, r2
 8003448:	650b      	str	r3, [r1, #80]	; 0x50
 800344a:	e001      	b.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800344c:	7dfb      	ldrb	r3, [r7, #23]
 800344e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d049      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003460:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003464:	d02e      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8003466:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800346a:	d828      	bhi.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x406>
 800346c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003470:	d02a      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003472:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003476:	d822      	bhi.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003478:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800347c:	d026      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x414>
 800347e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003482:	d81c      	bhi.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003484:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003488:	d010      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800348a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800348e:	d816      	bhi.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003490:	2b00      	cmp	r3, #0
 8003492:	d01d      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8003494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003498:	d111      	bne.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	3304      	adds	r3, #4
 800349e:	2101      	movs	r1, #1
 80034a0:	4618      	mov	r0, r3
 80034a2:	f000 ffc1 	bl	8004428 <RCCEx_PLL2_Config>
 80034a6:	4603      	mov	r3, r0
 80034a8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80034aa:	e012      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	3324      	adds	r3, #36	; 0x24
 80034b0:	2101      	movs	r1, #1
 80034b2:	4618      	mov	r0, r3
 80034b4:	f001 f86a 	bl	800458c <RCCEx_PLL3_Config>
 80034b8:	4603      	mov	r3, r0
 80034ba:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80034bc:	e009      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	75fb      	strb	r3, [r7, #23]
      break;
 80034c2:	e006      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80034c4:	bf00      	nop
 80034c6:	e004      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80034c8:	bf00      	nop
 80034ca:	e002      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80034cc:	bf00      	nop
 80034ce:	e000      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80034d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034d2:	7dfb      	ldrb	r3, [r7, #23]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d109      	bne.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80034d8:	4b73      	ldr	r3, [pc, #460]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80034da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034dc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e4:	4970      	ldr	r1, [pc, #448]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	650b      	str	r3, [r1, #80]	; 0x50
 80034ea:	e001      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ec:	7dfb      	ldrb	r3, [r7, #23]
 80034ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d04b      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003502:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003506:	d02e      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003508:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800350c:	d828      	bhi.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800350e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003512:	d02a      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8003514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003518:	d822      	bhi.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800351a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800351e:	d026      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8003520:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003524:	d81c      	bhi.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003526:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800352a:	d010      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x496>
 800352c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003530:	d816      	bhi.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003532:	2b00      	cmp	r3, #0
 8003534:	d01d      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003536:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800353a:	d111      	bne.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	3304      	adds	r3, #4
 8003540:	2101      	movs	r1, #1
 8003542:	4618      	mov	r0, r3
 8003544:	f000 ff70 	bl	8004428 <RCCEx_PLL2_Config>
 8003548:	4603      	mov	r3, r0
 800354a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800354c:	e012      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	3324      	adds	r3, #36	; 0x24
 8003552:	2101      	movs	r1, #1
 8003554:	4618      	mov	r0, r3
 8003556:	f001 f819 	bl	800458c <RCCEx_PLL3_Config>
 800355a:	4603      	mov	r3, r0
 800355c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800355e:	e009      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	75fb      	strb	r3, [r7, #23]
      break;
 8003564:	e006      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003566:	bf00      	nop
 8003568:	e004      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800356a:	bf00      	nop
 800356c:	e002      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800356e:	bf00      	nop
 8003570:	e000      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003572:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003574:	7dfb      	ldrb	r3, [r7, #23]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10a      	bne.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800357a:	4b4b      	ldr	r3, [pc, #300]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800357c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800357e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003588:	4947      	ldr	r1, [pc, #284]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800358a:	4313      	orrs	r3, r2
 800358c:	658b      	str	r3, [r1, #88]	; 0x58
 800358e:	e001      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003590:	7dfb      	ldrb	r3, [r7, #23]
 8003592:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d02f      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035a8:	d00e      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x510>
 80035aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035ae:	d814      	bhi.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x522>
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d015      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80035b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035b8:	d10f      	bne.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035ba:	4b3b      	ldr	r3, [pc, #236]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80035bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035be:	4a3a      	ldr	r2, [pc, #232]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80035c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80035c6:	e00c      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	3304      	adds	r3, #4
 80035cc:	2101      	movs	r1, #1
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 ff2a 	bl	8004428 <RCCEx_PLL2_Config>
 80035d4:	4603      	mov	r3, r0
 80035d6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80035d8:	e003      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	75fb      	strb	r3, [r7, #23]
      break;
 80035de:	e000      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 80035e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035e2:	7dfb      	ldrb	r3, [r7, #23]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d109      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80035e8:	4b2f      	ldr	r3, [pc, #188]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80035ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ec:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035f4:	492c      	ldr	r1, [pc, #176]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	650b      	str	r3, [r1, #80]	; 0x50
 80035fa:	e001      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035fc:	7dfb      	ldrb	r3, [r7, #23]
 80035fe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d032      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003610:	2b03      	cmp	r3, #3
 8003612:	d81b      	bhi.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003614:	a201      	add	r2, pc, #4	; (adr r2, 800361c <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8003616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800361a:	bf00      	nop
 800361c:	08003653 	.word	0x08003653
 8003620:	0800362d 	.word	0x0800362d
 8003624:	0800363b 	.word	0x0800363b
 8003628:	08003653 	.word	0x08003653
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800362c:	4b1e      	ldr	r3, [pc, #120]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800362e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003630:	4a1d      	ldr	r2, [pc, #116]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003632:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003636:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003638:	e00c      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	3304      	adds	r3, #4
 800363e:	2102      	movs	r1, #2
 8003640:	4618      	mov	r0, r3
 8003642:	f000 fef1 	bl	8004428 <RCCEx_PLL2_Config>
 8003646:	4603      	mov	r3, r0
 8003648:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800364a:	e003      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	75fb      	strb	r3, [r7, #23]
      break;
 8003650:	e000      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003652:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003654:	7dfb      	ldrb	r3, [r7, #23]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d109      	bne.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800365a:	4b13      	ldr	r3, [pc, #76]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800365c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800365e:	f023 0203 	bic.w	r2, r3, #3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003666:	4910      	ldr	r1, [pc, #64]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003668:	4313      	orrs	r3, r2
 800366a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800366c:	e001      	b.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800366e:	7dfb      	ldrb	r3, [r7, #23]
 8003670:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800367a:	2b00      	cmp	r3, #0
 800367c:	f000 808a 	beq.w	8003794 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003680:	4b0a      	ldr	r3, [pc, #40]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a09      	ldr	r2, [pc, #36]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003686:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800368a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800368c:	f7fd fe4a 	bl	8001324 <HAL_GetTick>
 8003690:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003692:	e00d      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003694:	f7fd fe46 	bl	8001324 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b64      	cmp	r3, #100	; 0x64
 80036a0:	d906      	bls.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	75fb      	strb	r3, [r7, #23]
        break;
 80036a6:	e009      	b.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x604>
 80036a8:	58024400 	.word	0x58024400
 80036ac:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036b0:	4bb9      	ldr	r3, [pc, #740]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d0eb      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 80036bc:	7dfb      	ldrb	r3, [r7, #23]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d166      	bne.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80036c2:	4bb6      	ldr	r3, [pc, #728]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80036c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80036cc:	4053      	eors	r3, r2
 80036ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d013      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036d6:	4bb1      	ldr	r3, [pc, #708]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80036d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036de:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036e0:	4bae      	ldr	r3, [pc, #696]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80036e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e4:	4aad      	ldr	r2, [pc, #692]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80036e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ea:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036ec:	4bab      	ldr	r3, [pc, #684]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80036ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f0:	4aaa      	ldr	r2, [pc, #680]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80036f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036f6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80036f8:	4aa8      	ldr	r2, [pc, #672]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003704:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003708:	d115      	bne.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800370a:	f7fd fe0b 	bl	8001324 <HAL_GetTick>
 800370e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003710:	e00b      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003712:	f7fd fe07 	bl	8001324 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003720:	4293      	cmp	r3, r2
 8003722:	d902      	bls.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	75fb      	strb	r3, [r7, #23]
            break;
 8003728:	e005      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800372a:	4b9c      	ldr	r3, [pc, #624]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800372c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d0ed      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8003736:	7dfb      	ldrb	r3, [r7, #23]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d126      	bne.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003746:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800374a:	d10d      	bne.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 800374c:	4b93      	ldr	r3, [pc, #588]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800375a:	0919      	lsrs	r1, r3, #4
 800375c:	4b90      	ldr	r3, [pc, #576]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800375e:	400b      	ands	r3, r1
 8003760:	498e      	ldr	r1, [pc, #568]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003762:	4313      	orrs	r3, r2
 8003764:	610b      	str	r3, [r1, #16]
 8003766:	e005      	b.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8003768:	4b8c      	ldr	r3, [pc, #560]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	4a8b      	ldr	r2, [pc, #556]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800376e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003772:	6113      	str	r3, [r2, #16]
 8003774:	4b89      	ldr	r3, [pc, #548]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003776:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800377e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003782:	4986      	ldr	r1, [pc, #536]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003784:	4313      	orrs	r3, r2
 8003786:	670b      	str	r3, [r1, #112]	; 0x70
 8003788:	e004      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800378a:	7dfb      	ldrb	r3, [r7, #23]
 800378c:	75bb      	strb	r3, [r7, #22]
 800378e:	e001      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003790:	7dfb      	ldrb	r3, [r7, #23]
 8003792:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	2b00      	cmp	r3, #0
 800379e:	d07e      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037a4:	2b28      	cmp	r3, #40	; 0x28
 80037a6:	d867      	bhi.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 80037a8:	a201      	add	r2, pc, #4	; (adr r2, 80037b0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 80037aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ae:	bf00      	nop
 80037b0:	0800387f 	.word	0x0800387f
 80037b4:	08003879 	.word	0x08003879
 80037b8:	08003879 	.word	0x08003879
 80037bc:	08003879 	.word	0x08003879
 80037c0:	08003879 	.word	0x08003879
 80037c4:	08003879 	.word	0x08003879
 80037c8:	08003879 	.word	0x08003879
 80037cc:	08003879 	.word	0x08003879
 80037d0:	08003855 	.word	0x08003855
 80037d4:	08003879 	.word	0x08003879
 80037d8:	08003879 	.word	0x08003879
 80037dc:	08003879 	.word	0x08003879
 80037e0:	08003879 	.word	0x08003879
 80037e4:	08003879 	.word	0x08003879
 80037e8:	08003879 	.word	0x08003879
 80037ec:	08003879 	.word	0x08003879
 80037f0:	08003867 	.word	0x08003867
 80037f4:	08003879 	.word	0x08003879
 80037f8:	08003879 	.word	0x08003879
 80037fc:	08003879 	.word	0x08003879
 8003800:	08003879 	.word	0x08003879
 8003804:	08003879 	.word	0x08003879
 8003808:	08003879 	.word	0x08003879
 800380c:	08003879 	.word	0x08003879
 8003810:	0800387f 	.word	0x0800387f
 8003814:	08003879 	.word	0x08003879
 8003818:	08003879 	.word	0x08003879
 800381c:	08003879 	.word	0x08003879
 8003820:	08003879 	.word	0x08003879
 8003824:	08003879 	.word	0x08003879
 8003828:	08003879 	.word	0x08003879
 800382c:	08003879 	.word	0x08003879
 8003830:	0800387f 	.word	0x0800387f
 8003834:	08003879 	.word	0x08003879
 8003838:	08003879 	.word	0x08003879
 800383c:	08003879 	.word	0x08003879
 8003840:	08003879 	.word	0x08003879
 8003844:	08003879 	.word	0x08003879
 8003848:	08003879 	.word	0x08003879
 800384c:	08003879 	.word	0x08003879
 8003850:	0800387f 	.word	0x0800387f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3304      	adds	r3, #4
 8003858:	2101      	movs	r1, #1
 800385a:	4618      	mov	r0, r3
 800385c:	f000 fde4 	bl	8004428 <RCCEx_PLL2_Config>
 8003860:	4603      	mov	r3, r0
 8003862:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003864:	e00c      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	3324      	adds	r3, #36	; 0x24
 800386a:	2101      	movs	r1, #1
 800386c:	4618      	mov	r0, r3
 800386e:	f000 fe8d 	bl	800458c <RCCEx_PLL3_Config>
 8003872:	4603      	mov	r3, r0
 8003874:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003876:	e003      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	75fb      	strb	r3, [r7, #23]
      break;
 800387c:	e000      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 800387e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003880:	7dfb      	ldrb	r3, [r7, #23]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d109      	bne.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003886:	4b45      	ldr	r3, [pc, #276]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800388a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003892:	4942      	ldr	r1, [pc, #264]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003894:	4313      	orrs	r3, r2
 8003896:	654b      	str	r3, [r1, #84]	; 0x54
 8003898:	e001      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800389a:	7dfb      	ldrb	r3, [r7, #23]
 800389c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d037      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ae:	2b05      	cmp	r3, #5
 80038b0:	d820      	bhi.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80038b2:	a201      	add	r2, pc, #4	; (adr r2, 80038b8 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 80038b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b8:	080038fb 	.word	0x080038fb
 80038bc:	080038d1 	.word	0x080038d1
 80038c0:	080038e3 	.word	0x080038e3
 80038c4:	080038fb 	.word	0x080038fb
 80038c8:	080038fb 	.word	0x080038fb
 80038cc:	080038fb 	.word	0x080038fb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3304      	adds	r3, #4
 80038d4:	2101      	movs	r1, #1
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 fda6 	bl	8004428 <RCCEx_PLL2_Config>
 80038dc:	4603      	mov	r3, r0
 80038de:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80038e0:	e00c      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	3324      	adds	r3, #36	; 0x24
 80038e6:	2101      	movs	r1, #1
 80038e8:	4618      	mov	r0, r3
 80038ea:	f000 fe4f 	bl	800458c <RCCEx_PLL3_Config>
 80038ee:	4603      	mov	r3, r0
 80038f0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80038f2:	e003      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	75fb      	strb	r3, [r7, #23]
      break;
 80038f8:	e000      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 80038fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038fc:	7dfb      	ldrb	r3, [r7, #23]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d109      	bne.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003902:	4b26      	ldr	r3, [pc, #152]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003906:	f023 0207 	bic.w	r2, r3, #7
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800390e:	4923      	ldr	r1, [pc, #140]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003910:	4313      	orrs	r3, r2
 8003912:	654b      	str	r3, [r1, #84]	; 0x54
 8003914:	e001      	b.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003916:	7dfb      	ldrb	r3, [r7, #23]
 8003918:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0304 	and.w	r3, r3, #4
 8003922:	2b00      	cmp	r3, #0
 8003924:	d040      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800392c:	2b05      	cmp	r3, #5
 800392e:	d821      	bhi.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8003930:	a201      	add	r2, pc, #4	; (adr r2, 8003938 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8003932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003936:	bf00      	nop
 8003938:	0800397b 	.word	0x0800397b
 800393c:	08003951 	.word	0x08003951
 8003940:	08003963 	.word	0x08003963
 8003944:	0800397b 	.word	0x0800397b
 8003948:	0800397b 	.word	0x0800397b
 800394c:	0800397b 	.word	0x0800397b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	3304      	adds	r3, #4
 8003954:	2101      	movs	r1, #1
 8003956:	4618      	mov	r0, r3
 8003958:	f000 fd66 	bl	8004428 <RCCEx_PLL2_Config>
 800395c:	4603      	mov	r3, r0
 800395e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003960:	e00c      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	3324      	adds	r3, #36	; 0x24
 8003966:	2101      	movs	r1, #1
 8003968:	4618      	mov	r0, r3
 800396a:	f000 fe0f 	bl	800458c <RCCEx_PLL3_Config>
 800396e:	4603      	mov	r3, r0
 8003970:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003972:	e003      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	75fb      	strb	r3, [r7, #23]
      break;
 8003978:	e000      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 800397a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800397c:	7dfb      	ldrb	r3, [r7, #23]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d110      	bne.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003982:	4b06      	ldr	r3, [pc, #24]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003986:	f023 0207 	bic.w	r2, r3, #7
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003990:	4902      	ldr	r1, [pc, #8]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003992:	4313      	orrs	r3, r2
 8003994:	658b      	str	r3, [r1, #88]	; 0x58
 8003996:	e007      	b.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8003998:	58024800 	.word	0x58024800
 800399c:	58024400 	.word	0x58024400
 80039a0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a4:	7dfb      	ldrb	r3, [r7, #23]
 80039a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0320 	and.w	r3, r3, #32
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d04b      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039be:	d02e      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x966>
 80039c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039c4:	d828      	bhi.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80039c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ca:	d02a      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80039cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039d0:	d822      	bhi.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80039d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039d6:	d026      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80039d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039dc:	d81c      	bhi.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80039de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039e2:	d010      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 80039e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039e8:	d816      	bhi.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d01d      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x972>
 80039ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039f2:	d111      	bne.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	3304      	adds	r3, #4
 80039f8:	2100      	movs	r1, #0
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 fd14 	bl	8004428 <RCCEx_PLL2_Config>
 8003a00:	4603      	mov	r3, r0
 8003a02:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003a04:	e012      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	3324      	adds	r3, #36	; 0x24
 8003a0a:	2102      	movs	r1, #2
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f000 fdbd 	bl	800458c <RCCEx_PLL3_Config>
 8003a12:	4603      	mov	r3, r0
 8003a14:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003a16:	e009      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	75fb      	strb	r3, [r7, #23]
      break;
 8003a1c:	e006      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003a1e:	bf00      	nop
 8003a20:	e004      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003a22:	bf00      	nop
 8003a24:	e002      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003a26:	bf00      	nop
 8003a28:	e000      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003a2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a2c:	7dfb      	ldrb	r3, [r7, #23]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10a      	bne.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a32:	4bb2      	ldr	r3, [pc, #712]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a36:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a40:	49ae      	ldr	r1, [pc, #696]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	654b      	str	r3, [r1, #84]	; 0x54
 8003a46:	e001      	b.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a48:	7dfb      	ldrb	r3, [r7, #23]
 8003a4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d04b      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a5e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003a62:	d02e      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8003a64:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003a68:	d828      	bhi.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a6e:	d02a      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8003a70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a74:	d822      	bhi.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003a76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a7a:	d026      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003a7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a80:	d81c      	bhi.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003a82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a86:	d010      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8003a88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a8c:	d816      	bhi.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d01d      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8003a92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a96:	d111      	bne.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	3304      	adds	r3, #4
 8003a9c:	2100      	movs	r1, #0
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f000 fcc2 	bl	8004428 <RCCEx_PLL2_Config>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003aa8:	e012      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	3324      	adds	r3, #36	; 0x24
 8003aae:	2102      	movs	r1, #2
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f000 fd6b 	bl	800458c <RCCEx_PLL3_Config>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003aba:	e009      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	75fb      	strb	r3, [r7, #23]
      break;
 8003ac0:	e006      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003ac2:	bf00      	nop
 8003ac4:	e004      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003ac6:	bf00      	nop
 8003ac8:	e002      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003aca:	bf00      	nop
 8003acc:	e000      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003ace:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ad0:	7dfb      	ldrb	r3, [r7, #23]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10a      	bne.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ad6:	4b89      	ldr	r3, [pc, #548]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ada:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ae4:	4985      	ldr	r1, [pc, #532]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	658b      	str	r3, [r1, #88]	; 0x58
 8003aea:	e001      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aec:	7dfb      	ldrb	r3, [r7, #23]
 8003aee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d04b      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b02:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003b06:	d02e      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8003b08:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003b0c:	d828      	bhi.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003b0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b12:	d02a      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8003b14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b18:	d822      	bhi.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003b1a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003b1e:	d026      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8003b20:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003b24:	d81c      	bhi.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003b26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b2a:	d010      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8003b2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b30:	d816      	bhi.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d01d      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8003b36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b3a:	d111      	bne.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	3304      	adds	r3, #4
 8003b40:	2100      	movs	r1, #0
 8003b42:	4618      	mov	r0, r3
 8003b44:	f000 fc70 	bl	8004428 <RCCEx_PLL2_Config>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003b4c:	e012      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	3324      	adds	r3, #36	; 0x24
 8003b52:	2102      	movs	r1, #2
 8003b54:	4618      	mov	r0, r3
 8003b56:	f000 fd19 	bl	800458c <RCCEx_PLL3_Config>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003b5e:	e009      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	75fb      	strb	r3, [r7, #23]
      break;
 8003b64:	e006      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003b66:	bf00      	nop
 8003b68:	e004      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003b6a:	bf00      	nop
 8003b6c:	e002      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003b6e:	bf00      	nop
 8003b70:	e000      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003b72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b74:	7dfb      	ldrb	r3, [r7, #23]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d10a      	bne.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003b7a:	4b60      	ldr	r3, [pc, #384]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b88:	495c      	ldr	r1, [pc, #368]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	658b      	str	r3, [r1, #88]	; 0x58
 8003b8e:	e001      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b90:	7dfb      	ldrb	r3, [r7, #23]
 8003b92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0308 	and.w	r3, r3, #8
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d018      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ba4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ba8:	d10a      	bne.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	3324      	adds	r3, #36	; 0x24
 8003bae:	2102      	movs	r1, #2
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f000 fceb 	bl	800458c <RCCEx_PLL3_Config>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d001      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003bc0:	4b4e      	ldr	r3, [pc, #312]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bcc:	494b      	ldr	r1, [pc, #300]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0310 	and.w	r3, r3, #16
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d01a      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003be8:	d10a      	bne.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	3324      	adds	r3, #36	; 0x24
 8003bee:	2102      	movs	r1, #2
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f000 fccb 	bl	800458c <RCCEx_PLL3_Config>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d001      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c00:	4b3e      	ldr	r3, [pc, #248]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0e:	493b      	ldr	r1, [pc, #236]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d034      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c2a:	d01d      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8003c2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c30:	d817      	bhi.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8003c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c3a:	d009      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003c3c:	e011      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	3304      	adds	r3, #4
 8003c42:	2100      	movs	r1, #0
 8003c44:	4618      	mov	r0, r3
 8003c46:	f000 fbef 	bl	8004428 <RCCEx_PLL2_Config>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003c4e:	e00c      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	3324      	adds	r3, #36	; 0x24
 8003c54:	2102      	movs	r1, #2
 8003c56:	4618      	mov	r0, r3
 8003c58:	f000 fc98 	bl	800458c <RCCEx_PLL3_Config>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003c60:	e003      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	75fb      	strb	r3, [r7, #23]
      break;
 8003c66:	e000      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8003c68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c6a:	7dfb      	ldrb	r3, [r7, #23]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d10a      	bne.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c70:	4b22      	ldr	r3, [pc, #136]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c7e:	491f      	ldr	r1, [pc, #124]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	658b      	str	r3, [r1, #88]	; 0x58
 8003c84:	e001      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c86:	7dfb      	ldrb	r3, [r7, #23]
 8003c88:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d036      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c9c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ca0:	d01c      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003ca2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ca6:	d816      	bhi.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003ca8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cac:	d003      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003cae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cb2:	d007      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8003cb4:	e00f      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cb6:	4b11      	ldr	r3, [pc, #68]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cba:	4a10      	ldr	r2, [pc, #64]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003cbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cc0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003cc2:	e00c      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	3324      	adds	r3, #36	; 0x24
 8003cc8:	2101      	movs	r1, #1
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f000 fc5e 	bl	800458c <RCCEx_PLL3_Config>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003cd4:	e003      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	75fb      	strb	r3, [r7, #23]
      break;
 8003cda:	e000      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8003cdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cde:	7dfb      	ldrb	r3, [r7, #23]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d10d      	bne.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ce4:	4b05      	ldr	r3, [pc, #20]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cf2:	4902      	ldr	r1, [pc, #8]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	654b      	str	r3, [r1, #84]	; 0x54
 8003cf8:	e004      	b.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8003cfa:	bf00      	nop
 8003cfc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d00:	7dfb      	ldrb	r3, [r7, #23]
 8003d02:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d029      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d003      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d1c:	d007      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8003d1e:	e00f      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d20:	4b61      	ldr	r3, [pc, #388]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d24:	4a60      	ldr	r2, [pc, #384]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003d26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003d2c:	e00b      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	3304      	adds	r3, #4
 8003d32:	2102      	movs	r1, #2
 8003d34:	4618      	mov	r0, r3
 8003d36:	f000 fb77 	bl	8004428 <RCCEx_PLL2_Config>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003d3e:	e002      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	75fb      	strb	r3, [r7, #23]
      break;
 8003d44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d46:	7dfb      	ldrb	r3, [r7, #23]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d109      	bne.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003d4c:	4b56      	ldr	r3, [pc, #344]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d58:	4953      	ldr	r1, [pc, #332]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003d5e:	e001      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d60:	7dfb      	ldrb	r3, [r7, #23]
 8003d62:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00a      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	3324      	adds	r3, #36	; 0x24
 8003d74:	2102      	movs	r1, #2
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 fc08 	bl	800458c <RCCEx_PLL3_Config>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d030      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d9a:	d017      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003d9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003da0:	d811      	bhi.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8003da2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003da6:	d013      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8003da8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dac:	d80b      	bhi.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d010      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8003db2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003db6:	d106      	bne.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003db8:	4b3b      	ldr	r3, [pc, #236]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbc:	4a3a      	ldr	r2, [pc, #232]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003dbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dc2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003dc4:	e007      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	75fb      	strb	r3, [r7, #23]
      break;
 8003dca:	e004      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8003dcc:	bf00      	nop
 8003dce:	e002      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8003dd0:	bf00      	nop
 8003dd2:	e000      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8003dd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dd6:	7dfb      	ldrb	r3, [r7, #23]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d109      	bne.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ddc:	4b32      	ldr	r3, [pc, #200]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003de8:	492f      	ldr	r1, [pc, #188]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	654b      	str	r3, [r1, #84]	; 0x54
 8003dee:	e001      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df0:	7dfb      	ldrb	r3, [r7, #23]
 8003df2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d008      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e00:	4b29      	ldr	r3, [pc, #164]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e04:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e0c:	4926      	ldr	r1, [pc, #152]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d008      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e1e:	4b22      	ldr	r3, [pc, #136]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003e20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e22:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e2a:	491f      	ldr	r1, [pc, #124]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00d      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e3c:	4b1a      	ldr	r3, [pc, #104]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	4a19      	ldr	r2, [pc, #100]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003e42:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003e46:	6113      	str	r3, [r2, #16]
 8003e48:	4b17      	ldr	r3, [pc, #92]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003e4a:	691a      	ldr	r2, [r3, #16]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e52:	4915      	ldr	r1, [pc, #84]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	da08      	bge.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003e60:	4b11      	ldr	r3, [pc, #68]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e64:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e6c:	490e      	ldr	r1, [pc, #56]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d009      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e7e:	4b0a      	ldr	r3, [pc, #40]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e82:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e8c:	4906      	ldr	r1, [pc, #24]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003e92:	7dbb      	ldrb	r3, [r7, #22]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d101      	bne.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	e000      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3718      	adds	r7, #24
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	58024400 	.word	0x58024400

08003eac <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003eb0:	f7ff f864 	bl	8002f7c <HAL_RCC_GetHCLKFreq>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	4b06      	ldr	r3, [pc, #24]	; (8003ed0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	091b      	lsrs	r3, r3, #4
 8003ebc:	f003 0307 	and.w	r3, r3, #7
 8003ec0:	4904      	ldr	r1, [pc, #16]	; (8003ed4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003ec2:	5ccb      	ldrb	r3, [r1, r3]
 8003ec4:	f003 031f 	and.w	r3, r3, #31
 8003ec8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	58024400 	.word	0x58024400
 8003ed4:	0800739c 	.word	0x0800739c

08003ed8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b089      	sub	sp, #36	; 0x24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003ee0:	4ba1      	ldr	r3, [pc, #644]	; (8004168 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee4:	f003 0303 	and.w	r3, r3, #3
 8003ee8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003eea:	4b9f      	ldr	r3, [pc, #636]	; (8004168 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eee:	0b1b      	lsrs	r3, r3, #12
 8003ef0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ef4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003ef6:	4b9c      	ldr	r3, [pc, #624]	; (8004168 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efa:	091b      	lsrs	r3, r3, #4
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003f02:	4b99      	ldr	r3, [pc, #612]	; (8004168 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f06:	08db      	lsrs	r3, r3, #3
 8003f08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	fb02 f303 	mul.w	r3, r2, r3
 8003f12:	ee07 3a90 	vmov	s15, r3
 8003f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f1a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f000 8111 	beq.w	8004148 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	f000 8083 	beq.w	8004034 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	f200 80a1 	bhi.w	8004078 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d003      	beq.n	8003f44 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d056      	beq.n	8003ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003f42:	e099      	b.n	8004078 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f44:	4b88      	ldr	r3, [pc, #544]	; (8004168 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0320 	and.w	r3, r3, #32
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d02d      	beq.n	8003fac <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003f50:	4b85      	ldr	r3, [pc, #532]	; (8004168 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	08db      	lsrs	r3, r3, #3
 8003f56:	f003 0303 	and.w	r3, r3, #3
 8003f5a:	4a84      	ldr	r2, [pc, #528]	; (800416c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f60:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	ee07 3a90 	vmov	s15, r3
 8003f68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	ee07 3a90 	vmov	s15, r3
 8003f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f7a:	4b7b      	ldr	r3, [pc, #492]	; (8004168 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f82:	ee07 3a90 	vmov	s15, r3
 8003f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f8e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004170 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fa6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003faa:	e087      	b.n	80040bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	ee07 3a90 	vmov	s15, r3
 8003fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fb6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004174 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fbe:	4b6a      	ldr	r3, [pc, #424]	; (8004168 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fc6:	ee07 3a90 	vmov	s15, r3
 8003fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fce:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fd2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004170 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003fee:	e065      	b.n	80040bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	ee07 3a90 	vmov	s15, r3
 8003ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ffa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004178 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003ffe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004002:	4b59      	ldr	r3, [pc, #356]	; (8004168 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800400a:	ee07 3a90 	vmov	s15, r3
 800400e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004012:	ed97 6a03 	vldr	s12, [r7, #12]
 8004016:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004170 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800401a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800401e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004022:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800402a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800402e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004032:	e043      	b.n	80040bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	ee07 3a90 	vmov	s15, r3
 800403a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800403e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800417c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004042:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004046:	4b48      	ldr	r3, [pc, #288]	; (8004168 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800404e:	ee07 3a90 	vmov	s15, r3
 8004052:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004056:	ed97 6a03 	vldr	s12, [r7, #12]
 800405a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004170 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800405e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004062:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004066:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800406a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800406e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004072:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004076:	e021      	b.n	80040bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	ee07 3a90 	vmov	s15, r3
 800407e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004082:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004178 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800408a:	4b37      	ldr	r3, [pc, #220]	; (8004168 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800408c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004092:	ee07 3a90 	vmov	s15, r3
 8004096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800409a:	ed97 6a03 	vldr	s12, [r7, #12]
 800409e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004170 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80040a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80040ba:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80040bc:	4b2a      	ldr	r3, [pc, #168]	; (8004168 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c0:	0a5b      	lsrs	r3, r3, #9
 80040c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040c6:	ee07 3a90 	vmov	s15, r3
 80040ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80040d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80040d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80040da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040e2:	ee17 2a90 	vmov	r2, s15
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80040ea:	4b1f      	ldr	r3, [pc, #124]	; (8004168 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ee:	0c1b      	lsrs	r3, r3, #16
 80040f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040f4:	ee07 3a90 	vmov	s15, r3
 80040f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004100:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004104:	edd7 6a07 	vldr	s13, [r7, #28]
 8004108:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800410c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004110:	ee17 2a90 	vmov	r2, s15
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004118:	4b13      	ldr	r3, [pc, #76]	; (8004168 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800411a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411c:	0e1b      	lsrs	r3, r3, #24
 800411e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004122:	ee07 3a90 	vmov	s15, r3
 8004126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800412a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800412e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004132:	edd7 6a07 	vldr	s13, [r7, #28]
 8004136:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800413a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800413e:	ee17 2a90 	vmov	r2, s15
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004146:	e008      	b.n	800415a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	609a      	str	r2, [r3, #8]
}
 800415a:	bf00      	nop
 800415c:	3724      	adds	r7, #36	; 0x24
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	58024400 	.word	0x58024400
 800416c:	03d09000 	.word	0x03d09000
 8004170:	46000000 	.word	0x46000000
 8004174:	4c742400 	.word	0x4c742400
 8004178:	4a742400 	.word	0x4a742400
 800417c:	4af42400 	.word	0x4af42400

08004180 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004180:	b480      	push	{r7}
 8004182:	b089      	sub	sp, #36	; 0x24
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004188:	4ba1      	ldr	r3, [pc, #644]	; (8004410 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800418a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418c:	f003 0303 	and.w	r3, r3, #3
 8004190:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004192:	4b9f      	ldr	r3, [pc, #636]	; (8004410 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004196:	0d1b      	lsrs	r3, r3, #20
 8004198:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800419c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800419e:	4b9c      	ldr	r3, [pc, #624]	; (8004410 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a2:	0a1b      	lsrs	r3, r3, #8
 80041a4:	f003 0301 	and.w	r3, r3, #1
 80041a8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80041aa:	4b99      	ldr	r3, [pc, #612]	; (8004410 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ae:	08db      	lsrs	r3, r3, #3
 80041b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	fb02 f303 	mul.w	r3, r2, r3
 80041ba:	ee07 3a90 	vmov	s15, r3
 80041be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f000 8111 	beq.w	80043f0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	f000 8083 	beq.w	80042dc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	2b02      	cmp	r3, #2
 80041da:	f200 80a1 	bhi.w	8004320 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d003      	beq.n	80041ec <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d056      	beq.n	8004298 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80041ea:	e099      	b.n	8004320 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80041ec:	4b88      	ldr	r3, [pc, #544]	; (8004410 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0320 	and.w	r3, r3, #32
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d02d      	beq.n	8004254 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80041f8:	4b85      	ldr	r3, [pc, #532]	; (8004410 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	08db      	lsrs	r3, r3, #3
 80041fe:	f003 0303 	and.w	r3, r3, #3
 8004202:	4a84      	ldr	r2, [pc, #528]	; (8004414 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004204:	fa22 f303 	lsr.w	r3, r2, r3
 8004208:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	ee07 3a90 	vmov	s15, r3
 8004210:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	ee07 3a90 	vmov	s15, r3
 800421a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800421e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004222:	4b7b      	ldr	r3, [pc, #492]	; (8004410 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800422a:	ee07 3a90 	vmov	s15, r3
 800422e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004232:	ed97 6a03 	vldr	s12, [r7, #12]
 8004236:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004418 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800423a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800423e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004242:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800424a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800424e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004252:	e087      	b.n	8004364 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	ee07 3a90 	vmov	s15, r3
 800425a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800425e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800441c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004266:	4b6a      	ldr	r3, [pc, #424]	; (8004410 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800426e:	ee07 3a90 	vmov	s15, r3
 8004272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004276:	ed97 6a03 	vldr	s12, [r7, #12]
 800427a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004418 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800427e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004286:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800428a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800428e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004292:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004296:	e065      	b.n	8004364 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	ee07 3a90 	vmov	s15, r3
 800429e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042a2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004420 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80042a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042aa:	4b59      	ldr	r3, [pc, #356]	; (8004410 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042b2:	ee07 3a90 	vmov	s15, r3
 80042b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80042be:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004418 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80042c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80042da:	e043      	b.n	8004364 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	ee07 3a90 	vmov	s15, r3
 80042e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042e6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004424 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80042ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042ee:	4b48      	ldr	r3, [pc, #288]	; (8004410 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042f6:	ee07 3a90 	vmov	s15, r3
 80042fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004302:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004418 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800430a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800430e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800431a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800431e:	e021      	b.n	8004364 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	ee07 3a90 	vmov	s15, r3
 8004326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800432a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004420 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800432e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004332:	4b37      	ldr	r3, [pc, #220]	; (8004410 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800433a:	ee07 3a90 	vmov	s15, r3
 800433e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004342:	ed97 6a03 	vldr	s12, [r7, #12]
 8004346:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004418 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800434a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800434e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004352:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800435a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800435e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004362:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004364:	4b2a      	ldr	r3, [pc, #168]	; (8004410 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004368:	0a5b      	lsrs	r3, r3, #9
 800436a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800436e:	ee07 3a90 	vmov	s15, r3
 8004372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004376:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800437a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800437e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004382:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004386:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800438a:	ee17 2a90 	vmov	r2, s15
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004392:	4b1f      	ldr	r3, [pc, #124]	; (8004410 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004396:	0c1b      	lsrs	r3, r3, #16
 8004398:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800439c:	ee07 3a90 	vmov	s15, r3
 80043a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80043ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80043b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043b8:	ee17 2a90 	vmov	r2, s15
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80043c0:	4b13      	ldr	r3, [pc, #76]	; (8004410 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c4:	0e1b      	lsrs	r3, r3, #24
 80043c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043ca:	ee07 3a90 	vmov	s15, r3
 80043ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80043da:	edd7 6a07 	vldr	s13, [r7, #28]
 80043de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043e6:	ee17 2a90 	vmov	r2, s15
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80043ee:	e008      	b.n	8004402 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	609a      	str	r2, [r3, #8]
}
 8004402:	bf00      	nop
 8004404:	3724      	adds	r7, #36	; 0x24
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	58024400 	.word	0x58024400
 8004414:	03d09000 	.word	0x03d09000
 8004418:	46000000 	.word	0x46000000
 800441c:	4c742400 	.word	0x4c742400
 8004420:	4a742400 	.word	0x4a742400
 8004424:	4af42400 	.word	0x4af42400

08004428 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004432:	2300      	movs	r3, #0
 8004434:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004436:	4b53      	ldr	r3, [pc, #332]	; (8004584 <RCCEx_PLL2_Config+0x15c>)
 8004438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443a:	f003 0303 	and.w	r3, r3, #3
 800443e:	2b03      	cmp	r3, #3
 8004440:	d101      	bne.n	8004446 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e099      	b.n	800457a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004446:	4b4f      	ldr	r3, [pc, #316]	; (8004584 <RCCEx_PLL2_Config+0x15c>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a4e      	ldr	r2, [pc, #312]	; (8004584 <RCCEx_PLL2_Config+0x15c>)
 800444c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004450:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004452:	f7fc ff67 	bl	8001324 <HAL_GetTick>
 8004456:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004458:	e008      	b.n	800446c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800445a:	f7fc ff63 	bl	8001324 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	2b02      	cmp	r3, #2
 8004466:	d901      	bls.n	800446c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e086      	b.n	800457a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800446c:	4b45      	ldr	r3, [pc, #276]	; (8004584 <RCCEx_PLL2_Config+0x15c>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1f0      	bne.n	800445a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004478:	4b42      	ldr	r3, [pc, #264]	; (8004584 <RCCEx_PLL2_Config+0x15c>)
 800447a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	031b      	lsls	r3, r3, #12
 8004486:	493f      	ldr	r1, [pc, #252]	; (8004584 <RCCEx_PLL2_Config+0x15c>)
 8004488:	4313      	orrs	r3, r2
 800448a:	628b      	str	r3, [r1, #40]	; 0x28
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	3b01      	subs	r3, #1
 8004492:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	3b01      	subs	r3, #1
 800449c:	025b      	lsls	r3, r3, #9
 800449e:	b29b      	uxth	r3, r3
 80044a0:	431a      	orrs	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	3b01      	subs	r3, #1
 80044a8:	041b      	lsls	r3, r3, #16
 80044aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80044ae:	431a      	orrs	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	3b01      	subs	r3, #1
 80044b6:	061b      	lsls	r3, r3, #24
 80044b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80044bc:	4931      	ldr	r1, [pc, #196]	; (8004584 <RCCEx_PLL2_Config+0x15c>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80044c2:	4b30      	ldr	r3, [pc, #192]	; (8004584 <RCCEx_PLL2_Config+0x15c>)
 80044c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	492d      	ldr	r1, [pc, #180]	; (8004584 <RCCEx_PLL2_Config+0x15c>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80044d4:	4b2b      	ldr	r3, [pc, #172]	; (8004584 <RCCEx_PLL2_Config+0x15c>)
 80044d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d8:	f023 0220 	bic.w	r2, r3, #32
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	4928      	ldr	r1, [pc, #160]	; (8004584 <RCCEx_PLL2_Config+0x15c>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80044e6:	4b27      	ldr	r3, [pc, #156]	; (8004584 <RCCEx_PLL2_Config+0x15c>)
 80044e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ea:	4a26      	ldr	r2, [pc, #152]	; (8004584 <RCCEx_PLL2_Config+0x15c>)
 80044ec:	f023 0310 	bic.w	r3, r3, #16
 80044f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80044f2:	4b24      	ldr	r3, [pc, #144]	; (8004584 <RCCEx_PLL2_Config+0x15c>)
 80044f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044f6:	4b24      	ldr	r3, [pc, #144]	; (8004588 <RCCEx_PLL2_Config+0x160>)
 80044f8:	4013      	ands	r3, r2
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	69d2      	ldr	r2, [r2, #28]
 80044fe:	00d2      	lsls	r2, r2, #3
 8004500:	4920      	ldr	r1, [pc, #128]	; (8004584 <RCCEx_PLL2_Config+0x15c>)
 8004502:	4313      	orrs	r3, r2
 8004504:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004506:	4b1f      	ldr	r3, [pc, #124]	; (8004584 <RCCEx_PLL2_Config+0x15c>)
 8004508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450a:	4a1e      	ldr	r2, [pc, #120]	; (8004584 <RCCEx_PLL2_Config+0x15c>)
 800450c:	f043 0310 	orr.w	r3, r3, #16
 8004510:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d106      	bne.n	8004526 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004518:	4b1a      	ldr	r3, [pc, #104]	; (8004584 <RCCEx_PLL2_Config+0x15c>)
 800451a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451c:	4a19      	ldr	r2, [pc, #100]	; (8004584 <RCCEx_PLL2_Config+0x15c>)
 800451e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004522:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004524:	e00f      	b.n	8004546 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d106      	bne.n	800453a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800452c:	4b15      	ldr	r3, [pc, #84]	; (8004584 <RCCEx_PLL2_Config+0x15c>)
 800452e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004530:	4a14      	ldr	r2, [pc, #80]	; (8004584 <RCCEx_PLL2_Config+0x15c>)
 8004532:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004536:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004538:	e005      	b.n	8004546 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800453a:	4b12      	ldr	r3, [pc, #72]	; (8004584 <RCCEx_PLL2_Config+0x15c>)
 800453c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453e:	4a11      	ldr	r2, [pc, #68]	; (8004584 <RCCEx_PLL2_Config+0x15c>)
 8004540:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004544:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004546:	4b0f      	ldr	r3, [pc, #60]	; (8004584 <RCCEx_PLL2_Config+0x15c>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a0e      	ldr	r2, [pc, #56]	; (8004584 <RCCEx_PLL2_Config+0x15c>)
 800454c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004550:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004552:	f7fc fee7 	bl	8001324 <HAL_GetTick>
 8004556:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004558:	e008      	b.n	800456c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800455a:	f7fc fee3 	bl	8001324 <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	2b02      	cmp	r3, #2
 8004566:	d901      	bls.n	800456c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e006      	b.n	800457a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800456c:	4b05      	ldr	r3, [pc, #20]	; (8004584 <RCCEx_PLL2_Config+0x15c>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d0f0      	beq.n	800455a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004578:	7bfb      	ldrb	r3, [r7, #15]
}
 800457a:	4618      	mov	r0, r3
 800457c:	3710      	adds	r7, #16
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	58024400 	.word	0x58024400
 8004588:	ffff0007 	.word	0xffff0007

0800458c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004596:	2300      	movs	r3, #0
 8004598:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800459a:	4b53      	ldr	r3, [pc, #332]	; (80046e8 <RCCEx_PLL3_Config+0x15c>)
 800459c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459e:	f003 0303 	and.w	r3, r3, #3
 80045a2:	2b03      	cmp	r3, #3
 80045a4:	d101      	bne.n	80045aa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e099      	b.n	80046de <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80045aa:	4b4f      	ldr	r3, [pc, #316]	; (80046e8 <RCCEx_PLL3_Config+0x15c>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a4e      	ldr	r2, [pc, #312]	; (80046e8 <RCCEx_PLL3_Config+0x15c>)
 80045b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045b6:	f7fc feb5 	bl	8001324 <HAL_GetTick>
 80045ba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80045bc:	e008      	b.n	80045d0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80045be:	f7fc feb1 	bl	8001324 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d901      	bls.n	80045d0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e086      	b.n	80046de <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80045d0:	4b45      	ldr	r3, [pc, #276]	; (80046e8 <RCCEx_PLL3_Config+0x15c>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d1f0      	bne.n	80045be <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80045dc:	4b42      	ldr	r3, [pc, #264]	; (80046e8 <RCCEx_PLL3_Config+0x15c>)
 80045de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	051b      	lsls	r3, r3, #20
 80045ea:	493f      	ldr	r1, [pc, #252]	; (80046e8 <RCCEx_PLL3_Config+0x15c>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	628b      	str	r3, [r1, #40]	; 0x28
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	3b01      	subs	r3, #1
 80045f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	3b01      	subs	r3, #1
 8004600:	025b      	lsls	r3, r3, #9
 8004602:	b29b      	uxth	r3, r3
 8004604:	431a      	orrs	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	3b01      	subs	r3, #1
 800460c:	041b      	lsls	r3, r3, #16
 800460e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004612:	431a      	orrs	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	3b01      	subs	r3, #1
 800461a:	061b      	lsls	r3, r3, #24
 800461c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004620:	4931      	ldr	r1, [pc, #196]	; (80046e8 <RCCEx_PLL3_Config+0x15c>)
 8004622:	4313      	orrs	r3, r2
 8004624:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004626:	4b30      	ldr	r3, [pc, #192]	; (80046e8 <RCCEx_PLL3_Config+0x15c>)
 8004628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	492d      	ldr	r1, [pc, #180]	; (80046e8 <RCCEx_PLL3_Config+0x15c>)
 8004634:	4313      	orrs	r3, r2
 8004636:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004638:	4b2b      	ldr	r3, [pc, #172]	; (80046e8 <RCCEx_PLL3_Config+0x15c>)
 800463a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	4928      	ldr	r1, [pc, #160]	; (80046e8 <RCCEx_PLL3_Config+0x15c>)
 8004646:	4313      	orrs	r3, r2
 8004648:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800464a:	4b27      	ldr	r3, [pc, #156]	; (80046e8 <RCCEx_PLL3_Config+0x15c>)
 800464c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464e:	4a26      	ldr	r2, [pc, #152]	; (80046e8 <RCCEx_PLL3_Config+0x15c>)
 8004650:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004654:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004656:	4b24      	ldr	r3, [pc, #144]	; (80046e8 <RCCEx_PLL3_Config+0x15c>)
 8004658:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800465a:	4b24      	ldr	r3, [pc, #144]	; (80046ec <RCCEx_PLL3_Config+0x160>)
 800465c:	4013      	ands	r3, r2
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	69d2      	ldr	r2, [r2, #28]
 8004662:	00d2      	lsls	r2, r2, #3
 8004664:	4920      	ldr	r1, [pc, #128]	; (80046e8 <RCCEx_PLL3_Config+0x15c>)
 8004666:	4313      	orrs	r3, r2
 8004668:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800466a:	4b1f      	ldr	r3, [pc, #124]	; (80046e8 <RCCEx_PLL3_Config+0x15c>)
 800466c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466e:	4a1e      	ldr	r2, [pc, #120]	; (80046e8 <RCCEx_PLL3_Config+0x15c>)
 8004670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004674:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d106      	bne.n	800468a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800467c:	4b1a      	ldr	r3, [pc, #104]	; (80046e8 <RCCEx_PLL3_Config+0x15c>)
 800467e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004680:	4a19      	ldr	r2, [pc, #100]	; (80046e8 <RCCEx_PLL3_Config+0x15c>)
 8004682:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004686:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004688:	e00f      	b.n	80046aa <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d106      	bne.n	800469e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004690:	4b15      	ldr	r3, [pc, #84]	; (80046e8 <RCCEx_PLL3_Config+0x15c>)
 8004692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004694:	4a14      	ldr	r2, [pc, #80]	; (80046e8 <RCCEx_PLL3_Config+0x15c>)
 8004696:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800469a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800469c:	e005      	b.n	80046aa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800469e:	4b12      	ldr	r3, [pc, #72]	; (80046e8 <RCCEx_PLL3_Config+0x15c>)
 80046a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a2:	4a11      	ldr	r2, [pc, #68]	; (80046e8 <RCCEx_PLL3_Config+0x15c>)
 80046a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80046aa:	4b0f      	ldr	r3, [pc, #60]	; (80046e8 <RCCEx_PLL3_Config+0x15c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a0e      	ldr	r2, [pc, #56]	; (80046e8 <RCCEx_PLL3_Config+0x15c>)
 80046b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046b6:	f7fc fe35 	bl	8001324 <HAL_GetTick>
 80046ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80046bc:	e008      	b.n	80046d0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80046be:	f7fc fe31 	bl	8001324 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d901      	bls.n	80046d0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e006      	b.n	80046de <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80046d0:	4b05      	ldr	r3, [pc, #20]	; (80046e8 <RCCEx_PLL3_Config+0x15c>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d0f0      	beq.n	80046be <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80046dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	58024400 	.word	0x58024400
 80046ec:	ffff0007 	.word	0xffff0007

080046f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e049      	b.n	8004796 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d106      	bne.n	800471c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 f841 	bl	800479e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2202      	movs	r2, #2
 8004720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	3304      	adds	r3, #4
 800472c:	4619      	mov	r1, r3
 800472e:	4610      	mov	r0, r2
 8004730:	f000 fa0e 	bl	8004b50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3708      	adds	r7, #8
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800479e:	b480      	push	{r7}
 80047a0:	b083      	sub	sp, #12
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80047a6:	bf00      	nop
 80047a8:	370c      	adds	r7, #12
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
	...

080047b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d001      	beq.n	80047cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e05e      	b.n	800488a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2202      	movs	r2, #2
 80047d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68da      	ldr	r2, [r3, #12]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f042 0201 	orr.w	r2, r2, #1
 80047e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a2b      	ldr	r2, [pc, #172]	; (8004898 <HAL_TIM_Base_Start_IT+0xe4>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d02c      	beq.n	8004848 <HAL_TIM_Base_Start_IT+0x94>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047f6:	d027      	beq.n	8004848 <HAL_TIM_Base_Start_IT+0x94>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a27      	ldr	r2, [pc, #156]	; (800489c <HAL_TIM_Base_Start_IT+0xe8>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d022      	beq.n	8004848 <HAL_TIM_Base_Start_IT+0x94>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a26      	ldr	r2, [pc, #152]	; (80048a0 <HAL_TIM_Base_Start_IT+0xec>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d01d      	beq.n	8004848 <HAL_TIM_Base_Start_IT+0x94>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a24      	ldr	r2, [pc, #144]	; (80048a4 <HAL_TIM_Base_Start_IT+0xf0>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d018      	beq.n	8004848 <HAL_TIM_Base_Start_IT+0x94>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a23      	ldr	r2, [pc, #140]	; (80048a8 <HAL_TIM_Base_Start_IT+0xf4>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d013      	beq.n	8004848 <HAL_TIM_Base_Start_IT+0x94>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a21      	ldr	r2, [pc, #132]	; (80048ac <HAL_TIM_Base_Start_IT+0xf8>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d00e      	beq.n	8004848 <HAL_TIM_Base_Start_IT+0x94>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a20      	ldr	r2, [pc, #128]	; (80048b0 <HAL_TIM_Base_Start_IT+0xfc>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d009      	beq.n	8004848 <HAL_TIM_Base_Start_IT+0x94>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a1e      	ldr	r2, [pc, #120]	; (80048b4 <HAL_TIM_Base_Start_IT+0x100>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d004      	beq.n	8004848 <HAL_TIM_Base_Start_IT+0x94>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a1d      	ldr	r2, [pc, #116]	; (80048b8 <HAL_TIM_Base_Start_IT+0x104>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d115      	bne.n	8004874 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	689a      	ldr	r2, [r3, #8]
 800484e:	4b1b      	ldr	r3, [pc, #108]	; (80048bc <HAL_TIM_Base_Start_IT+0x108>)
 8004850:	4013      	ands	r3, r2
 8004852:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2b06      	cmp	r3, #6
 8004858:	d015      	beq.n	8004886 <HAL_TIM_Base_Start_IT+0xd2>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004860:	d011      	beq.n	8004886 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f042 0201 	orr.w	r2, r2, #1
 8004870:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004872:	e008      	b.n	8004886 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f042 0201 	orr.w	r2, r2, #1
 8004882:	601a      	str	r2, [r3, #0]
 8004884:	e000      	b.n	8004888 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004886:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3714      	adds	r7, #20
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	40010000 	.word	0x40010000
 800489c:	40000400 	.word	0x40000400
 80048a0:	40000800 	.word	0x40000800
 80048a4:	40000c00 	.word	0x40000c00
 80048a8:	40010400 	.word	0x40010400
 80048ac:	40001800 	.word	0x40001800
 80048b0:	40014000 	.word	0x40014000
 80048b4:	4000e000 	.word	0x4000e000
 80048b8:	4000e400 	.word	0x4000e400
 80048bc:	00010007 	.word	0x00010007

080048c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d122      	bne.n	800491c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f003 0302 	and.w	r3, r3, #2
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d11b      	bne.n	800491c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f06f 0202 	mvn.w	r2, #2
 80048ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	f003 0303 	and.w	r3, r3, #3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d003      	beq.n	800490a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f905 	bl	8004b12 <HAL_TIM_IC_CaptureCallback>
 8004908:	e005      	b.n	8004916 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f8f7 	bl	8004afe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 f908 	bl	8004b26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	f003 0304 	and.w	r3, r3, #4
 8004926:	2b04      	cmp	r3, #4
 8004928:	d122      	bne.n	8004970 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	f003 0304 	and.w	r3, r3, #4
 8004934:	2b04      	cmp	r3, #4
 8004936:	d11b      	bne.n	8004970 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f06f 0204 	mvn.w	r2, #4
 8004940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2202      	movs	r2, #2
 8004946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004952:	2b00      	cmp	r3, #0
 8004954:	d003      	beq.n	800495e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 f8db 	bl	8004b12 <HAL_TIM_IC_CaptureCallback>
 800495c:	e005      	b.n	800496a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 f8cd 	bl	8004afe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 f8de 	bl	8004b26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	f003 0308 	and.w	r3, r3, #8
 800497a:	2b08      	cmp	r3, #8
 800497c:	d122      	bne.n	80049c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	f003 0308 	and.w	r3, r3, #8
 8004988:	2b08      	cmp	r3, #8
 800498a:	d11b      	bne.n	80049c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f06f 0208 	mvn.w	r2, #8
 8004994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2204      	movs	r2, #4
 800499a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	69db      	ldr	r3, [r3, #28]
 80049a2:	f003 0303 	and.w	r3, r3, #3
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d003      	beq.n	80049b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 f8b1 	bl	8004b12 <HAL_TIM_IC_CaptureCallback>
 80049b0:	e005      	b.n	80049be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f8a3 	bl	8004afe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 f8b4 	bl	8004b26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	f003 0310 	and.w	r3, r3, #16
 80049ce:	2b10      	cmp	r3, #16
 80049d0:	d122      	bne.n	8004a18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	f003 0310 	and.w	r3, r3, #16
 80049dc:	2b10      	cmp	r3, #16
 80049de:	d11b      	bne.n	8004a18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f06f 0210 	mvn.w	r2, #16
 80049e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2208      	movs	r2, #8
 80049ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	69db      	ldr	r3, [r3, #28]
 80049f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d003      	beq.n	8004a06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f887 	bl	8004b12 <HAL_TIM_IC_CaptureCallback>
 8004a04:	e005      	b.n	8004a12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f879 	bl	8004afe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 f88a 	bl	8004b26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	f003 0301 	and.w	r3, r3, #1
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d10e      	bne.n	8004a44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d107      	bne.n	8004a44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f06f 0201 	mvn.w	r2, #1
 8004a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f7fc f98c 	bl	8000d5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a4e:	2b80      	cmp	r3, #128	; 0x80
 8004a50:	d10e      	bne.n	8004a70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a5c:	2b80      	cmp	r3, #128	; 0x80
 8004a5e:	d107      	bne.n	8004a70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 f920 	bl	8004cb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a7e:	d10e      	bne.n	8004a9e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a8a:	2b80      	cmp	r3, #128	; 0x80
 8004a8c:	d107      	bne.n	8004a9e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 f913 	bl	8004cc4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa8:	2b40      	cmp	r3, #64	; 0x40
 8004aaa:	d10e      	bne.n	8004aca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab6:	2b40      	cmp	r3, #64	; 0x40
 8004ab8:	d107      	bne.n	8004aca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ac2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 f838 	bl	8004b3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	f003 0320 	and.w	r3, r3, #32
 8004ad4:	2b20      	cmp	r3, #32
 8004ad6:	d10e      	bne.n	8004af6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	f003 0320 	and.w	r3, r3, #32
 8004ae2:	2b20      	cmp	r3, #32
 8004ae4:	d107      	bne.n	8004af6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f06f 0220 	mvn.w	r2, #32
 8004aee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 f8d3 	bl	8004c9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004af6:	bf00      	nop
 8004af8:	3708      	adds	r7, #8
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004afe:	b480      	push	{r7}
 8004b00:	b083      	sub	sp, #12
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b06:	bf00      	nop
 8004b08:	370c      	adds	r7, #12
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr

08004b12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b12:	b480      	push	{r7}
 8004b14:	b083      	sub	sp, #12
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b1a:	bf00      	nop
 8004b1c:	370c      	adds	r7, #12
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr

08004b26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b26:	b480      	push	{r7}
 8004b28:	b083      	sub	sp, #12
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b2e:	bf00      	nop
 8004b30:	370c      	adds	r7, #12
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr

08004b3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b083      	sub	sp, #12
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b42:	bf00      	nop
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
	...

08004b50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a44      	ldr	r2, [pc, #272]	; (8004c74 <TIM_Base_SetConfig+0x124>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d013      	beq.n	8004b90 <TIM_Base_SetConfig+0x40>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b6e:	d00f      	beq.n	8004b90 <TIM_Base_SetConfig+0x40>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a41      	ldr	r2, [pc, #260]	; (8004c78 <TIM_Base_SetConfig+0x128>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d00b      	beq.n	8004b90 <TIM_Base_SetConfig+0x40>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a40      	ldr	r2, [pc, #256]	; (8004c7c <TIM_Base_SetConfig+0x12c>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d007      	beq.n	8004b90 <TIM_Base_SetConfig+0x40>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a3f      	ldr	r2, [pc, #252]	; (8004c80 <TIM_Base_SetConfig+0x130>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d003      	beq.n	8004b90 <TIM_Base_SetConfig+0x40>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a3e      	ldr	r2, [pc, #248]	; (8004c84 <TIM_Base_SetConfig+0x134>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d108      	bne.n	8004ba2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a33      	ldr	r2, [pc, #204]	; (8004c74 <TIM_Base_SetConfig+0x124>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d027      	beq.n	8004bfa <TIM_Base_SetConfig+0xaa>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bb0:	d023      	beq.n	8004bfa <TIM_Base_SetConfig+0xaa>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a30      	ldr	r2, [pc, #192]	; (8004c78 <TIM_Base_SetConfig+0x128>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d01f      	beq.n	8004bfa <TIM_Base_SetConfig+0xaa>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a2f      	ldr	r2, [pc, #188]	; (8004c7c <TIM_Base_SetConfig+0x12c>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d01b      	beq.n	8004bfa <TIM_Base_SetConfig+0xaa>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a2e      	ldr	r2, [pc, #184]	; (8004c80 <TIM_Base_SetConfig+0x130>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d017      	beq.n	8004bfa <TIM_Base_SetConfig+0xaa>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a2d      	ldr	r2, [pc, #180]	; (8004c84 <TIM_Base_SetConfig+0x134>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d013      	beq.n	8004bfa <TIM_Base_SetConfig+0xaa>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a2c      	ldr	r2, [pc, #176]	; (8004c88 <TIM_Base_SetConfig+0x138>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d00f      	beq.n	8004bfa <TIM_Base_SetConfig+0xaa>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a2b      	ldr	r2, [pc, #172]	; (8004c8c <TIM_Base_SetConfig+0x13c>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d00b      	beq.n	8004bfa <TIM_Base_SetConfig+0xaa>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a2a      	ldr	r2, [pc, #168]	; (8004c90 <TIM_Base_SetConfig+0x140>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d007      	beq.n	8004bfa <TIM_Base_SetConfig+0xaa>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a29      	ldr	r2, [pc, #164]	; (8004c94 <TIM_Base_SetConfig+0x144>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d003      	beq.n	8004bfa <TIM_Base_SetConfig+0xaa>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a28      	ldr	r2, [pc, #160]	; (8004c98 <TIM_Base_SetConfig+0x148>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d108      	bne.n	8004c0c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	689a      	ldr	r2, [r3, #8]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a10      	ldr	r2, [pc, #64]	; (8004c74 <TIM_Base_SetConfig+0x124>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d00f      	beq.n	8004c58 <TIM_Base_SetConfig+0x108>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a12      	ldr	r2, [pc, #72]	; (8004c84 <TIM_Base_SetConfig+0x134>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d00b      	beq.n	8004c58 <TIM_Base_SetConfig+0x108>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a11      	ldr	r2, [pc, #68]	; (8004c88 <TIM_Base_SetConfig+0x138>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d007      	beq.n	8004c58 <TIM_Base_SetConfig+0x108>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a10      	ldr	r2, [pc, #64]	; (8004c8c <TIM_Base_SetConfig+0x13c>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d003      	beq.n	8004c58 <TIM_Base_SetConfig+0x108>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a0f      	ldr	r2, [pc, #60]	; (8004c90 <TIM_Base_SetConfig+0x140>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d103      	bne.n	8004c60 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	691a      	ldr	r2, [r3, #16]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	615a      	str	r2, [r3, #20]
}
 8004c66:	bf00      	nop
 8004c68:	3714      	adds	r7, #20
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	40010000 	.word	0x40010000
 8004c78:	40000400 	.word	0x40000400
 8004c7c:	40000800 	.word	0x40000800
 8004c80:	40000c00 	.word	0x40000c00
 8004c84:	40010400 	.word	0x40010400
 8004c88:	40014000 	.word	0x40014000
 8004c8c:	40014400 	.word	0x40014400
 8004c90:	40014800 	.word	0x40014800
 8004c94:	4000e000 	.word	0x4000e000
 8004c98:	4000e400 	.word	0x4000e400

08004c9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cb8:	bf00      	nop
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d101      	bne.n	8004cea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e042      	b.n	8004d70 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d106      	bne.n	8004d02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f7fc f92d 	bl	8000f5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2224      	movs	r2, #36	; 0x24
 8004d06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 0201 	bic.w	r2, r2, #1
 8004d18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 f82c 	bl	8004d78 <UART_SetConfig>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d101      	bne.n	8004d2a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e022      	b.n	8004d70 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d002      	beq.n	8004d38 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 fe7e 	bl	8005a34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	685a      	ldr	r2, [r3, #4]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	689a      	ldr	r2, [r3, #8]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f042 0201 	orr.w	r2, r2, #1
 8004d66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 ff05 	bl	8005b78 <UART_CheckIdleState>
 8004d6e:	4603      	mov	r3, r0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3708      	adds	r7, #8
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d78:	b5b0      	push	{r4, r5, r7, lr}
 8004d7a:	b08e      	sub	sp, #56	; 0x38
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d80:	2300      	movs	r3, #0
 8004d82:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	689a      	ldr	r2, [r3, #8]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	431a      	orrs	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	431a      	orrs	r2, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	69db      	ldr	r3, [r3, #28]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	4bbf      	ldr	r3, [pc, #764]	; (80050a4 <UART_SetConfig+0x32c>)
 8004da6:	4013      	ands	r3, r2
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	6812      	ldr	r2, [r2, #0]
 8004dac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004dae:	430b      	orrs	r3, r1
 8004db0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	68da      	ldr	r2, [r3, #12]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	699b      	ldr	r3, [r3, #24]
 8004dcc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4ab5      	ldr	r2, [pc, #724]	; (80050a8 <UART_SetConfig+0x330>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d004      	beq.n	8004de2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a1b      	ldr	r3, [r3, #32]
 8004ddc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dde:	4313      	orrs	r3, r2
 8004de0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	689a      	ldr	r2, [r3, #8]
 8004de8:	4bb0      	ldr	r3, [pc, #704]	; (80050ac <UART_SetConfig+0x334>)
 8004dea:	4013      	ands	r3, r2
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	6812      	ldr	r2, [r2, #0]
 8004df0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004df2:	430b      	orrs	r3, r1
 8004df4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfc:	f023 010f 	bic.w	r1, r3, #15
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4aa7      	ldr	r2, [pc, #668]	; (80050b0 <UART_SetConfig+0x338>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d176      	bne.n	8004f04 <UART_SetConfig+0x18c>
 8004e16:	4ba7      	ldr	r3, [pc, #668]	; (80050b4 <UART_SetConfig+0x33c>)
 8004e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e1e:	2b28      	cmp	r3, #40	; 0x28
 8004e20:	d86c      	bhi.n	8004efc <UART_SetConfig+0x184>
 8004e22:	a201      	add	r2, pc, #4	; (adr r2, 8004e28 <UART_SetConfig+0xb0>)
 8004e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e28:	08004ecd 	.word	0x08004ecd
 8004e2c:	08004efd 	.word	0x08004efd
 8004e30:	08004efd 	.word	0x08004efd
 8004e34:	08004efd 	.word	0x08004efd
 8004e38:	08004efd 	.word	0x08004efd
 8004e3c:	08004efd 	.word	0x08004efd
 8004e40:	08004efd 	.word	0x08004efd
 8004e44:	08004efd 	.word	0x08004efd
 8004e48:	08004ed5 	.word	0x08004ed5
 8004e4c:	08004efd 	.word	0x08004efd
 8004e50:	08004efd 	.word	0x08004efd
 8004e54:	08004efd 	.word	0x08004efd
 8004e58:	08004efd 	.word	0x08004efd
 8004e5c:	08004efd 	.word	0x08004efd
 8004e60:	08004efd 	.word	0x08004efd
 8004e64:	08004efd 	.word	0x08004efd
 8004e68:	08004edd 	.word	0x08004edd
 8004e6c:	08004efd 	.word	0x08004efd
 8004e70:	08004efd 	.word	0x08004efd
 8004e74:	08004efd 	.word	0x08004efd
 8004e78:	08004efd 	.word	0x08004efd
 8004e7c:	08004efd 	.word	0x08004efd
 8004e80:	08004efd 	.word	0x08004efd
 8004e84:	08004efd 	.word	0x08004efd
 8004e88:	08004ee5 	.word	0x08004ee5
 8004e8c:	08004efd 	.word	0x08004efd
 8004e90:	08004efd 	.word	0x08004efd
 8004e94:	08004efd 	.word	0x08004efd
 8004e98:	08004efd 	.word	0x08004efd
 8004e9c:	08004efd 	.word	0x08004efd
 8004ea0:	08004efd 	.word	0x08004efd
 8004ea4:	08004efd 	.word	0x08004efd
 8004ea8:	08004eed 	.word	0x08004eed
 8004eac:	08004efd 	.word	0x08004efd
 8004eb0:	08004efd 	.word	0x08004efd
 8004eb4:	08004efd 	.word	0x08004efd
 8004eb8:	08004efd 	.word	0x08004efd
 8004ebc:	08004efd 	.word	0x08004efd
 8004ec0:	08004efd 	.word	0x08004efd
 8004ec4:	08004efd 	.word	0x08004efd
 8004ec8:	08004ef5 	.word	0x08004ef5
 8004ecc:	2301      	movs	r3, #1
 8004ece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ed2:	e326      	b.n	8005522 <UART_SetConfig+0x7aa>
 8004ed4:	2304      	movs	r3, #4
 8004ed6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004eda:	e322      	b.n	8005522 <UART_SetConfig+0x7aa>
 8004edc:	2308      	movs	r3, #8
 8004ede:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ee2:	e31e      	b.n	8005522 <UART_SetConfig+0x7aa>
 8004ee4:	2310      	movs	r3, #16
 8004ee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004eea:	e31a      	b.n	8005522 <UART_SetConfig+0x7aa>
 8004eec:	2320      	movs	r3, #32
 8004eee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ef2:	e316      	b.n	8005522 <UART_SetConfig+0x7aa>
 8004ef4:	2340      	movs	r3, #64	; 0x40
 8004ef6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004efa:	e312      	b.n	8005522 <UART_SetConfig+0x7aa>
 8004efc:	2380      	movs	r3, #128	; 0x80
 8004efe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f02:	e30e      	b.n	8005522 <UART_SetConfig+0x7aa>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a6b      	ldr	r2, [pc, #428]	; (80050b8 <UART_SetConfig+0x340>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d130      	bne.n	8004f70 <UART_SetConfig+0x1f8>
 8004f0e:	4b69      	ldr	r3, [pc, #420]	; (80050b4 <UART_SetConfig+0x33c>)
 8004f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f12:	f003 0307 	and.w	r3, r3, #7
 8004f16:	2b05      	cmp	r3, #5
 8004f18:	d826      	bhi.n	8004f68 <UART_SetConfig+0x1f0>
 8004f1a:	a201      	add	r2, pc, #4	; (adr r2, 8004f20 <UART_SetConfig+0x1a8>)
 8004f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f20:	08004f39 	.word	0x08004f39
 8004f24:	08004f41 	.word	0x08004f41
 8004f28:	08004f49 	.word	0x08004f49
 8004f2c:	08004f51 	.word	0x08004f51
 8004f30:	08004f59 	.word	0x08004f59
 8004f34:	08004f61 	.word	0x08004f61
 8004f38:	2300      	movs	r3, #0
 8004f3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f3e:	e2f0      	b.n	8005522 <UART_SetConfig+0x7aa>
 8004f40:	2304      	movs	r3, #4
 8004f42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f46:	e2ec      	b.n	8005522 <UART_SetConfig+0x7aa>
 8004f48:	2308      	movs	r3, #8
 8004f4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f4e:	e2e8      	b.n	8005522 <UART_SetConfig+0x7aa>
 8004f50:	2310      	movs	r3, #16
 8004f52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f56:	e2e4      	b.n	8005522 <UART_SetConfig+0x7aa>
 8004f58:	2320      	movs	r3, #32
 8004f5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f5e:	e2e0      	b.n	8005522 <UART_SetConfig+0x7aa>
 8004f60:	2340      	movs	r3, #64	; 0x40
 8004f62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f66:	e2dc      	b.n	8005522 <UART_SetConfig+0x7aa>
 8004f68:	2380      	movs	r3, #128	; 0x80
 8004f6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f6e:	e2d8      	b.n	8005522 <UART_SetConfig+0x7aa>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a51      	ldr	r2, [pc, #324]	; (80050bc <UART_SetConfig+0x344>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d130      	bne.n	8004fdc <UART_SetConfig+0x264>
 8004f7a:	4b4e      	ldr	r3, [pc, #312]	; (80050b4 <UART_SetConfig+0x33c>)
 8004f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f7e:	f003 0307 	and.w	r3, r3, #7
 8004f82:	2b05      	cmp	r3, #5
 8004f84:	d826      	bhi.n	8004fd4 <UART_SetConfig+0x25c>
 8004f86:	a201      	add	r2, pc, #4	; (adr r2, 8004f8c <UART_SetConfig+0x214>)
 8004f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f8c:	08004fa5 	.word	0x08004fa5
 8004f90:	08004fad 	.word	0x08004fad
 8004f94:	08004fb5 	.word	0x08004fb5
 8004f98:	08004fbd 	.word	0x08004fbd
 8004f9c:	08004fc5 	.word	0x08004fc5
 8004fa0:	08004fcd 	.word	0x08004fcd
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004faa:	e2ba      	b.n	8005522 <UART_SetConfig+0x7aa>
 8004fac:	2304      	movs	r3, #4
 8004fae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fb2:	e2b6      	b.n	8005522 <UART_SetConfig+0x7aa>
 8004fb4:	2308      	movs	r3, #8
 8004fb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fba:	e2b2      	b.n	8005522 <UART_SetConfig+0x7aa>
 8004fbc:	2310      	movs	r3, #16
 8004fbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fc2:	e2ae      	b.n	8005522 <UART_SetConfig+0x7aa>
 8004fc4:	2320      	movs	r3, #32
 8004fc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fca:	e2aa      	b.n	8005522 <UART_SetConfig+0x7aa>
 8004fcc:	2340      	movs	r3, #64	; 0x40
 8004fce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fd2:	e2a6      	b.n	8005522 <UART_SetConfig+0x7aa>
 8004fd4:	2380      	movs	r3, #128	; 0x80
 8004fd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fda:	e2a2      	b.n	8005522 <UART_SetConfig+0x7aa>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a37      	ldr	r2, [pc, #220]	; (80050c0 <UART_SetConfig+0x348>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d130      	bne.n	8005048 <UART_SetConfig+0x2d0>
 8004fe6:	4b33      	ldr	r3, [pc, #204]	; (80050b4 <UART_SetConfig+0x33c>)
 8004fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fea:	f003 0307 	and.w	r3, r3, #7
 8004fee:	2b05      	cmp	r3, #5
 8004ff0:	d826      	bhi.n	8005040 <UART_SetConfig+0x2c8>
 8004ff2:	a201      	add	r2, pc, #4	; (adr r2, 8004ff8 <UART_SetConfig+0x280>)
 8004ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff8:	08005011 	.word	0x08005011
 8004ffc:	08005019 	.word	0x08005019
 8005000:	08005021 	.word	0x08005021
 8005004:	08005029 	.word	0x08005029
 8005008:	08005031 	.word	0x08005031
 800500c:	08005039 	.word	0x08005039
 8005010:	2300      	movs	r3, #0
 8005012:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005016:	e284      	b.n	8005522 <UART_SetConfig+0x7aa>
 8005018:	2304      	movs	r3, #4
 800501a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800501e:	e280      	b.n	8005522 <UART_SetConfig+0x7aa>
 8005020:	2308      	movs	r3, #8
 8005022:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005026:	e27c      	b.n	8005522 <UART_SetConfig+0x7aa>
 8005028:	2310      	movs	r3, #16
 800502a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800502e:	e278      	b.n	8005522 <UART_SetConfig+0x7aa>
 8005030:	2320      	movs	r3, #32
 8005032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005036:	e274      	b.n	8005522 <UART_SetConfig+0x7aa>
 8005038:	2340      	movs	r3, #64	; 0x40
 800503a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800503e:	e270      	b.n	8005522 <UART_SetConfig+0x7aa>
 8005040:	2380      	movs	r3, #128	; 0x80
 8005042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005046:	e26c      	b.n	8005522 <UART_SetConfig+0x7aa>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a1d      	ldr	r2, [pc, #116]	; (80050c4 <UART_SetConfig+0x34c>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d142      	bne.n	80050d8 <UART_SetConfig+0x360>
 8005052:	4b18      	ldr	r3, [pc, #96]	; (80050b4 <UART_SetConfig+0x33c>)
 8005054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005056:	f003 0307 	and.w	r3, r3, #7
 800505a:	2b05      	cmp	r3, #5
 800505c:	d838      	bhi.n	80050d0 <UART_SetConfig+0x358>
 800505e:	a201      	add	r2, pc, #4	; (adr r2, 8005064 <UART_SetConfig+0x2ec>)
 8005060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005064:	0800507d 	.word	0x0800507d
 8005068:	08005085 	.word	0x08005085
 800506c:	0800508d 	.word	0x0800508d
 8005070:	08005095 	.word	0x08005095
 8005074:	0800509d 	.word	0x0800509d
 8005078:	080050c9 	.word	0x080050c9
 800507c:	2300      	movs	r3, #0
 800507e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005082:	e24e      	b.n	8005522 <UART_SetConfig+0x7aa>
 8005084:	2304      	movs	r3, #4
 8005086:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800508a:	e24a      	b.n	8005522 <UART_SetConfig+0x7aa>
 800508c:	2308      	movs	r3, #8
 800508e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005092:	e246      	b.n	8005522 <UART_SetConfig+0x7aa>
 8005094:	2310      	movs	r3, #16
 8005096:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800509a:	e242      	b.n	8005522 <UART_SetConfig+0x7aa>
 800509c:	2320      	movs	r3, #32
 800509e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050a2:	e23e      	b.n	8005522 <UART_SetConfig+0x7aa>
 80050a4:	cfff69f3 	.word	0xcfff69f3
 80050a8:	58000c00 	.word	0x58000c00
 80050ac:	11fff4ff 	.word	0x11fff4ff
 80050b0:	40011000 	.word	0x40011000
 80050b4:	58024400 	.word	0x58024400
 80050b8:	40004400 	.word	0x40004400
 80050bc:	40004800 	.word	0x40004800
 80050c0:	40004c00 	.word	0x40004c00
 80050c4:	40005000 	.word	0x40005000
 80050c8:	2340      	movs	r3, #64	; 0x40
 80050ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050ce:	e228      	b.n	8005522 <UART_SetConfig+0x7aa>
 80050d0:	2380      	movs	r3, #128	; 0x80
 80050d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050d6:	e224      	b.n	8005522 <UART_SetConfig+0x7aa>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4ab1      	ldr	r2, [pc, #708]	; (80053a4 <UART_SetConfig+0x62c>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d176      	bne.n	80051d0 <UART_SetConfig+0x458>
 80050e2:	4bb1      	ldr	r3, [pc, #708]	; (80053a8 <UART_SetConfig+0x630>)
 80050e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050ea:	2b28      	cmp	r3, #40	; 0x28
 80050ec:	d86c      	bhi.n	80051c8 <UART_SetConfig+0x450>
 80050ee:	a201      	add	r2, pc, #4	; (adr r2, 80050f4 <UART_SetConfig+0x37c>)
 80050f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f4:	08005199 	.word	0x08005199
 80050f8:	080051c9 	.word	0x080051c9
 80050fc:	080051c9 	.word	0x080051c9
 8005100:	080051c9 	.word	0x080051c9
 8005104:	080051c9 	.word	0x080051c9
 8005108:	080051c9 	.word	0x080051c9
 800510c:	080051c9 	.word	0x080051c9
 8005110:	080051c9 	.word	0x080051c9
 8005114:	080051a1 	.word	0x080051a1
 8005118:	080051c9 	.word	0x080051c9
 800511c:	080051c9 	.word	0x080051c9
 8005120:	080051c9 	.word	0x080051c9
 8005124:	080051c9 	.word	0x080051c9
 8005128:	080051c9 	.word	0x080051c9
 800512c:	080051c9 	.word	0x080051c9
 8005130:	080051c9 	.word	0x080051c9
 8005134:	080051a9 	.word	0x080051a9
 8005138:	080051c9 	.word	0x080051c9
 800513c:	080051c9 	.word	0x080051c9
 8005140:	080051c9 	.word	0x080051c9
 8005144:	080051c9 	.word	0x080051c9
 8005148:	080051c9 	.word	0x080051c9
 800514c:	080051c9 	.word	0x080051c9
 8005150:	080051c9 	.word	0x080051c9
 8005154:	080051b1 	.word	0x080051b1
 8005158:	080051c9 	.word	0x080051c9
 800515c:	080051c9 	.word	0x080051c9
 8005160:	080051c9 	.word	0x080051c9
 8005164:	080051c9 	.word	0x080051c9
 8005168:	080051c9 	.word	0x080051c9
 800516c:	080051c9 	.word	0x080051c9
 8005170:	080051c9 	.word	0x080051c9
 8005174:	080051b9 	.word	0x080051b9
 8005178:	080051c9 	.word	0x080051c9
 800517c:	080051c9 	.word	0x080051c9
 8005180:	080051c9 	.word	0x080051c9
 8005184:	080051c9 	.word	0x080051c9
 8005188:	080051c9 	.word	0x080051c9
 800518c:	080051c9 	.word	0x080051c9
 8005190:	080051c9 	.word	0x080051c9
 8005194:	080051c1 	.word	0x080051c1
 8005198:	2301      	movs	r3, #1
 800519a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800519e:	e1c0      	b.n	8005522 <UART_SetConfig+0x7aa>
 80051a0:	2304      	movs	r3, #4
 80051a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051a6:	e1bc      	b.n	8005522 <UART_SetConfig+0x7aa>
 80051a8:	2308      	movs	r3, #8
 80051aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051ae:	e1b8      	b.n	8005522 <UART_SetConfig+0x7aa>
 80051b0:	2310      	movs	r3, #16
 80051b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051b6:	e1b4      	b.n	8005522 <UART_SetConfig+0x7aa>
 80051b8:	2320      	movs	r3, #32
 80051ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051be:	e1b0      	b.n	8005522 <UART_SetConfig+0x7aa>
 80051c0:	2340      	movs	r3, #64	; 0x40
 80051c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051c6:	e1ac      	b.n	8005522 <UART_SetConfig+0x7aa>
 80051c8:	2380      	movs	r3, #128	; 0x80
 80051ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051ce:	e1a8      	b.n	8005522 <UART_SetConfig+0x7aa>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a75      	ldr	r2, [pc, #468]	; (80053ac <UART_SetConfig+0x634>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d130      	bne.n	800523c <UART_SetConfig+0x4c4>
 80051da:	4b73      	ldr	r3, [pc, #460]	; (80053a8 <UART_SetConfig+0x630>)
 80051dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051de:	f003 0307 	and.w	r3, r3, #7
 80051e2:	2b05      	cmp	r3, #5
 80051e4:	d826      	bhi.n	8005234 <UART_SetConfig+0x4bc>
 80051e6:	a201      	add	r2, pc, #4	; (adr r2, 80051ec <UART_SetConfig+0x474>)
 80051e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ec:	08005205 	.word	0x08005205
 80051f0:	0800520d 	.word	0x0800520d
 80051f4:	08005215 	.word	0x08005215
 80051f8:	0800521d 	.word	0x0800521d
 80051fc:	08005225 	.word	0x08005225
 8005200:	0800522d 	.word	0x0800522d
 8005204:	2300      	movs	r3, #0
 8005206:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800520a:	e18a      	b.n	8005522 <UART_SetConfig+0x7aa>
 800520c:	2304      	movs	r3, #4
 800520e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005212:	e186      	b.n	8005522 <UART_SetConfig+0x7aa>
 8005214:	2308      	movs	r3, #8
 8005216:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800521a:	e182      	b.n	8005522 <UART_SetConfig+0x7aa>
 800521c:	2310      	movs	r3, #16
 800521e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005222:	e17e      	b.n	8005522 <UART_SetConfig+0x7aa>
 8005224:	2320      	movs	r3, #32
 8005226:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800522a:	e17a      	b.n	8005522 <UART_SetConfig+0x7aa>
 800522c:	2340      	movs	r3, #64	; 0x40
 800522e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005232:	e176      	b.n	8005522 <UART_SetConfig+0x7aa>
 8005234:	2380      	movs	r3, #128	; 0x80
 8005236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800523a:	e172      	b.n	8005522 <UART_SetConfig+0x7aa>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a5b      	ldr	r2, [pc, #364]	; (80053b0 <UART_SetConfig+0x638>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d130      	bne.n	80052a8 <UART_SetConfig+0x530>
 8005246:	4b58      	ldr	r3, [pc, #352]	; (80053a8 <UART_SetConfig+0x630>)
 8005248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800524a:	f003 0307 	and.w	r3, r3, #7
 800524e:	2b05      	cmp	r3, #5
 8005250:	d826      	bhi.n	80052a0 <UART_SetConfig+0x528>
 8005252:	a201      	add	r2, pc, #4	; (adr r2, 8005258 <UART_SetConfig+0x4e0>)
 8005254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005258:	08005271 	.word	0x08005271
 800525c:	08005279 	.word	0x08005279
 8005260:	08005281 	.word	0x08005281
 8005264:	08005289 	.word	0x08005289
 8005268:	08005291 	.word	0x08005291
 800526c:	08005299 	.word	0x08005299
 8005270:	2300      	movs	r3, #0
 8005272:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005276:	e154      	b.n	8005522 <UART_SetConfig+0x7aa>
 8005278:	2304      	movs	r3, #4
 800527a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800527e:	e150      	b.n	8005522 <UART_SetConfig+0x7aa>
 8005280:	2308      	movs	r3, #8
 8005282:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005286:	e14c      	b.n	8005522 <UART_SetConfig+0x7aa>
 8005288:	2310      	movs	r3, #16
 800528a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800528e:	e148      	b.n	8005522 <UART_SetConfig+0x7aa>
 8005290:	2320      	movs	r3, #32
 8005292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005296:	e144      	b.n	8005522 <UART_SetConfig+0x7aa>
 8005298:	2340      	movs	r3, #64	; 0x40
 800529a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800529e:	e140      	b.n	8005522 <UART_SetConfig+0x7aa>
 80052a0:	2380      	movs	r3, #128	; 0x80
 80052a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052a6:	e13c      	b.n	8005522 <UART_SetConfig+0x7aa>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a41      	ldr	r2, [pc, #260]	; (80053b4 <UART_SetConfig+0x63c>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	f040 8082 	bne.w	80053b8 <UART_SetConfig+0x640>
 80052b4:	4b3c      	ldr	r3, [pc, #240]	; (80053a8 <UART_SetConfig+0x630>)
 80052b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052bc:	2b28      	cmp	r3, #40	; 0x28
 80052be:	d86d      	bhi.n	800539c <UART_SetConfig+0x624>
 80052c0:	a201      	add	r2, pc, #4	; (adr r2, 80052c8 <UART_SetConfig+0x550>)
 80052c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c6:	bf00      	nop
 80052c8:	0800536d 	.word	0x0800536d
 80052cc:	0800539d 	.word	0x0800539d
 80052d0:	0800539d 	.word	0x0800539d
 80052d4:	0800539d 	.word	0x0800539d
 80052d8:	0800539d 	.word	0x0800539d
 80052dc:	0800539d 	.word	0x0800539d
 80052e0:	0800539d 	.word	0x0800539d
 80052e4:	0800539d 	.word	0x0800539d
 80052e8:	08005375 	.word	0x08005375
 80052ec:	0800539d 	.word	0x0800539d
 80052f0:	0800539d 	.word	0x0800539d
 80052f4:	0800539d 	.word	0x0800539d
 80052f8:	0800539d 	.word	0x0800539d
 80052fc:	0800539d 	.word	0x0800539d
 8005300:	0800539d 	.word	0x0800539d
 8005304:	0800539d 	.word	0x0800539d
 8005308:	0800537d 	.word	0x0800537d
 800530c:	0800539d 	.word	0x0800539d
 8005310:	0800539d 	.word	0x0800539d
 8005314:	0800539d 	.word	0x0800539d
 8005318:	0800539d 	.word	0x0800539d
 800531c:	0800539d 	.word	0x0800539d
 8005320:	0800539d 	.word	0x0800539d
 8005324:	0800539d 	.word	0x0800539d
 8005328:	08005385 	.word	0x08005385
 800532c:	0800539d 	.word	0x0800539d
 8005330:	0800539d 	.word	0x0800539d
 8005334:	0800539d 	.word	0x0800539d
 8005338:	0800539d 	.word	0x0800539d
 800533c:	0800539d 	.word	0x0800539d
 8005340:	0800539d 	.word	0x0800539d
 8005344:	0800539d 	.word	0x0800539d
 8005348:	0800538d 	.word	0x0800538d
 800534c:	0800539d 	.word	0x0800539d
 8005350:	0800539d 	.word	0x0800539d
 8005354:	0800539d 	.word	0x0800539d
 8005358:	0800539d 	.word	0x0800539d
 800535c:	0800539d 	.word	0x0800539d
 8005360:	0800539d 	.word	0x0800539d
 8005364:	0800539d 	.word	0x0800539d
 8005368:	08005395 	.word	0x08005395
 800536c:	2301      	movs	r3, #1
 800536e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005372:	e0d6      	b.n	8005522 <UART_SetConfig+0x7aa>
 8005374:	2304      	movs	r3, #4
 8005376:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800537a:	e0d2      	b.n	8005522 <UART_SetConfig+0x7aa>
 800537c:	2308      	movs	r3, #8
 800537e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005382:	e0ce      	b.n	8005522 <UART_SetConfig+0x7aa>
 8005384:	2310      	movs	r3, #16
 8005386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800538a:	e0ca      	b.n	8005522 <UART_SetConfig+0x7aa>
 800538c:	2320      	movs	r3, #32
 800538e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005392:	e0c6      	b.n	8005522 <UART_SetConfig+0x7aa>
 8005394:	2340      	movs	r3, #64	; 0x40
 8005396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800539a:	e0c2      	b.n	8005522 <UART_SetConfig+0x7aa>
 800539c:	2380      	movs	r3, #128	; 0x80
 800539e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053a2:	e0be      	b.n	8005522 <UART_SetConfig+0x7aa>
 80053a4:	40011400 	.word	0x40011400
 80053a8:	58024400 	.word	0x58024400
 80053ac:	40007800 	.word	0x40007800
 80053b0:	40007c00 	.word	0x40007c00
 80053b4:	40011800 	.word	0x40011800
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4aad      	ldr	r2, [pc, #692]	; (8005674 <UART_SetConfig+0x8fc>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d176      	bne.n	80054b0 <UART_SetConfig+0x738>
 80053c2:	4bad      	ldr	r3, [pc, #692]	; (8005678 <UART_SetConfig+0x900>)
 80053c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053ca:	2b28      	cmp	r3, #40	; 0x28
 80053cc:	d86c      	bhi.n	80054a8 <UART_SetConfig+0x730>
 80053ce:	a201      	add	r2, pc, #4	; (adr r2, 80053d4 <UART_SetConfig+0x65c>)
 80053d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d4:	08005479 	.word	0x08005479
 80053d8:	080054a9 	.word	0x080054a9
 80053dc:	080054a9 	.word	0x080054a9
 80053e0:	080054a9 	.word	0x080054a9
 80053e4:	080054a9 	.word	0x080054a9
 80053e8:	080054a9 	.word	0x080054a9
 80053ec:	080054a9 	.word	0x080054a9
 80053f0:	080054a9 	.word	0x080054a9
 80053f4:	08005481 	.word	0x08005481
 80053f8:	080054a9 	.word	0x080054a9
 80053fc:	080054a9 	.word	0x080054a9
 8005400:	080054a9 	.word	0x080054a9
 8005404:	080054a9 	.word	0x080054a9
 8005408:	080054a9 	.word	0x080054a9
 800540c:	080054a9 	.word	0x080054a9
 8005410:	080054a9 	.word	0x080054a9
 8005414:	08005489 	.word	0x08005489
 8005418:	080054a9 	.word	0x080054a9
 800541c:	080054a9 	.word	0x080054a9
 8005420:	080054a9 	.word	0x080054a9
 8005424:	080054a9 	.word	0x080054a9
 8005428:	080054a9 	.word	0x080054a9
 800542c:	080054a9 	.word	0x080054a9
 8005430:	080054a9 	.word	0x080054a9
 8005434:	08005491 	.word	0x08005491
 8005438:	080054a9 	.word	0x080054a9
 800543c:	080054a9 	.word	0x080054a9
 8005440:	080054a9 	.word	0x080054a9
 8005444:	080054a9 	.word	0x080054a9
 8005448:	080054a9 	.word	0x080054a9
 800544c:	080054a9 	.word	0x080054a9
 8005450:	080054a9 	.word	0x080054a9
 8005454:	08005499 	.word	0x08005499
 8005458:	080054a9 	.word	0x080054a9
 800545c:	080054a9 	.word	0x080054a9
 8005460:	080054a9 	.word	0x080054a9
 8005464:	080054a9 	.word	0x080054a9
 8005468:	080054a9 	.word	0x080054a9
 800546c:	080054a9 	.word	0x080054a9
 8005470:	080054a9 	.word	0x080054a9
 8005474:	080054a1 	.word	0x080054a1
 8005478:	2301      	movs	r3, #1
 800547a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800547e:	e050      	b.n	8005522 <UART_SetConfig+0x7aa>
 8005480:	2304      	movs	r3, #4
 8005482:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005486:	e04c      	b.n	8005522 <UART_SetConfig+0x7aa>
 8005488:	2308      	movs	r3, #8
 800548a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800548e:	e048      	b.n	8005522 <UART_SetConfig+0x7aa>
 8005490:	2310      	movs	r3, #16
 8005492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005496:	e044      	b.n	8005522 <UART_SetConfig+0x7aa>
 8005498:	2320      	movs	r3, #32
 800549a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800549e:	e040      	b.n	8005522 <UART_SetConfig+0x7aa>
 80054a0:	2340      	movs	r3, #64	; 0x40
 80054a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054a6:	e03c      	b.n	8005522 <UART_SetConfig+0x7aa>
 80054a8:	2380      	movs	r3, #128	; 0x80
 80054aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054ae:	e038      	b.n	8005522 <UART_SetConfig+0x7aa>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a71      	ldr	r2, [pc, #452]	; (800567c <UART_SetConfig+0x904>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d130      	bne.n	800551c <UART_SetConfig+0x7a4>
 80054ba:	4b6f      	ldr	r3, [pc, #444]	; (8005678 <UART_SetConfig+0x900>)
 80054bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054be:	f003 0307 	and.w	r3, r3, #7
 80054c2:	2b05      	cmp	r3, #5
 80054c4:	d826      	bhi.n	8005514 <UART_SetConfig+0x79c>
 80054c6:	a201      	add	r2, pc, #4	; (adr r2, 80054cc <UART_SetConfig+0x754>)
 80054c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054cc:	080054e5 	.word	0x080054e5
 80054d0:	080054ed 	.word	0x080054ed
 80054d4:	080054f5 	.word	0x080054f5
 80054d8:	080054fd 	.word	0x080054fd
 80054dc:	08005505 	.word	0x08005505
 80054e0:	0800550d 	.word	0x0800550d
 80054e4:	2302      	movs	r3, #2
 80054e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054ea:	e01a      	b.n	8005522 <UART_SetConfig+0x7aa>
 80054ec:	2304      	movs	r3, #4
 80054ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054f2:	e016      	b.n	8005522 <UART_SetConfig+0x7aa>
 80054f4:	2308      	movs	r3, #8
 80054f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054fa:	e012      	b.n	8005522 <UART_SetConfig+0x7aa>
 80054fc:	2310      	movs	r3, #16
 80054fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005502:	e00e      	b.n	8005522 <UART_SetConfig+0x7aa>
 8005504:	2320      	movs	r3, #32
 8005506:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800550a:	e00a      	b.n	8005522 <UART_SetConfig+0x7aa>
 800550c:	2340      	movs	r3, #64	; 0x40
 800550e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005512:	e006      	b.n	8005522 <UART_SetConfig+0x7aa>
 8005514:	2380      	movs	r3, #128	; 0x80
 8005516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800551a:	e002      	b.n	8005522 <UART_SetConfig+0x7aa>
 800551c:	2380      	movs	r3, #128	; 0x80
 800551e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a55      	ldr	r2, [pc, #340]	; (800567c <UART_SetConfig+0x904>)
 8005528:	4293      	cmp	r3, r2
 800552a:	f040 80f0 	bne.w	800570e <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800552e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005532:	2b20      	cmp	r3, #32
 8005534:	dc46      	bgt.n	80055c4 <UART_SetConfig+0x84c>
 8005536:	2b02      	cmp	r3, #2
 8005538:	db75      	blt.n	8005626 <UART_SetConfig+0x8ae>
 800553a:	3b02      	subs	r3, #2
 800553c:	2b1e      	cmp	r3, #30
 800553e:	d872      	bhi.n	8005626 <UART_SetConfig+0x8ae>
 8005540:	a201      	add	r2, pc, #4	; (adr r2, 8005548 <UART_SetConfig+0x7d0>)
 8005542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005546:	bf00      	nop
 8005548:	080055cb 	.word	0x080055cb
 800554c:	08005627 	.word	0x08005627
 8005550:	080055d3 	.word	0x080055d3
 8005554:	08005627 	.word	0x08005627
 8005558:	08005627 	.word	0x08005627
 800555c:	08005627 	.word	0x08005627
 8005560:	080055e3 	.word	0x080055e3
 8005564:	08005627 	.word	0x08005627
 8005568:	08005627 	.word	0x08005627
 800556c:	08005627 	.word	0x08005627
 8005570:	08005627 	.word	0x08005627
 8005574:	08005627 	.word	0x08005627
 8005578:	08005627 	.word	0x08005627
 800557c:	08005627 	.word	0x08005627
 8005580:	080055f3 	.word	0x080055f3
 8005584:	08005627 	.word	0x08005627
 8005588:	08005627 	.word	0x08005627
 800558c:	08005627 	.word	0x08005627
 8005590:	08005627 	.word	0x08005627
 8005594:	08005627 	.word	0x08005627
 8005598:	08005627 	.word	0x08005627
 800559c:	08005627 	.word	0x08005627
 80055a0:	08005627 	.word	0x08005627
 80055a4:	08005627 	.word	0x08005627
 80055a8:	08005627 	.word	0x08005627
 80055ac:	08005627 	.word	0x08005627
 80055b0:	08005627 	.word	0x08005627
 80055b4:	08005627 	.word	0x08005627
 80055b8:	08005627 	.word	0x08005627
 80055bc:	08005627 	.word	0x08005627
 80055c0:	08005619 	.word	0x08005619
 80055c4:	2b40      	cmp	r3, #64	; 0x40
 80055c6:	d02a      	beq.n	800561e <UART_SetConfig+0x8a6>
 80055c8:	e02d      	b.n	8005626 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80055ca:	f7fe fc6f 	bl	8003eac <HAL_RCCEx_GetD3PCLK1Freq>
 80055ce:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80055d0:	e02f      	b.n	8005632 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055d2:	f107 0314 	add.w	r3, r7, #20
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7fe fc7e 	bl	8003ed8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80055e0:	e027      	b.n	8005632 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80055e2:	f107 0308 	add.w	r3, r7, #8
 80055e6:	4618      	mov	r0, r3
 80055e8:	f7fe fdca 	bl	8004180 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80055f0:	e01f      	b.n	8005632 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055f2:	4b21      	ldr	r3, [pc, #132]	; (8005678 <UART_SetConfig+0x900>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0320 	and.w	r3, r3, #32
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d009      	beq.n	8005612 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80055fe:	4b1e      	ldr	r3, [pc, #120]	; (8005678 <UART_SetConfig+0x900>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	08db      	lsrs	r3, r3, #3
 8005604:	f003 0303 	and.w	r3, r3, #3
 8005608:	4a1d      	ldr	r2, [pc, #116]	; (8005680 <UART_SetConfig+0x908>)
 800560a:	fa22 f303 	lsr.w	r3, r2, r3
 800560e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005610:	e00f      	b.n	8005632 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8005612:	4b1b      	ldr	r3, [pc, #108]	; (8005680 <UART_SetConfig+0x908>)
 8005614:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005616:	e00c      	b.n	8005632 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005618:	4b1a      	ldr	r3, [pc, #104]	; (8005684 <UART_SetConfig+0x90c>)
 800561a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800561c:	e009      	b.n	8005632 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800561e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005622:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005624:	e005      	b.n	8005632 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8005626:	2300      	movs	r3, #0
 8005628:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005630:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005634:	2b00      	cmp	r3, #0
 8005636:	f000 81e6 	beq.w	8005a06 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563e:	4a12      	ldr	r2, [pc, #72]	; (8005688 <UART_SetConfig+0x910>)
 8005640:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005644:	461a      	mov	r2, r3
 8005646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005648:	fbb3 f3f2 	udiv	r3, r3, r2
 800564c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685a      	ldr	r2, [r3, #4]
 8005652:	4613      	mov	r3, r2
 8005654:	005b      	lsls	r3, r3, #1
 8005656:	4413      	add	r3, r2
 8005658:	6a3a      	ldr	r2, [r7, #32]
 800565a:	429a      	cmp	r2, r3
 800565c:	d305      	bcc.n	800566a <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005664:	6a3a      	ldr	r2, [r7, #32]
 8005666:	429a      	cmp	r2, r3
 8005668:	d910      	bls.n	800568c <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005670:	e1c9      	b.n	8005a06 <UART_SetConfig+0xc8e>
 8005672:	bf00      	nop
 8005674:	40011c00 	.word	0x40011c00
 8005678:	58024400 	.word	0x58024400
 800567c:	58000c00 	.word	0x58000c00
 8005680:	03d09000 	.word	0x03d09000
 8005684:	003d0900 	.word	0x003d0900
 8005688:	080073ac 	.word	0x080073ac
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800568c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800568e:	4618      	mov	r0, r3
 8005690:	f04f 0100 	mov.w	r1, #0
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005698:	4ac1      	ldr	r2, [pc, #772]	; (80059a0 <UART_SetConfig+0xc28>)
 800569a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800569e:	b29a      	uxth	r2, r3
 80056a0:	f04f 0300 	mov.w	r3, #0
 80056a4:	f7fa ff50 	bl	8000548 <__aeabi_uldivmod>
 80056a8:	4602      	mov	r2, r0
 80056aa:	460b      	mov	r3, r1
 80056ac:	4610      	mov	r0, r2
 80056ae:	4619      	mov	r1, r3
 80056b0:	f04f 0200 	mov.w	r2, #0
 80056b4:	f04f 0300 	mov.w	r3, #0
 80056b8:	020b      	lsls	r3, r1, #8
 80056ba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80056be:	0202      	lsls	r2, r0, #8
 80056c0:	6879      	ldr	r1, [r7, #4]
 80056c2:	6849      	ldr	r1, [r1, #4]
 80056c4:	0849      	lsrs	r1, r1, #1
 80056c6:	4608      	mov	r0, r1
 80056c8:	f04f 0100 	mov.w	r1, #0
 80056cc:	1814      	adds	r4, r2, r0
 80056ce:	eb43 0501 	adc.w	r5, r3, r1
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	461a      	mov	r2, r3
 80056d8:	f04f 0300 	mov.w	r3, #0
 80056dc:	4620      	mov	r0, r4
 80056de:	4629      	mov	r1, r5
 80056e0:	f7fa ff32 	bl	8000548 <__aeabi_uldivmod>
 80056e4:	4602      	mov	r2, r0
 80056e6:	460b      	mov	r3, r1
 80056e8:	4613      	mov	r3, r2
 80056ea:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80056ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056f2:	d308      	bcc.n	8005706 <UART_SetConfig+0x98e>
 80056f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056fa:	d204      	bcs.n	8005706 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005702:	60da      	str	r2, [r3, #12]
 8005704:	e17f      	b.n	8005a06 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800570c:	e17b      	b.n	8005a06 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	69db      	ldr	r3, [r3, #28]
 8005712:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005716:	f040 80bd 	bne.w	8005894 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800571a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800571e:	2b20      	cmp	r3, #32
 8005720:	dc48      	bgt.n	80057b4 <UART_SetConfig+0xa3c>
 8005722:	2b00      	cmp	r3, #0
 8005724:	db7b      	blt.n	800581e <UART_SetConfig+0xaa6>
 8005726:	2b20      	cmp	r3, #32
 8005728:	d879      	bhi.n	800581e <UART_SetConfig+0xaa6>
 800572a:	a201      	add	r2, pc, #4	; (adr r2, 8005730 <UART_SetConfig+0x9b8>)
 800572c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005730:	080057bb 	.word	0x080057bb
 8005734:	080057c3 	.word	0x080057c3
 8005738:	0800581f 	.word	0x0800581f
 800573c:	0800581f 	.word	0x0800581f
 8005740:	080057cb 	.word	0x080057cb
 8005744:	0800581f 	.word	0x0800581f
 8005748:	0800581f 	.word	0x0800581f
 800574c:	0800581f 	.word	0x0800581f
 8005750:	080057db 	.word	0x080057db
 8005754:	0800581f 	.word	0x0800581f
 8005758:	0800581f 	.word	0x0800581f
 800575c:	0800581f 	.word	0x0800581f
 8005760:	0800581f 	.word	0x0800581f
 8005764:	0800581f 	.word	0x0800581f
 8005768:	0800581f 	.word	0x0800581f
 800576c:	0800581f 	.word	0x0800581f
 8005770:	080057eb 	.word	0x080057eb
 8005774:	0800581f 	.word	0x0800581f
 8005778:	0800581f 	.word	0x0800581f
 800577c:	0800581f 	.word	0x0800581f
 8005780:	0800581f 	.word	0x0800581f
 8005784:	0800581f 	.word	0x0800581f
 8005788:	0800581f 	.word	0x0800581f
 800578c:	0800581f 	.word	0x0800581f
 8005790:	0800581f 	.word	0x0800581f
 8005794:	0800581f 	.word	0x0800581f
 8005798:	0800581f 	.word	0x0800581f
 800579c:	0800581f 	.word	0x0800581f
 80057a0:	0800581f 	.word	0x0800581f
 80057a4:	0800581f 	.word	0x0800581f
 80057a8:	0800581f 	.word	0x0800581f
 80057ac:	0800581f 	.word	0x0800581f
 80057b0:	08005811 	.word	0x08005811
 80057b4:	2b40      	cmp	r3, #64	; 0x40
 80057b6:	d02e      	beq.n	8005816 <UART_SetConfig+0xa9e>
 80057b8:	e031      	b.n	800581e <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057ba:	f7fd fc0f 	bl	8002fdc <HAL_RCC_GetPCLK1Freq>
 80057be:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80057c0:	e033      	b.n	800582a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057c2:	f7fd fc21 	bl	8003008 <HAL_RCC_GetPCLK2Freq>
 80057c6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80057c8:	e02f      	b.n	800582a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057ca:	f107 0314 	add.w	r3, r7, #20
 80057ce:	4618      	mov	r0, r3
 80057d0:	f7fe fb82 	bl	8003ed8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80057d8:	e027      	b.n	800582a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057da:	f107 0308 	add.w	r3, r7, #8
 80057de:	4618      	mov	r0, r3
 80057e0:	f7fe fcce 	bl	8004180 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80057e8:	e01f      	b.n	800582a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057ea:	4b6e      	ldr	r3, [pc, #440]	; (80059a4 <UART_SetConfig+0xc2c>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 0320 	and.w	r3, r3, #32
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d009      	beq.n	800580a <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80057f6:	4b6b      	ldr	r3, [pc, #428]	; (80059a4 <UART_SetConfig+0xc2c>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	08db      	lsrs	r3, r3, #3
 80057fc:	f003 0303 	and.w	r3, r3, #3
 8005800:	4a69      	ldr	r2, [pc, #420]	; (80059a8 <UART_SetConfig+0xc30>)
 8005802:	fa22 f303 	lsr.w	r3, r2, r3
 8005806:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005808:	e00f      	b.n	800582a <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800580a:	4b67      	ldr	r3, [pc, #412]	; (80059a8 <UART_SetConfig+0xc30>)
 800580c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800580e:	e00c      	b.n	800582a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005810:	4b66      	ldr	r3, [pc, #408]	; (80059ac <UART_SetConfig+0xc34>)
 8005812:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005814:	e009      	b.n	800582a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005816:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800581a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800581c:	e005      	b.n	800582a <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800581e:	2300      	movs	r3, #0
 8005820:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005828:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800582a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800582c:	2b00      	cmp	r3, #0
 800582e:	f000 80ea 	beq.w	8005a06 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005836:	4a5a      	ldr	r2, [pc, #360]	; (80059a0 <UART_SetConfig+0xc28>)
 8005838:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800583c:	461a      	mov	r2, r3
 800583e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005840:	fbb3 f3f2 	udiv	r3, r3, r2
 8005844:	005a      	lsls	r2, r3, #1
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	085b      	lsrs	r3, r3, #1
 800584c:	441a      	add	r2, r3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	fbb2 f3f3 	udiv	r3, r2, r3
 8005856:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585a:	2b0f      	cmp	r3, #15
 800585c:	d916      	bls.n	800588c <UART_SetConfig+0xb14>
 800585e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005864:	d212      	bcs.n	800588c <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005868:	b29b      	uxth	r3, r3
 800586a:	f023 030f 	bic.w	r3, r3, #15
 800586e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005872:	085b      	lsrs	r3, r3, #1
 8005874:	b29b      	uxth	r3, r3
 8005876:	f003 0307 	and.w	r3, r3, #7
 800587a:	b29a      	uxth	r2, r3
 800587c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800587e:	4313      	orrs	r3, r2
 8005880:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005888:	60da      	str	r2, [r3, #12]
 800588a:	e0bc      	b.n	8005a06 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005892:	e0b8      	b.n	8005a06 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005894:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005898:	2b20      	cmp	r3, #32
 800589a:	dc4b      	bgt.n	8005934 <UART_SetConfig+0xbbc>
 800589c:	2b00      	cmp	r3, #0
 800589e:	f2c0 8087 	blt.w	80059b0 <UART_SetConfig+0xc38>
 80058a2:	2b20      	cmp	r3, #32
 80058a4:	f200 8084 	bhi.w	80059b0 <UART_SetConfig+0xc38>
 80058a8:	a201      	add	r2, pc, #4	; (adr r2, 80058b0 <UART_SetConfig+0xb38>)
 80058aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ae:	bf00      	nop
 80058b0:	0800593b 	.word	0x0800593b
 80058b4:	08005943 	.word	0x08005943
 80058b8:	080059b1 	.word	0x080059b1
 80058bc:	080059b1 	.word	0x080059b1
 80058c0:	0800594b 	.word	0x0800594b
 80058c4:	080059b1 	.word	0x080059b1
 80058c8:	080059b1 	.word	0x080059b1
 80058cc:	080059b1 	.word	0x080059b1
 80058d0:	0800595b 	.word	0x0800595b
 80058d4:	080059b1 	.word	0x080059b1
 80058d8:	080059b1 	.word	0x080059b1
 80058dc:	080059b1 	.word	0x080059b1
 80058e0:	080059b1 	.word	0x080059b1
 80058e4:	080059b1 	.word	0x080059b1
 80058e8:	080059b1 	.word	0x080059b1
 80058ec:	080059b1 	.word	0x080059b1
 80058f0:	0800596b 	.word	0x0800596b
 80058f4:	080059b1 	.word	0x080059b1
 80058f8:	080059b1 	.word	0x080059b1
 80058fc:	080059b1 	.word	0x080059b1
 8005900:	080059b1 	.word	0x080059b1
 8005904:	080059b1 	.word	0x080059b1
 8005908:	080059b1 	.word	0x080059b1
 800590c:	080059b1 	.word	0x080059b1
 8005910:	080059b1 	.word	0x080059b1
 8005914:	080059b1 	.word	0x080059b1
 8005918:	080059b1 	.word	0x080059b1
 800591c:	080059b1 	.word	0x080059b1
 8005920:	080059b1 	.word	0x080059b1
 8005924:	080059b1 	.word	0x080059b1
 8005928:	080059b1 	.word	0x080059b1
 800592c:	080059b1 	.word	0x080059b1
 8005930:	08005991 	.word	0x08005991
 8005934:	2b40      	cmp	r3, #64	; 0x40
 8005936:	d02e      	beq.n	8005996 <UART_SetConfig+0xc1e>
 8005938:	e03a      	b.n	80059b0 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800593a:	f7fd fb4f 	bl	8002fdc <HAL_RCC_GetPCLK1Freq>
 800593e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005940:	e03c      	b.n	80059bc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005942:	f7fd fb61 	bl	8003008 <HAL_RCC_GetPCLK2Freq>
 8005946:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005948:	e038      	b.n	80059bc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800594a:	f107 0314 	add.w	r3, r7, #20
 800594e:	4618      	mov	r0, r3
 8005950:	f7fe fac2 	bl	8003ed8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005958:	e030      	b.n	80059bc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800595a:	f107 0308 	add.w	r3, r7, #8
 800595e:	4618      	mov	r0, r3
 8005960:	f7fe fc0e 	bl	8004180 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005968:	e028      	b.n	80059bc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800596a:	4b0e      	ldr	r3, [pc, #56]	; (80059a4 <UART_SetConfig+0xc2c>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0320 	and.w	r3, r3, #32
 8005972:	2b00      	cmp	r3, #0
 8005974:	d009      	beq.n	800598a <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005976:	4b0b      	ldr	r3, [pc, #44]	; (80059a4 <UART_SetConfig+0xc2c>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	08db      	lsrs	r3, r3, #3
 800597c:	f003 0303 	and.w	r3, r3, #3
 8005980:	4a09      	ldr	r2, [pc, #36]	; (80059a8 <UART_SetConfig+0xc30>)
 8005982:	fa22 f303 	lsr.w	r3, r2, r3
 8005986:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005988:	e018      	b.n	80059bc <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800598a:	4b07      	ldr	r3, [pc, #28]	; (80059a8 <UART_SetConfig+0xc30>)
 800598c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800598e:	e015      	b.n	80059bc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005990:	4b06      	ldr	r3, [pc, #24]	; (80059ac <UART_SetConfig+0xc34>)
 8005992:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005994:	e012      	b.n	80059bc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005996:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800599a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800599c:	e00e      	b.n	80059bc <UART_SetConfig+0xc44>
 800599e:	bf00      	nop
 80059a0:	080073ac 	.word	0x080073ac
 80059a4:	58024400 	.word	0x58024400
 80059a8:	03d09000 	.word	0x03d09000
 80059ac:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 80059b0:	2300      	movs	r3, #0
 80059b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80059ba:	bf00      	nop
    }

    if (pclk != 0U)
 80059bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d021      	beq.n	8005a06 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c6:	4a1a      	ldr	r2, [pc, #104]	; (8005a30 <UART_SetConfig+0xcb8>)
 80059c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059cc:	461a      	mov	r2, r3
 80059ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d0:	fbb3 f2f2 	udiv	r2, r3, r2
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	085b      	lsrs	r3, r3, #1
 80059da:	441a      	add	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059e4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e8:	2b0f      	cmp	r3, #15
 80059ea:	d909      	bls.n	8005a00 <UART_SetConfig+0xc88>
 80059ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059f2:	d205      	bcs.n	8005a00 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80059f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f6:	b29a      	uxth	r2, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	60da      	str	r2, [r3, #12]
 80059fe:	e002      	b.n	8005a06 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005a22:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3738      	adds	r7, #56	; 0x38
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bdb0      	pop	{r4, r5, r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	080073ac 	.word	0x080073ac

08005a34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a40:	f003 0301 	and.w	r3, r3, #1
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d00a      	beq.n	8005a5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a62:	f003 0302 	and.w	r3, r3, #2
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00a      	beq.n	8005a80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	430a      	orrs	r2, r1
 8005a7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a84:	f003 0304 	and.w	r3, r3, #4
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d00a      	beq.n	8005aa2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	430a      	orrs	r2, r1
 8005aa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa6:	f003 0308 	and.w	r3, r3, #8
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00a      	beq.n	8005ac4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	430a      	orrs	r2, r1
 8005ac2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac8:	f003 0310 	and.w	r3, r3, #16
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00a      	beq.n	8005ae6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	430a      	orrs	r2, r1
 8005ae4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aea:	f003 0320 	and.w	r3, r3, #32
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00a      	beq.n	8005b08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	430a      	orrs	r2, r1
 8005b06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d01a      	beq.n	8005b4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	430a      	orrs	r2, r1
 8005b28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b32:	d10a      	bne.n	8005b4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	430a      	orrs	r2, r1
 8005b48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00a      	beq.n	8005b6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	430a      	orrs	r2, r1
 8005b6a:	605a      	str	r2, [r3, #4]
  }
}
 8005b6c:	bf00      	nop
 8005b6e:	370c      	adds	r7, #12
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b086      	sub	sp, #24
 8005b7c:	af02      	add	r7, sp, #8
 8005b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b88:	f7fb fbcc 	bl	8001324 <HAL_GetTick>
 8005b8c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0308 	and.w	r3, r3, #8
 8005b98:	2b08      	cmp	r3, #8
 8005b9a:	d10e      	bne.n	8005bba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ba0:	9300      	str	r3, [sp, #0]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 f82f 	bl	8005c0e <UART_WaitOnFlagUntilTimeout>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d001      	beq.n	8005bba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	e025      	b.n	8005c06 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0304 	and.w	r3, r3, #4
 8005bc4:	2b04      	cmp	r3, #4
 8005bc6:	d10e      	bne.n	8005be6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005bcc:	9300      	str	r3, [sp, #0]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 f819 	bl	8005c0e <UART_WaitOnFlagUntilTimeout>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d001      	beq.n	8005be6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e00f      	b.n	8005c06 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2220      	movs	r2, #32
 8005bea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2220      	movs	r2, #32
 8005bf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3710      	adds	r7, #16
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}

08005c0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c0e:	b580      	push	{r7, lr}
 8005c10:	b09c      	sub	sp, #112	; 0x70
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	60f8      	str	r0, [r7, #12]
 8005c16:	60b9      	str	r1, [r7, #8]
 8005c18:	603b      	str	r3, [r7, #0]
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c1e:	e0a9      	b.n	8005d74 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c26:	f000 80a5 	beq.w	8005d74 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c2a:	f7fb fb7b 	bl	8001324 <HAL_GetTick>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	1ad3      	subs	r3, r2, r3
 8005c34:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d302      	bcc.n	8005c40 <UART_WaitOnFlagUntilTimeout+0x32>
 8005c3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d140      	bne.n	8005cc2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c48:	e853 3f00 	ldrex	r3, [r3]
 8005c4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005c4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c54:	667b      	str	r3, [r7, #100]	; 0x64
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c60:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005c64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005c66:	e841 2300 	strex	r3, r2, [r1]
 8005c6a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005c6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d1e6      	bne.n	8005c40 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	3308      	adds	r3, #8
 8005c78:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c7c:	e853 3f00 	ldrex	r3, [r3]
 8005c80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c84:	f023 0301 	bic.w	r3, r3, #1
 8005c88:	663b      	str	r3, [r7, #96]	; 0x60
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	3308      	adds	r3, #8
 8005c90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005c92:	64ba      	str	r2, [r7, #72]	; 0x48
 8005c94:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005c98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c9a:	e841 2300 	strex	r3, r2, [r1]
 8005c9e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005ca0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1e5      	bne.n	8005c72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2220      	movs	r2, #32
 8005caa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2220      	movs	r2, #32
 8005cb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e069      	b.n	8005d96 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0304 	and.w	r3, r3, #4
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d051      	beq.n	8005d74 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	69db      	ldr	r3, [r3, #28]
 8005cd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cde:	d149      	bne.n	8005d74 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ce8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf2:	e853 3f00 	ldrex	r3, [r3]
 8005cf6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005cfe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	461a      	mov	r2, r3
 8005d06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d08:	637b      	str	r3, [r7, #52]	; 0x34
 8005d0a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d10:	e841 2300 	strex	r3, r2, [r1]
 8005d14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d1e6      	bne.n	8005cea <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	3308      	adds	r3, #8
 8005d22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	e853 3f00 	ldrex	r3, [r3]
 8005d2a:	613b      	str	r3, [r7, #16]
   return(result);
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	f023 0301 	bic.w	r3, r3, #1
 8005d32:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	3308      	adds	r3, #8
 8005d3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005d3c:	623a      	str	r2, [r7, #32]
 8005d3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d40:	69f9      	ldr	r1, [r7, #28]
 8005d42:	6a3a      	ldr	r2, [r7, #32]
 8005d44:	e841 2300 	strex	r3, r2, [r1]
 8005d48:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d1e5      	bne.n	8005d1c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2220      	movs	r2, #32
 8005d54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2220      	movs	r2, #32
 8005d5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2220      	movs	r2, #32
 8005d64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005d70:	2303      	movs	r3, #3
 8005d72:	e010      	b.n	8005d96 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	69da      	ldr	r2, [r3, #28]
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	68ba      	ldr	r2, [r7, #8]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	bf0c      	ite	eq
 8005d84:	2301      	moveq	r3, #1
 8005d86:	2300      	movne	r3, #0
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	79fb      	ldrb	r3, [r7, #7]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	f43f af46 	beq.w	8005c20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3770      	adds	r7, #112	; 0x70
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}

08005d9e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b085      	sub	sp, #20
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d101      	bne.n	8005db4 <HAL_UARTEx_DisableFifoMode+0x16>
 8005db0:	2302      	movs	r3, #2
 8005db2:	e027      	b.n	8005e04 <HAL_UARTEx_DisableFifoMode+0x66>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2224      	movs	r2, #36	; 0x24
 8005dc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f022 0201 	bic.w	r2, r2, #1
 8005dda:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005de2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2220      	movs	r2, #32
 8005df6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3714      	adds	r7, #20
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d101      	bne.n	8005e28 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005e24:	2302      	movs	r3, #2
 8005e26:	e02d      	b.n	8005e84 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2224      	movs	r2, #36	; 0x24
 8005e34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f022 0201 	bic.w	r2, r2, #1
 8005e4e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	683a      	ldr	r2, [r7, #0]
 8005e60:	430a      	orrs	r2, r1
 8005e62:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 f84f 	bl	8005f08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2220      	movs	r2, #32
 8005e76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3710      	adds	r7, #16
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d101      	bne.n	8005ea4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	e02d      	b.n	8005f00 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2224      	movs	r2, #36	; 0x24
 8005eb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f022 0201 	bic.w	r2, r2, #1
 8005eca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	683a      	ldr	r2, [r7, #0]
 8005edc:	430a      	orrs	r2, r1
 8005ede:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 f811 	bl	8005f08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2220      	movs	r2, #32
 8005ef2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005efe:	2300      	movs	r3, #0
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3710      	adds	r7, #16
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d108      	bne.n	8005f2a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005f28:	e031      	b.n	8005f8e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005f2a:	2310      	movs	r3, #16
 8005f2c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005f2e:	2310      	movs	r3, #16
 8005f30:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	0e5b      	lsrs	r3, r3, #25
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	f003 0307 	and.w	r3, r3, #7
 8005f40:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	0f5b      	lsrs	r3, r3, #29
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	f003 0307 	and.w	r3, r3, #7
 8005f50:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f52:	7bbb      	ldrb	r3, [r7, #14]
 8005f54:	7b3a      	ldrb	r2, [r7, #12]
 8005f56:	4911      	ldr	r1, [pc, #68]	; (8005f9c <UARTEx_SetNbDataToProcess+0x94>)
 8005f58:	5c8a      	ldrb	r2, [r1, r2]
 8005f5a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005f5e:	7b3a      	ldrb	r2, [r7, #12]
 8005f60:	490f      	ldr	r1, [pc, #60]	; (8005fa0 <UARTEx_SetNbDataToProcess+0x98>)
 8005f62:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f64:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f68:	b29a      	uxth	r2, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f70:	7bfb      	ldrb	r3, [r7, #15]
 8005f72:	7b7a      	ldrb	r2, [r7, #13]
 8005f74:	4909      	ldr	r1, [pc, #36]	; (8005f9c <UARTEx_SetNbDataToProcess+0x94>)
 8005f76:	5c8a      	ldrb	r2, [r1, r2]
 8005f78:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005f7c:	7b7a      	ldrb	r2, [r7, #13]
 8005f7e:	4908      	ldr	r1, [pc, #32]	; (8005fa0 <UARTEx_SetNbDataToProcess+0x98>)
 8005f80:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f82:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f86:	b29a      	uxth	r2, r3
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005f8e:	bf00      	nop
 8005f90:	3714      	adds	r7, #20
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	080073c4 	.word	0x080073c4
 8005fa0:	080073cc 	.word	0x080073cc

08005fa4 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b08e      	sub	sp, #56	; 0x38
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	607a      	str	r2, [r7, #4]
 8005fb0:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 8005fb2:	2234      	movs	r2, #52	; 0x34
 8005fb4:	2100      	movs	r1, #0
 8005fb6:	68f8      	ldr	r0, [r7, #12]
 8005fb8:	f001 f9c2 	bl	8007340 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	f023 0303 	bic.w	r3, r3, #3
 8005fc2:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	68ba      	ldr	r2, [r7, #8]
 8005fc8:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	683a      	ldr	r2, [r7, #0]
 8005fd4:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	f1a3 0208 	sub.w	r2, r3, #8
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2202      	movs	r2, #2
 8005ff0:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 8005ff6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 8005ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006000:	3b04      	subs	r3, #4
 8006002:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8006008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800600a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 800600c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800600e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006010:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8006012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006014:	3b04      	subs	r3, #4
 8006016:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8006018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800601a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800601c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 8006026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006028:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 800602a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800602c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800602e:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8006034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006036:	3304      	adds	r3, #4
 8006038:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800603a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800603c:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800603e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006040:	4a1f      	ldr	r2, [pc, #124]	; (80060c0 <_tx_byte_pool_create+0x11c>)
 8006042:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2200      	movs	r2, #0
 8006048:	621a      	str	r2, [r3, #32]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800604a:	f3ef 8310 	mrs	r3, PRIMASK
 800604e:	61bb      	str	r3, [r7, #24]
#endif
    return(posture);
 8006050:	69bb      	ldr	r3, [r7, #24]

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 8006052:	617b      	str	r3, [r7, #20]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 8006054:	b672      	cpsid	i
#endif
    return(int_posture);
 8006056:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8006058:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	4a19      	ldr	r2, [pc, #100]	; (80060c4 <_tx_byte_pool_create+0x120>)
 800605e:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8006060:	4b19      	ldr	r3, [pc, #100]	; (80060c8 <_tx_byte_pool_create+0x124>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d109      	bne.n	800607c <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8006068:	4a18      	ldr	r2, [pc, #96]	; (80060cc <_tx_byte_pool_create+0x128>)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	631a      	str	r2, [r3, #48]	; 0x30
 800607a:	e011      	b.n	80060a0 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800607c:	4b13      	ldr	r3, [pc, #76]	; (80060cc <_tx_byte_pool_create+0x128>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 8006082:	6a3b      	ldr	r3, [r7, #32]
 8006084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006086:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8006088:	6a3b      	ldr	r3, [r7, #32]
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	69fa      	ldr	r2, [r7, #28]
 8006098:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6a3a      	ldr	r2, [r7, #32]
 800609e:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 80060a0:	4b09      	ldr	r3, [pc, #36]	; (80060c8 <_tx_byte_pool_create+0x124>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	3301      	adds	r3, #1
 80060a6:	4a08      	ldr	r2, [pc, #32]	; (80060c8 <_tx_byte_pool_create+0x124>)
 80060a8:	6013      	str	r3, [r2, #0]
 80060aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ac:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	f383 8810 	msr	PRIMASK, r3
}
 80060b4:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3738      	adds	r7, #56	; 0x38
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	ffffeeee 	.word	0xffffeeee
 80060c4:	42595445 	.word	0x42595445
 80060c8:	24000ba8 	.word	0x24000ba8
 80060cc:	24000b8c 	.word	0x24000b8c

080060d0 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 80060d4:	f000 f960 	bl	8006398 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 80060d8:	f000 fd68 	bl	8006bac <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 80060dc:	4b12      	ldr	r3, [pc, #72]	; (8006128 <_tx_initialize_high_level+0x58>)
 80060de:	2200      	movs	r2, #0
 80060e0:	601a      	str	r2, [r3, #0]
 80060e2:	4b12      	ldr	r3, [pc, #72]	; (800612c <_tx_initialize_high_level+0x5c>)
 80060e4:	2200      	movs	r2, #0
 80060e6:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 80060e8:	4b11      	ldr	r3, [pc, #68]	; (8006130 <_tx_initialize_high_level+0x60>)
 80060ea:	2200      	movs	r2, #0
 80060ec:	601a      	str	r2, [r3, #0]
 80060ee:	4b11      	ldr	r3, [pc, #68]	; (8006134 <_tx_initialize_high_level+0x64>)
 80060f0:	2200      	movs	r2, #0
 80060f2:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 80060f4:	4b10      	ldr	r3, [pc, #64]	; (8006138 <_tx_initialize_high_level+0x68>)
 80060f6:	2200      	movs	r2, #0
 80060f8:	601a      	str	r2, [r3, #0]
 80060fa:	4b10      	ldr	r3, [pc, #64]	; (800613c <_tx_initialize_high_level+0x6c>)
 80060fc:	2200      	movs	r2, #0
 80060fe:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8006100:	4b0f      	ldr	r3, [pc, #60]	; (8006140 <_tx_initialize_high_level+0x70>)
 8006102:	2200      	movs	r2, #0
 8006104:	601a      	str	r2, [r3, #0]
 8006106:	4b0f      	ldr	r3, [pc, #60]	; (8006144 <_tx_initialize_high_level+0x74>)
 8006108:	2200      	movs	r2, #0
 800610a:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 800610c:	4b0e      	ldr	r3, [pc, #56]	; (8006148 <_tx_initialize_high_level+0x78>)
 800610e:	2200      	movs	r2, #0
 8006110:	601a      	str	r2, [r3, #0]
 8006112:	4b0e      	ldr	r3, [pc, #56]	; (800614c <_tx_initialize_high_level+0x7c>)
 8006114:	2200      	movs	r2, #0
 8006116:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8006118:	4b0d      	ldr	r3, [pc, #52]	; (8006150 <_tx_initialize_high_level+0x80>)
 800611a:	2200      	movs	r2, #0
 800611c:	601a      	str	r2, [r3, #0]
 800611e:	4b0d      	ldr	r3, [pc, #52]	; (8006154 <_tx_initialize_high_level+0x84>)
 8006120:	2200      	movs	r2, #0
 8006122:	601a      	str	r2, [r3, #0]
#endif
}
 8006124:	bf00      	nop
 8006126:	bd80      	pop	{r7, pc}
 8006128:	24000b88 	.word	0x24000b88
 800612c:	24000b98 	.word	0x24000b98
 8006130:	24000ba4 	.word	0x24000ba4
 8006134:	24000b84 	.word	0x24000b84
 8006138:	24000b78 	.word	0x24000b78
 800613c:	24000b9c 	.word	0x24000b9c
 8006140:	24000ba0 	.word	0x24000ba0
 8006144:	24000b94 	.word	0x24000b94
 8006148:	24000b8c 	.word	0x24000b8c
 800614c:	24000ba8 	.word	0x24000ba8
 8006150:	24000b80 	.word	0x24000b80
 8006154:	24000b7c 	.word	0x24000b7c

08006158 <_tx_initialize_kernel_enter>:
/*                                            initialization,             */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 800615c:	4b10      	ldr	r3, [pc, #64]	; (80061a0 <_tx_initialize_kernel_enter+0x48>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 8006164:	d00c      	beq.n	8006180 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8006166:	4b0e      	ldr	r3, [pc, #56]	; (80061a0 <_tx_initialize_kernel_enter+0x48>)
 8006168:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800616c:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800616e:	f7fa f8cf 	bl	8000310 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 8006172:	f7ff ffad 	bl	80060d0 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 8006176:	4b0b      	ldr	r3, [pc, #44]	; (80061a4 <_tx_initialize_kernel_enter+0x4c>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	3301      	adds	r3, #1
 800617c:	4a09      	ldr	r2, [pc, #36]	; (80061a4 <_tx_initialize_kernel_enter+0x4c>)
 800617e:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8006180:	4b07      	ldr	r3, [pc, #28]	; (80061a0 <_tx_initialize_kernel_enter+0x48>)
 8006182:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8006186:	601a      	str	r2, [r3, #0]
    /* Optional random number generator initialization.  */
    TX_INITIALIZE_RANDOM_GENERATOR_INITIALIZATION

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8006188:	4b07      	ldr	r3, [pc, #28]	; (80061a8 <_tx_initialize_kernel_enter+0x50>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4618      	mov	r0, r3
 800618e:	f7fa fb57 	bl	8000840 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 8006192:	4b03      	ldr	r3, [pc, #12]	; (80061a0 <_tx_initialize_kernel_enter+0x48>)
 8006194:	2200      	movs	r2, #0
 8006196:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 8006198:	f7fa f8fa 	bl	8000390 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800619c:	bf00      	nop
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	24000010 	.word	0x24000010
 80061a4:	24000c44 	.word	0x24000c44
 80061a8:	24000b90 	.word	0x24000b90

080061ac <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b092      	sub	sp, #72	; 0x48
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	607a      	str	r2, [r7, #4]
 80061b8:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 80061ba:	2300      	movs	r3, #0
 80061bc:	643b      	str	r3, [r7, #64]	; 0x40
#endif

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 80061be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80061c0:	21ef      	movs	r1, #239	; 0xef
 80061c2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80061c4:	f001 f8bc 	bl	8007340 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 80061c8:	22b0      	movs	r2, #176	; 0xb0
 80061ca:	2100      	movs	r1, #0
 80061cc:	68f8      	ldr	r0, [r7, #12]
 80061ce:	f001 f8b7 	bl	8007340 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	68ba      	ldr	r2, [r7, #8]
 80061d6:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	683a      	ldr	r2, [r7, #0]
 80061e2:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80061e8:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80061ee:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80061f4:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80061fa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006202:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006208:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2220      	movs	r2, #32
 800620e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8006212:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006214:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8006216:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006218:	3b01      	subs	r3, #1
 800621a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800621c:	4413      	add	r3, r2
 800621e:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006224:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 8006226:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006228:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800622a:	429a      	cmp	r2, r3
 800622c:	d007      	beq.n	800623e <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2200      	movs	r2, #0
 8006232:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800623c:	e006      	b.n	800624c <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006242:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006248:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2203      	movs	r2, #3
 8006250:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	4a48      	ldr	r2, [pc, #288]	; (8006378 <_tx_thread_create+0x1cc>)
 8006256:	655a      	str	r2, [r3, #84]	; 0x54
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800625e:	4947      	ldr	r1, [pc, #284]	; (800637c <_tx_thread_create+0x1d0>)
 8006260:	68f8      	ldr	r0, [r7, #12]
 8006262:	f7fa f8f5 	bl	8000450 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006266:	f3ef 8310 	mrs	r3, PRIMASK
 800626a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800626c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800626e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8006270:	b672      	cpsid	i
    return(int_posture);
 8006272:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8006274:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	4a41      	ldr	r2, [pc, #260]	; (8006380 <_tx_thread_create+0x1d4>)
 800627a:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 800627c:	4b41      	ldr	r3, [pc, #260]	; (8006384 <_tx_thread_create+0x1d8>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d10b      	bne.n	800629c <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8006284:	4a40      	ldr	r2, [pc, #256]	; (8006388 <_tx_thread_create+0x1dc>)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	68fa      	ldr	r2, [r7, #12]
 8006296:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800629a:	e016      	b.n	80062ca <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 800629c:	4b3a      	ldr	r3, [pc, #232]	; (8006388 <_tx_thread_create+0x1dc>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 80062a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062a8:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 80062aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 80062b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 80062ca:	4b2e      	ldr	r3, [pc, #184]	; (8006384 <_tx_thread_create+0x1d8>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	3301      	adds	r3, #1
 80062d0:	4a2c      	ldr	r2, [pc, #176]	; (8006384 <_tx_thread_create+0x1d8>)
 80062d2:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80062d4:	4b2d      	ldr	r3, [pc, #180]	; (800638c <_tx_thread_create+0x1e0>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	3301      	adds	r3, #1
 80062da:	4a2c      	ldr	r2, [pc, #176]	; (800638c <_tx_thread_create+0x1e0>)
 80062dc:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 80062de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d129      	bne.n	8006338 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80062e4:	f3ef 8305 	mrs	r3, IPSR
 80062e8:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 80062ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 80062ec:	4b28      	ldr	r3, [pc, #160]	; (8006390 <_tx_thread_create+0x1e4>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80062f6:	d30d      	bcc.n	8006314 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 80062f8:	4b26      	ldr	r3, [pc, #152]	; (8006394 <_tx_thread_create+0x1e8>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 80062fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006300:	2b00      	cmp	r3, #0
 8006302:	d009      	beq.n	8006318 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8006304:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006308:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800630a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800630c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800630e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006310:	63da      	str	r2, [r3, #60]	; 0x3c
 8006312:	e001      	b.n	8006318 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8006314:	2300      	movs	r3, #0
 8006316:	647b      	str	r3, [r7, #68]	; 0x44
 8006318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800631a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800631c:	6a3b      	ldr	r3, [r7, #32]
 800631e:	f383 8810 	msr	PRIMASK, r3
}
 8006322:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8006324:	68f8      	ldr	r0, [r7, #12]
 8006326:	f000 f979 	bl	800661c <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800632a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800632c:	2b00      	cmp	r3, #0
 800632e:	d01e      	beq.n	800636e <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8006330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006332:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006334:	63da      	str	r2, [r3, #60]	; 0x3c
 8006336:	e01a      	b.n	800636e <_tx_thread_create+0x1c2>
 8006338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800633a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	f383 8810 	msr	PRIMASK, r3
}
 8006342:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006344:	f3ef 8310 	mrs	r3, PRIMASK
 8006348:	61bb      	str	r3, [r7, #24]
    return(posture);
 800634a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800634c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800634e:	b672      	cpsid	i
    return(int_posture);
 8006350:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8006352:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8006354:	4b0d      	ldr	r3, [pc, #52]	; (800638c <_tx_thread_create+0x1e0>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	3b01      	subs	r3, #1
 800635a:	4a0c      	ldr	r2, [pc, #48]	; (800638c <_tx_thread_create+0x1e0>)
 800635c:	6013      	str	r3, [r2, #0]
 800635e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006360:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	f383 8810 	msr	PRIMASK, r3
}
 8006368:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800636a:	f000 f91d 	bl	80065a8 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800636e:	2300      	movs	r3, #0
}
 8006370:	4618      	mov	r0, r3
 8006372:	3748      	adds	r7, #72	; 0x48
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}
 8006378:	08006af1 	.word	0x08006af1
 800637c:	08006411 	.word	0x08006411
 8006380:	54485244 	.word	0x54485244
 8006384:	24000c3c 	.word	0x24000c3c
 8006388:	24000c34 	.word	0x24000c34
 800638c:	24000c44 	.word	0x24000c44
 8006390:	24000010 	.word	0x24000010
 8006394:	24000c4c 	.word	0x24000c4c

08006398 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 800639c:	4b12      	ldr	r3, [pc, #72]	; (80063e8 <_tx_thread_initialize+0x50>)
 800639e:	2200      	movs	r2, #0
 80063a0:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 80063a2:	4b12      	ldr	r3, [pc, #72]	; (80063ec <_tx_thread_initialize+0x54>)
 80063a4:	2200      	movs	r2, #0
 80063a6:	601a      	str	r2, [r3, #0]
 80063a8:	4b11      	ldr	r3, [pc, #68]	; (80063f0 <_tx_thread_initialize+0x58>)
 80063aa:	2200      	movs	r2, #0
 80063ac:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 80063ae:	4b11      	ldr	r3, [pc, #68]	; (80063f4 <_tx_thread_initialize+0x5c>)
 80063b0:	2220      	movs	r2, #32
 80063b2:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 80063b4:	2280      	movs	r2, #128	; 0x80
 80063b6:	2100      	movs	r1, #0
 80063b8:	480f      	ldr	r0, [pc, #60]	; (80063f8 <_tx_thread_initialize+0x60>)
 80063ba:	f000 ffc1 	bl	8007340 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 80063be:	4b0f      	ldr	r3, [pc, #60]	; (80063fc <_tx_thread_initialize+0x64>)
 80063c0:	2200      	movs	r2, #0
 80063c2:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 80063c4:	4b0e      	ldr	r3, [pc, #56]	; (8006400 <_tx_thread_initialize+0x68>)
 80063c6:	2200      	movs	r2, #0
 80063c8:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 80063ca:	4b0e      	ldr	r3, [pc, #56]	; (8006404 <_tx_thread_initialize+0x6c>)
 80063cc:	2200      	movs	r2, #0
 80063ce:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 80063d0:	4b0d      	ldr	r3, [pc, #52]	; (8006408 <_tx_thread_initialize+0x70>)
 80063d2:	2200      	movs	r2, #0
 80063d4:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 80063d6:	4b0d      	ldr	r3, [pc, #52]	; (800640c <_tx_thread_initialize+0x74>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 80063de:	4a0b      	ldr	r2, [pc, #44]	; (800640c <_tx_thread_initialize+0x74>)
 80063e0:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 80063e2:	bf00      	nop
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	24000c48 	.word	0x24000c48
 80063ec:	24000c4c 	.word	0x24000c4c
 80063f0:	24000c30 	.word	0x24000c30
 80063f4:	24000c50 	.word	0x24000c50
 80063f8:	24000bac 	.word	0x24000bac
 80063fc:	24000c34 	.word	0x24000c34
 8006400:	24000c3c 	.word	0x24000c3c
 8006404:	24000c44 	.word	0x24000c44
 8006408:	24000c2c 	.word	0x24000c2c
 800640c:	24000c38 	.word	0x24000c38

08006410 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b088      	sub	sp, #32
 8006414:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8006416:	4b21      	ldr	r3, [pc, #132]	; (800649c <_tx_thread_shell_entry+0x8c>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006420:	69fa      	ldr	r2, [r7, #28]
 8006422:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006424:	4610      	mov	r0, r2
 8006426:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8006428:	4b1d      	ldr	r3, [pc, #116]	; (80064a0 <_tx_thread_shell_entry+0x90>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d003      	beq.n	8006438 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8006430:	4b1b      	ldr	r3, [pc, #108]	; (80064a0 <_tx_thread_shell_entry+0x90>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	69f8      	ldr	r0, [r7, #28]
 8006436:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006438:	f3ef 8310 	mrs	r3, PRIMASK
 800643c:	607b      	str	r3, [r7, #4]
    return(posture);
 800643e:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8006440:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006442:	b672      	cpsid	i
    return(int_posture);
 8006444:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8006446:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	2201      	movs	r2, #1
 800644c:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	2201      	movs	r2, #1
 8006452:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	2200      	movs	r2, #0
 8006458:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800645a:	4b12      	ldr	r3, [pc, #72]	; (80064a4 <_tx_thread_shell_entry+0x94>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	3301      	adds	r3, #1
 8006460:	4a10      	ldr	r2, [pc, #64]	; (80064a4 <_tx_thread_shell_entry+0x94>)
 8006462:	6013      	str	r3, [r2, #0]
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	f383 8810 	msr	PRIMASK, r3
}
 800646e:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 8006470:	f3ef 8314 	mrs	r3, CONTROL
 8006474:	60fb      	str	r3, [r7, #12]
    return(control_value);
 8006476:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 8006478:	617b      	str	r3, [r7, #20]
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	f023 0304 	bic.w	r3, r3, #4
 8006480:	617b      	str	r3, [r7, #20]
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	f383 8814 	msr	CONTROL, r3
}
 800648c:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800648e:	69f8      	ldr	r0, [r7, #28]
 8006490:	f000 f9c4 	bl	800681c <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8006494:	bf00      	nop
 8006496:	3720      	adds	r7, #32
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}
 800649c:	24000c48 	.word	0x24000c48
 80064a0:	24000c2c 	.word	0x24000c2c
 80064a4:	24000c44 	.word	0x24000c44

080064a8 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b08e      	sub	sp, #56	; 0x38
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80064b0:	f3ef 8310 	mrs	r3, PRIMASK
 80064b4:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80064b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80064b8:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80064ba:	b672      	cpsid	i
    return(int_posture);
 80064bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 80064be:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80064c0:	4b35      	ldr	r3, [pc, #212]	; (8006598 <_tx_thread_sleep+0xf0>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 80064c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d108      	bne.n	80064de <_tx_thread_sleep+0x36>
 80064cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ce:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80064d0:	6a3b      	ldr	r3, [r7, #32]
 80064d2:	f383 8810 	msr	PRIMASK, r3
}
 80064d6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80064d8:	2313      	movs	r3, #19
 80064da:	637b      	str	r3, [r7, #52]	; 0x34
 80064dc:	e056      	b.n	800658c <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80064de:	f3ef 8305 	mrs	r3, IPSR
 80064e2:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 80064e4:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80064e6:	4b2d      	ldr	r3, [pc, #180]	; (800659c <_tx_thread_sleep+0xf4>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d008      	beq.n	8006502 <_tx_thread_sleep+0x5a>
 80064f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	f383 8810 	msr	PRIMASK, r3
}
 80064fa:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80064fc:	2313      	movs	r3, #19
 80064fe:	637b      	str	r3, [r7, #52]	; 0x34
 8006500:	e044      	b.n	800658c <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 8006502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006504:	4a26      	ldr	r2, [pc, #152]	; (80065a0 <_tx_thread_sleep+0xf8>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d108      	bne.n	800651c <_tx_thread_sleep+0x74>
 800650a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	f383 8810 	msr	PRIMASK, r3
}
 8006514:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8006516:	2313      	movs	r3, #19
 8006518:	637b      	str	r3, [r7, #52]	; 0x34
 800651a:	e037      	b.n	800658c <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d108      	bne.n	8006534 <_tx_thread_sleep+0x8c>
 8006522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006524:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	f383 8810 	msr	PRIMASK, r3
}
 800652c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 800652e:	2300      	movs	r3, #0
 8006530:	637b      	str	r3, [r7, #52]	; 0x34
 8006532:	e02b      	b.n	800658c <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8006534:	4b1b      	ldr	r3, [pc, #108]	; (80065a4 <_tx_thread_sleep+0xfc>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d008      	beq.n	800654e <_tx_thread_sleep+0xa6>
 800653c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f383 8810 	msr	PRIMASK, r3
}
 8006546:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 8006548:	2313      	movs	r3, #19
 800654a:	637b      	str	r3, [r7, #52]	; 0x34
 800654c:	e01e      	b.n	800658c <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 800654e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006550:	2204      	movs	r2, #4
 8006552:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8006554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006556:	2201      	movs	r2, #1
 8006558:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800655a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800655c:	2200      	movs	r2, #0
 800655e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 8006562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8006568:	4b0e      	ldr	r3, [pc, #56]	; (80065a4 <_tx_thread_sleep+0xfc>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	3301      	adds	r3, #1
 800656e:	4a0d      	ldr	r2, [pc, #52]	; (80065a4 <_tx_thread_sleep+0xfc>)
 8006570:	6013      	str	r3, [r2, #0]
 8006572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006574:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	f383 8810 	msr	PRIMASK, r3
}
 800657c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800657e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006580:	f000 f94c 	bl	800681c <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8006584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006586:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800658a:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 800658c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800658e:	4618      	mov	r0, r3
 8006590:	3738      	adds	r7, #56	; 0x38
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	24000c48 	.word	0x24000c48
 800659c:	24000010 	.word	0x24000010
 80065a0:	24000ce8 	.word	0x24000ce8
 80065a4:	24000c44 	.word	0x24000c44

080065a8 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b089      	sub	sp, #36	; 0x24
 80065ac:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80065ae:	4b17      	ldr	r3, [pc, #92]	; (800660c <_tx_thread_system_preempt_check+0x64>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d121      	bne.n	80065fe <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 80065ba:	4b15      	ldr	r3, [pc, #84]	; (8006610 <_tx_thread_system_preempt_check+0x68>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 80065c0:	4b14      	ldr	r3, [pc, #80]	; (8006614 <_tx_thread_system_preempt_check+0x6c>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 80065c6:	69ba      	ldr	r2, [r7, #24]
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d017      	beq.n	80065fe <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80065ce:	4b12      	ldr	r3, [pc, #72]	; (8006618 <_tx_thread_system_preempt_check+0x70>)
 80065d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065d4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80065d6:	f3ef 8305 	mrs	r3, IPSR
 80065da:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80065dc:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d10c      	bne.n	80065fc <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80065e2:	f3ef 8310 	mrs	r3, PRIMASK
 80065e6:	60fb      	str	r3, [r7, #12]
    return(posture);
 80065e8:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 80065ea:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80065ec:	b662      	cpsie	i
}
 80065ee:	bf00      	nop
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f383 8810 	msr	PRIMASK, r3
}
 80065fa:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 80065fc:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 80065fe:	bf00      	nop
 8006600:	3724      	adds	r7, #36	; 0x24
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr
 800660a:	bf00      	nop
 800660c:	24000c44 	.word	0x24000c44
 8006610:	24000c48 	.word	0x24000c48
 8006614:	24000c4c 	.word	0x24000c4c
 8006618:	e000ed04 	.word	0xe000ed04

0800661c <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b096      	sub	sp, #88	; 0x58
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006624:	f3ef 8310 	mrs	r3, PRIMASK
 8006628:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800662a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800662c:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800662e:	b672      	cpsid	i
    return(int_posture);
 8006630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8006632:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006638:	2b00      	cmp	r3, #0
 800663a:	d005      	beq.n	8006648 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	334c      	adds	r3, #76	; 0x4c
 8006640:	4618      	mov	r0, r3
 8006642:	f000 fb91 	bl	8006d68 <_tx_timer_system_deactivate>
 8006646:	e002      	b.n	800664e <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800664e:	4b6c      	ldr	r3, [pc, #432]	; (8006800 <_tx_thread_system_resume+0x1e4>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	3b01      	subs	r3, #1
 8006654:	4a6a      	ldr	r2, [pc, #424]	; (8006800 <_tx_thread_system_resume+0x1e4>)
 8006656:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800665c:	2b00      	cmp	r3, #0
 800665e:	f040 8083 	bne.w	8006768 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006666:	2b00      	cmp	r3, #0
 8006668:	f000 8097 	beq.w	800679a <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006670:	2b00      	cmp	r3, #0
 8006672:	d172      	bne.n	800675a <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667e:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8006680:	4a60      	ldr	r2, [pc, #384]	; (8006804 <_tx_thread_system_resume+0x1e8>)
 8006682:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006688:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 800668a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800668c:	2b00      	cmp	r3, #0
 800668e:	d154      	bne.n	800673a <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8006690:	495c      	ldr	r1, [pc, #368]	; (8006804 <_tx_thread_system_resume+0x1e8>)
 8006692:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 80066a6:	2201      	movs	r2, #1
 80066a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066aa:	fa02 f303 	lsl.w	r3, r2, r3
 80066ae:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 80066b0:	4b55      	ldr	r3, [pc, #340]	; (8006808 <_tx_thread_system_resume+0x1ec>)
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066b6:	4313      	orrs	r3, r2
 80066b8:	4a53      	ldr	r2, [pc, #332]	; (8006808 <_tx_thread_system_resume+0x1ec>)
 80066ba:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 80066bc:	4b53      	ldr	r3, [pc, #332]	; (800680c <_tx_thread_system_resume+0x1f0>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d269      	bcs.n	800679a <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 80066c6:	4a51      	ldr	r2, [pc, #324]	; (800680c <_tx_thread_system_resume+0x1f0>)
 80066c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066ca:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 80066cc:	4b50      	ldr	r3, [pc, #320]	; (8006810 <_tx_thread_system_resume+0x1f4>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 80066d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d103      	bne.n	80066e0 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 80066d8:	4a4d      	ldr	r2, [pc, #308]	; (8006810 <_tx_thread_system_resume+0x1f4>)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6013      	str	r3, [r2, #0]
 80066de:	e05c      	b.n	800679a <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 80066e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d257      	bcs.n	800679a <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 80066ea:	4a49      	ldr	r2, [pc, #292]	; (8006810 <_tx_thread_system_resume+0x1f4>)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6013      	str	r3, [r2, #0]
 80066f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80066f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f6:	f383 8810 	msr	PRIMASK, r3
}
 80066fa:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80066fc:	4b40      	ldr	r3, [pc, #256]	; (8006800 <_tx_thread_system_resume+0x1e4>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 8006702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006704:	2b00      	cmp	r3, #0
 8006706:	d174      	bne.n	80067f2 <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8006708:	4b42      	ldr	r3, [pc, #264]	; (8006814 <_tx_thread_system_resume+0x1f8>)
 800670a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800670e:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006710:	f3ef 8305 	mrs	r3, IPSR
 8006714:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8006716:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 8006718:	2b00      	cmp	r3, #0
 800671a:	d10c      	bne.n	8006736 <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800671c:	f3ef 8310 	mrs	r3, PRIMASK
 8006720:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8006722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 8006724:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8006726:	b662      	cpsie	i
}
 8006728:	bf00      	nop
 800672a:	6a3b      	ldr	r3, [r7, #32]
 800672c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	f383 8810 	msr	PRIMASK, r3
}
 8006734:	bf00      	nop
}
 8006736:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8006738:	e05b      	b.n	80067f2 <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800673a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800673c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673e:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8006740:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8006746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006750:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006756:	621a      	str	r2, [r3, #32]
 8006758:	e01f      	b.n	800679a <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2203      	movs	r2, #3
 8006764:	631a      	str	r2, [r3, #48]	; 0x30
 8006766:	e018      	b.n	800679a <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800676c:	2b01      	cmp	r3, #1
 800676e:	d014      	beq.n	800679a <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006774:	2b02      	cmp	r3, #2
 8006776:	d010      	beq.n	800679a <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800677c:	2b00      	cmp	r3, #0
 800677e:	d106      	bne.n	800678e <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	631a      	str	r2, [r3, #48]	; 0x30
 800678c:	e005      	b.n	800679a <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2203      	movs	r2, #3
 8006798:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800679a:	4b1f      	ldr	r3, [pc, #124]	; (8006818 <_tx_thread_system_resume+0x1fc>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	63bb      	str	r3, [r7, #56]	; 0x38
 80067a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067a2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	f383 8810 	msr	PRIMASK, r3
}
 80067aa:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 80067ac:	4b18      	ldr	r3, [pc, #96]	; (8006810 <_tx_thread_system_resume+0x1f4>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d020      	beq.n	80067f8 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80067b6:	4b12      	ldr	r3, [pc, #72]	; (8006800 <_tx_thread_system_resume+0x1e4>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 80067bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d11a      	bne.n	80067f8 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80067c2:	4b14      	ldr	r3, [pc, #80]	; (8006814 <_tx_thread_system_resume+0x1f8>)
 80067c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067c8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80067ca:	f3ef 8305 	mrs	r3, IPSR
 80067ce:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80067d0:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d10f      	bne.n	80067f6 <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80067d6:	f3ef 8310 	mrs	r3, PRIMASK
 80067da:	613b      	str	r3, [r7, #16]
    return(posture);
 80067dc:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 80067de:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80067e0:	b662      	cpsie	i
}
 80067e2:	bf00      	nop
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	f383 8810 	msr	PRIMASK, r3
}
 80067ee:	bf00      	nop
}
 80067f0:	e001      	b.n	80067f6 <_tx_thread_system_resume+0x1da>
                                return;
 80067f2:	bf00      	nop
 80067f4:	e000      	b.n	80067f8 <_tx_thread_system_resume+0x1dc>
 80067f6:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 80067f8:	3758      	adds	r7, #88	; 0x58
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	24000c44 	.word	0x24000c44
 8006804:	24000bac 	.word	0x24000bac
 8006808:	24000c30 	.word	0x24000c30
 800680c:	24000c50 	.word	0x24000c50
 8006810:	24000c4c 	.word	0x24000c4c
 8006814:	e000ed04 	.word	0xe000ed04
 8006818:	24000c48 	.word	0x24000c48

0800681c <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b09e      	sub	sp, #120	; 0x78
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8006824:	4b81      	ldr	r3, [pc, #516]	; (8006a2c <_tx_thread_system_suspend+0x210>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800682a:	f3ef 8310 	mrs	r3, PRIMASK
 800682e:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 8006830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 8006832:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8006834:	b672      	cpsid	i
    return(int_posture);
 8006836:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8006838:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800683e:	429a      	cmp	r2, r3
 8006840:	d112      	bne.n	8006868 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006846:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8006848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800684a:	2b00      	cmp	r3, #0
 800684c:	d008      	beq.n	8006860 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800684e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006854:	d004      	beq.n	8006860 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	334c      	adds	r3, #76	; 0x4c
 800685a:	4618      	mov	r0, r3
 800685c:	f000 fa22 	bl	8006ca4 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	69db      	ldr	r3, [r3, #28]
 8006864:	4a72      	ldr	r2, [pc, #456]	; (8006a30 <_tx_thread_system_suspend+0x214>)
 8006866:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8006868:	4b72      	ldr	r3, [pc, #456]	; (8006a34 <_tx_thread_system_suspend+0x218>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	3b01      	subs	r3, #1
 800686e:	4a71      	ldr	r2, [pc, #452]	; (8006a34 <_tx_thread_system_suspend+0x218>)
 8006870:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006876:	2b01      	cmp	r3, #1
 8006878:	f040 80a6 	bne.w	80069c8 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006886:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6a1b      	ldr	r3, [r3, #32]
 800688c:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800688e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	429a      	cmp	r2, r3
 8006894:	d015      	beq.n	80068c2 <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689a:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800689c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800689e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80068a0:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 80068a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068a4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80068a6:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 80068a8:	4a63      	ldr	r2, [pc, #396]	; (8006a38 <_tx_thread_system_suspend+0x21c>)
 80068aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80068ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d157      	bne.n	8006966 <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 80068b6:	4960      	ldr	r1, [pc, #384]	; (8006a38 <_tx_thread_system_suspend+0x21c>)
 80068b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80068ba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80068bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80068c0:	e051      	b.n	8006966 <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 80068c2:	4a5d      	ldr	r2, [pc, #372]	; (8006a38 <_tx_thread_system_suspend+0x21c>)
 80068c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80068c6:	2100      	movs	r1, #0
 80068c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 80068cc:	2201      	movs	r2, #1
 80068ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80068d0:	fa02 f303 	lsl.w	r3, r2, r3
 80068d4:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 80068d6:	4b59      	ldr	r3, [pc, #356]	; (8006a3c <_tx_thread_system_suspend+0x220>)
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068dc:	43db      	mvns	r3, r3
 80068de:	4013      	ands	r3, r2
 80068e0:	4a56      	ldr	r2, [pc, #344]	; (8006a3c <_tx_thread_system_suspend+0x220>)
 80068e2:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 80068e4:	2300      	movs	r3, #0
 80068e6:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 80068e8:	4b54      	ldr	r3, [pc, #336]	; (8006a3c <_tx_thread_system_suspend+0x220>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 80068ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d12b      	bne.n	800694c <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 80068f4:	4b52      	ldr	r3, [pc, #328]	; (8006a40 <_tx_thread_system_suspend+0x224>)
 80068f6:	2220      	movs	r2, #32
 80068f8:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 80068fa:	4b52      	ldr	r3, [pc, #328]	; (8006a44 <_tx_thread_system_suspend+0x228>)
 80068fc:	2200      	movs	r2, #0
 80068fe:	601a      	str	r2, [r3, #0]
 8006900:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006902:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006904:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006906:	f383 8810 	msr	PRIMASK, r3
}
 800690a:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800690c:	4b49      	ldr	r3, [pc, #292]	; (8006a34 <_tx_thread_system_suspend+0x218>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 8006912:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006914:	2b00      	cmp	r3, #0
 8006916:	f040 8081 	bne.w	8006a1c <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800691a:	4b4b      	ldr	r3, [pc, #300]	; (8006a48 <_tx_thread_system_suspend+0x22c>)
 800691c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006920:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006922:	f3ef 8305 	mrs	r3, IPSR
 8006926:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 8006928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (__get_ipsr_value() == 0)
 800692a:	2b00      	cmp	r3, #0
 800692c:	d10c      	bne.n	8006948 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800692e:	f3ef 8310 	mrs	r3, PRIMASK
 8006932:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 8006934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 8006936:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 8006938:	b662      	cpsie	i
}
 800693a:	bf00      	nop
 800693c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800693e:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006942:	f383 8810 	msr	PRIMASK, r3
}
 8006946:	bf00      	nop
}
 8006948:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800694a:	e067      	b.n	8006a1c <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800694c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800694e:	fa93 f3a3 	rbit	r3, r3
 8006952:	65bb      	str	r3, [r7, #88]	; 0x58
 8006954:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006956:	fab3 f383 	clz	r3, r3
 800695a:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 800695c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800695e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006960:	4413      	add	r3, r2
 8006962:	4a37      	ldr	r2, [pc, #220]	; (8006a40 <_tx_thread_system_suspend+0x224>)
 8006964:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8006966:	4b37      	ldr	r3, [pc, #220]	; (8006a44 <_tx_thread_system_suspend+0x228>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	429a      	cmp	r2, r3
 800696e:	d12b      	bne.n	80069c8 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8006970:	4b33      	ldr	r3, [pc, #204]	; (8006a40 <_tx_thread_system_suspend+0x224>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a30      	ldr	r2, [pc, #192]	; (8006a38 <_tx_thread_system_suspend+0x21c>)
 8006976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800697a:	4a32      	ldr	r2, [pc, #200]	; (8006a44 <_tx_thread_system_suspend+0x228>)
 800697c:	6013      	str	r3, [r2, #0]
 800697e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006980:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006984:	f383 8810 	msr	PRIMASK, r3
}
 8006988:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800698a:	4b2a      	ldr	r3, [pc, #168]	; (8006a34 <_tx_thread_system_suspend+0x218>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 8006990:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006992:	2b00      	cmp	r3, #0
 8006994:	d144      	bne.n	8006a20 <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8006996:	4b2c      	ldr	r3, [pc, #176]	; (8006a48 <_tx_thread_system_suspend+0x22c>)
 8006998:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800699c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800699e:	f3ef 8305 	mrs	r3, IPSR
 80069a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 80069a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (__get_ipsr_value() == 0)
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d10c      	bne.n	80069c4 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80069aa:	f3ef 8310 	mrs	r3, PRIMASK
 80069ae:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80069b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 80069b2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 80069b4:	b662      	cpsie	i
}
 80069b6:	bf00      	nop
 80069b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ba:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80069bc:	6a3b      	ldr	r3, [r7, #32]
 80069be:	f383 8810 	msr	PRIMASK, r3
}
 80069c2:	bf00      	nop
}
 80069c4:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 80069c6:	e02b      	b.n	8006a20 <_tx_thread_system_suspend+0x204>
 80069c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069ca:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80069cc:	69fb      	ldr	r3, [r7, #28]
 80069ce:	f383 8810 	msr	PRIMASK, r3
}
 80069d2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 80069d4:	4b1b      	ldr	r3, [pc, #108]	; (8006a44 <_tx_thread_system_suspend+0x228>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80069da:	429a      	cmp	r2, r3
 80069dc:	d022      	beq.n	8006a24 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80069de:	4b15      	ldr	r3, [pc, #84]	; (8006a34 <_tx_thread_system_suspend+0x218>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 80069e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d11c      	bne.n	8006a24 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80069ea:	4b17      	ldr	r3, [pc, #92]	; (8006a48 <_tx_thread_system_suspend+0x22c>)
 80069ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069f0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80069f2:	f3ef 8305 	mrs	r3, IPSR
 80069f6:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80069f8:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d10c      	bne.n	8006a18 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80069fe:	f3ef 8310 	mrs	r3, PRIMASK
 8006a02:	617b      	str	r3, [r7, #20]
    return(posture);
 8006a04:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 8006a06:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8006a08:	b662      	cpsie	i
}
 8006a0a:	bf00      	nop
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f383 8810 	msr	PRIMASK, r3
}
 8006a16:	bf00      	nop
}
 8006a18:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8006a1a:	e003      	b.n	8006a24 <_tx_thread_system_suspend+0x208>
                return;
 8006a1c:	bf00      	nop
 8006a1e:	e002      	b.n	8006a26 <_tx_thread_system_suspend+0x20a>
            return;
 8006a20:	bf00      	nop
 8006a22:	e000      	b.n	8006a26 <_tx_thread_system_suspend+0x20a>
    return;
 8006a24:	bf00      	nop
}
 8006a26:	3778      	adds	r7, #120	; 0x78
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	24000c48 	.word	0x24000c48
 8006a30:	24000cdc 	.word	0x24000cdc
 8006a34:	24000c44 	.word	0x24000c44
 8006a38:	24000bac 	.word	0x24000bac
 8006a3c:	24000c30 	.word	0x24000c30
 8006a40:	24000c50 	.word	0x24000c50
 8006a44:	24000c4c 	.word	0x24000c4c
 8006a48:	e000ed04 	.word	0xe000ed04

08006a4c <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b087      	sub	sp, #28
 8006a50:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8006a52:	4b21      	ldr	r3, [pc, #132]	; (8006ad8 <_tx_thread_time_slice+0x8c>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006a58:	f3ef 8310 	mrs	r3, PRIMASK
 8006a5c:	60fb      	str	r3, [r7, #12]
    return(posture);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8006a60:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006a62:	b672      	cpsid	i
    return(int_posture);
 8006a64:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8006a66:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8006a68:	4b1c      	ldr	r3, [pc, #112]	; (8006adc <_tx_thread_time_slice+0x90>)
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d024      	beq.n	8006abe <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d120      	bne.n	8006abe <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	69da      	ldr	r2, [r3, #28]
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	699b      	ldr	r3, [r3, #24]
 8006a88:	4a15      	ldr	r2, [pc, #84]	; (8006ae0 <_tx_thread_time_slice+0x94>)
 8006a8a:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	6a1b      	ldr	r3, [r3, #32]
 8006a90:	697a      	ldr	r2, [r7, #20]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d013      	beq.n	8006abe <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d10d      	bne.n	8006abe <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa6:	697a      	ldr	r2, [r7, #20]
 8006aa8:	6a12      	ldr	r2, [r2, #32]
 8006aaa:	490e      	ldr	r1, [pc, #56]	; (8006ae4 <_tx_thread_time_slice+0x98>)
 8006aac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8006ab0:	4b0d      	ldr	r3, [pc, #52]	; (8006ae8 <_tx_thread_time_slice+0x9c>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a0b      	ldr	r2, [pc, #44]	; (8006ae4 <_tx_thread_time_slice+0x98>)
 8006ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006aba:	4a0c      	ldr	r2, [pc, #48]	; (8006aec <_tx_thread_time_slice+0xa0>)
 8006abc:	6013      	str	r3, [r2, #0]
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f383 8810 	msr	PRIMASK, r3
}
 8006ac8:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8006aca:	bf00      	nop
 8006acc:	371c      	adds	r7, #28
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	24000c48 	.word	0x24000c48
 8006adc:	240011b0 	.word	0x240011b0
 8006ae0:	24000cdc 	.word	0x24000cdc
 8006ae4:	24000bac 	.word	0x24000bac
 8006ae8:	24000c50 	.word	0x24000c50
 8006aec:	24000c4c 	.word	0x24000c4c

08006af0 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b08a      	sub	sp, #40	; 0x28
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006afc:	f3ef 8310 	mrs	r3, PRIMASK
 8006b00:	617b      	str	r3, [r7, #20]
    return(posture);
 8006b02:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8006b04:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006b06:	b672      	cpsid	i
    return(int_posture);
 8006b08:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8006b0a:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8006b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b10:	2b04      	cmp	r3, #4
 8006b12:	d10e      	bne.n	8006b32 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8006b14:	4b13      	ldr	r3, [pc, #76]	; (8006b64 <_tx_thread_timeout+0x74>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	3301      	adds	r3, #1
 8006b1a:	4a12      	ldr	r2, [pc, #72]	; (8006b64 <_tx_thread_timeout+0x74>)
 8006b1c:	6013      	str	r3, [r2, #0]
 8006b1e:	6a3b      	ldr	r3, [r7, #32]
 8006b20:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f383 8810 	msr	PRIMASK, r3
}
 8006b28:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8006b2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b2c:	f7ff fd76 	bl	800661c <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8006b30:	e013      	b.n	8006b5a <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8006b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b36:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8006b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006b3e:	61bb      	str	r3, [r7, #24]
 8006b40:	6a3b      	ldr	r3, [r7, #32]
 8006b42:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	f383 8810 	msr	PRIMASK, r3
}
 8006b4a:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d003      	beq.n	8006b5a <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	69b9      	ldr	r1, [r7, #24]
 8006b56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b58:	4798      	blx	r3
}
 8006b5a:	bf00      	nop
 8006b5c:	3728      	adds	r7, #40	; 0x28
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	24000c44 	.word	0x24000c44

08006b68 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006b6e:	f3ef 8310 	mrs	r3, PRIMASK
 8006b72:	607b      	str	r3, [r7, #4]
    return(posture);
 8006b74:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8006b76:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006b78:	b672      	cpsid	i
    return(int_posture);
 8006b7a:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8006b7c:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8006b7e:	4b09      	ldr	r3, [pc, #36]	; (8006ba4 <_tx_timer_expiration_process+0x3c>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	3301      	adds	r3, #1
 8006b84:	4a07      	ldr	r2, [pc, #28]	; (8006ba4 <_tx_timer_expiration_process+0x3c>)
 8006b86:	6013      	str	r3, [r2, #0]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	f383 8810 	msr	PRIMASK, r3
}
 8006b92:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8006b94:	4804      	ldr	r0, [pc, #16]	; (8006ba8 <_tx_timer_expiration_process+0x40>)
 8006b96:	f7ff fd41 	bl	800661c <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8006b9a:	bf00      	nop
 8006b9c:	3710      	adds	r7, #16
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	bf00      	nop
 8006ba4:	24000c44 	.word	0x24000c44
 8006ba8:	24000ce8 	.word	0x24000ce8

08006bac <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8006bac:	b590      	push	{r4, r7, lr}
 8006bae:	b089      	sub	sp, #36	; 0x24
 8006bb0:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8006bb2:	4b28      	ldr	r3, [pc, #160]	; (8006c54 <_tx_timer_initialize+0xa8>)
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8006bb8:	4b27      	ldr	r3, [pc, #156]	; (8006c58 <_tx_timer_initialize+0xac>)
 8006bba:	2200      	movs	r2, #0
 8006bbc:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8006bbe:	4b27      	ldr	r3, [pc, #156]	; (8006c5c <_tx_timer_initialize+0xb0>)
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8006bc4:	4b26      	ldr	r3, [pc, #152]	; (8006c60 <_tx_timer_initialize+0xb4>)
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8006bca:	4b26      	ldr	r3, [pc, #152]	; (8006c64 <_tx_timer_initialize+0xb8>)
 8006bcc:	2200      	movs	r2, #0
 8006bce:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8006bd0:	2280      	movs	r2, #128	; 0x80
 8006bd2:	2100      	movs	r1, #0
 8006bd4:	4824      	ldr	r0, [pc, #144]	; (8006c68 <_tx_timer_initialize+0xbc>)
 8006bd6:	f000 fbb3 	bl	8007340 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 8006bda:	4b24      	ldr	r3, [pc, #144]	; (8006c6c <_tx_timer_initialize+0xc0>)
 8006bdc:	4a22      	ldr	r2, [pc, #136]	; (8006c68 <_tx_timer_initialize+0xbc>)
 8006bde:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8006be0:	4b23      	ldr	r3, [pc, #140]	; (8006c70 <_tx_timer_initialize+0xc4>)
 8006be2:	4a21      	ldr	r2, [pc, #132]	; (8006c68 <_tx_timer_initialize+0xbc>)
 8006be4:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8006be6:	4b23      	ldr	r3, [pc, #140]	; (8006c74 <_tx_timer_initialize+0xc8>)
 8006be8:	4a23      	ldr	r2, [pc, #140]	; (8006c78 <_tx_timer_initialize+0xcc>)
 8006bea:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8006bec:	4b21      	ldr	r3, [pc, #132]	; (8006c74 <_tx_timer_initialize+0xc8>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	3304      	adds	r3, #4
 8006bf2:	4a20      	ldr	r2, [pc, #128]	; (8006c74 <_tx_timer_initialize+0xc8>)
 8006bf4:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8006bf6:	4b21      	ldr	r3, [pc, #132]	; (8006c7c <_tx_timer_initialize+0xd0>)
 8006bf8:	4a21      	ldr	r2, [pc, #132]	; (8006c80 <_tx_timer_initialize+0xd4>)
 8006bfa:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8006bfc:	4b21      	ldr	r3, [pc, #132]	; (8006c84 <_tx_timer_initialize+0xd8>)
 8006bfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006c02:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8006c04:	4b20      	ldr	r3, [pc, #128]	; (8006c88 <_tx_timer_initialize+0xdc>)
 8006c06:	2200      	movs	r2, #0
 8006c08:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 8006c0a:	4b1c      	ldr	r3, [pc, #112]	; (8006c7c <_tx_timer_initialize+0xd0>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a1d      	ldr	r2, [pc, #116]	; (8006c84 <_tx_timer_initialize+0xd8>)
 8006c10:	6812      	ldr	r2, [r2, #0]
 8006c12:	491d      	ldr	r1, [pc, #116]	; (8006c88 <_tx_timer_initialize+0xdc>)
 8006c14:	6809      	ldr	r1, [r1, #0]
 8006c16:	481c      	ldr	r0, [pc, #112]	; (8006c88 <_tx_timer_initialize+0xdc>)
 8006c18:	6800      	ldr	r0, [r0, #0]
 8006c1a:	2400      	movs	r4, #0
 8006c1c:	9405      	str	r4, [sp, #20]
 8006c1e:	2400      	movs	r4, #0
 8006c20:	9404      	str	r4, [sp, #16]
 8006c22:	9003      	str	r0, [sp, #12]
 8006c24:	9102      	str	r1, [sp, #8]
 8006c26:	9201      	str	r2, [sp, #4]
 8006c28:	9300      	str	r3, [sp, #0]
 8006c2a:	4b18      	ldr	r3, [pc, #96]	; (8006c8c <_tx_timer_initialize+0xe0>)
 8006c2c:	4a18      	ldr	r2, [pc, #96]	; (8006c90 <_tx_timer_initialize+0xe4>)
 8006c2e:	4919      	ldr	r1, [pc, #100]	; (8006c94 <_tx_timer_initialize+0xe8>)
 8006c30:	4819      	ldr	r0, [pc, #100]	; (8006c98 <_tx_timer_initialize+0xec>)
 8006c32:	f7ff fabb 	bl	80061ac <_tx_thread_create>
 8006c36:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d1e5      	bne.n	8006c0a <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8006c3e:	4b17      	ldr	r3, [pc, #92]	; (8006c9c <_tx_timer_initialize+0xf0>)
 8006c40:	2200      	movs	r2, #0
 8006c42:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8006c44:	4b16      	ldr	r3, [pc, #88]	; (8006ca0 <_tx_timer_initialize+0xf4>)
 8006c46:	2200      	movs	r2, #0
 8006c48:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8006c4a:	bf00      	nop
 8006c4c:	370c      	adds	r7, #12
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd90      	pop	{r4, r7, pc}
 8006c52:	bf00      	nop
 8006c54:	240011b4 	.word	0x240011b4
 8006c58:	24000cdc 	.word	0x24000cdc
 8006c5c:	240011b0 	.word	0x240011b0
 8006c60:	24000cd8 	.word	0x24000cd8
 8006c64:	24000d98 	.word	0x24000d98
 8006c68:	24000c58 	.word	0x24000c58
 8006c6c:	24000d9c 	.word	0x24000d9c
 8006c70:	24000c54 	.word	0x24000c54
 8006c74:	24000ce4 	.word	0x24000ce4
 8006c78:	24000cd4 	.word	0x24000cd4
 8006c7c:	240011a8 	.word	0x240011a8
 8006c80:	24000da8 	.word	0x24000da8
 8006c84:	24000da4 	.word	0x24000da4
 8006c88:	24000ce0 	.word	0x24000ce0
 8006c8c:	4154494d 	.word	0x4154494d
 8006c90:	08006dd9 	.word	0x08006dd9
 8006c94:	08007388 	.word	0x08007388
 8006c98:	24000ce8 	.word	0x24000ce8
 8006c9c:	24000da0 	.word	0x24000da0
 8006ca0:	240011ac 	.word	0x240011ac

08006ca4 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b089      	sub	sp, #36	; 0x24
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d04a      	beq.n	8006d4e <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cbe:	d046      	beq.n	8006d4e <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	699b      	ldr	r3, [r3, #24]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d142      	bne.n	8006d4e <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	2b20      	cmp	r3, #32
 8006ccc:	d902      	bls.n	8006cd4 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 8006cce:	231f      	movs	r3, #31
 8006cd0:	61bb      	str	r3, [r7, #24]
 8006cd2:	e002      	b.n	8006cda <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8006cda:	4b20      	ldr	r3, [pc, #128]	; (8006d5c <_tx_timer_system_activate+0xb8>)
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	4413      	add	r3, r2
 8006ce4:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8006ce6:	4b1e      	ldr	r3, [pc, #120]	; (8006d60 <_tx_timer_system_activate+0xbc>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	69fa      	ldr	r2, [r7, #28]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d30b      	bcc.n	8006d08 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8006cf0:	4b1b      	ldr	r3, [pc, #108]	; (8006d60 <_tx_timer_system_activate+0xbc>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	69fa      	ldr	r2, [r7, #28]
 8006cf6:	1ad3      	subs	r3, r2, r3
 8006cf8:	109b      	asrs	r3, r3, #2
 8006cfa:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8006cfc:	4b19      	ldr	r3, [pc, #100]	; (8006d64 <_tx_timer_system_activate+0xc0>)
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	4413      	add	r3, r2
 8006d06:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d109      	bne.n	8006d24 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 8006d1c:	69fb      	ldr	r3, [r7, #28]
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	601a      	str	r2, [r3, #0]
 8006d22:	e011      	b.n	8006d48 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	695b      	ldr	r3, [r3, #20]
 8006d2e:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	68fa      	ldr	r2, [r7, #12]
 8006d40:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	68ba      	ldr	r2, [r7, #8]
 8006d46:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	69fa      	ldr	r2, [r7, #28]
 8006d4c:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 8006d4e:	bf00      	nop
 8006d50:	3724      	adds	r7, #36	; 0x24
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr
 8006d5a:	bf00      	nop
 8006d5c:	24000c54 	.word	0x24000c54
 8006d60:	24000ce4 	.word	0x24000ce4
 8006d64:	24000d9c 	.word	0x24000d9c

08006d68 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b087      	sub	sp, #28
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	699b      	ldr	r3, [r3, #24]
 8006d74:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d026      	beq.n	8006dca <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	691b      	ldr	r3, [r3, #16]
 8006d80:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d108      	bne.n	8006d9c <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d117      	bne.n	8006dc4 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	2200      	movs	r2, #0
 8006d98:	601a      	str	r2, [r3, #0]
 8006d9a:	e013      	b.n	8006dc4 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	695b      	ldr	r3, [r3, #20]
 8006da0:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	693a      	ldr	r2, [r7, #16]
 8006dac:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d105      	bne.n	8006dc4 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	697a      	ldr	r2, [r7, #20]
 8006dbc:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	693a      	ldr	r2, [r7, #16]
 8006dc2:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	619a      	str	r2, [r3, #24]
    }
}
 8006dca:	bf00      	nop
 8006dcc:	371c      	adds	r7, #28
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr
	...

08006dd8 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b098      	sub	sp, #96	; 0x60
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8006de0:	2300      	movs	r3, #0
 8006de2:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4a73      	ldr	r2, [pc, #460]	; (8006fb4 <_tx_timer_thread_entry+0x1dc>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	f040 80de 	bne.w	8006faa <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006dee:	f3ef 8310 	mrs	r3, PRIMASK
 8006df2:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8006df4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8006df6:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8006df8:	b672      	cpsid	i
    return(int_posture);
 8006dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8006dfc:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 8006dfe:	4b6e      	ldr	r3, [pc, #440]	; (8006fb8 <_tx_timer_thread_entry+0x1e0>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d003      	beq.n	8006e14 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f107 020c 	add.w	r2, r7, #12
 8006e12:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8006e14:	4b68      	ldr	r3, [pc, #416]	; (8006fb8 <_tx_timer_thread_entry+0x1e0>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 8006e1c:	4b66      	ldr	r3, [pc, #408]	; (8006fb8 <_tx_timer_thread_entry+0x1e0>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	3304      	adds	r3, #4
 8006e22:	4a65      	ldr	r2, [pc, #404]	; (8006fb8 <_tx_timer_thread_entry+0x1e0>)
 8006e24:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8006e26:	4b64      	ldr	r3, [pc, #400]	; (8006fb8 <_tx_timer_thread_entry+0x1e0>)
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	4b64      	ldr	r3, [pc, #400]	; (8006fbc <_tx_timer_thread_entry+0x1e4>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d103      	bne.n	8006e3a <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 8006e32:	4b63      	ldr	r3, [pc, #396]	; (8006fc0 <_tx_timer_thread_entry+0x1e8>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a60      	ldr	r2, [pc, #384]	; (8006fb8 <_tx_timer_thread_entry+0x1e0>)
 8006e38:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 8006e3a:	4b62      	ldr	r3, [pc, #392]	; (8006fc4 <_tx_timer_thread_entry+0x1ec>)
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	601a      	str	r2, [r3, #0]
 8006e40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e42:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e46:	f383 8810 	msr	PRIMASK, r3
}
 8006e4a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006e4c:	f3ef 8310 	mrs	r3, PRIMASK
 8006e50:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8006e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8006e54:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8006e56:	b672      	cpsid	i
    return(int_posture);
 8006e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8006e5a:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8006e5c:	e07f      	b.n	8006f5e <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8006e6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d102      	bne.n	8006e7a <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8006e74:	2300      	movs	r3, #0
 8006e76:	60fb      	str	r3, [r7, #12]
 8006e78:	e00e      	b.n	8006e98 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8006e7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e7c:	695b      	ldr	r3, [r3, #20]
 8006e7e:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8006e80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e84:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8006e86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e8a:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8006e8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e8e:	f107 020c 	add.w	r2, r7, #12
 8006e92:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8006e94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e96:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8006e98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2b20      	cmp	r3, #32
 8006e9e:	d911      	bls.n	8006ec4 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8006ea0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 8006ea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eaa:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8006eac:	2300      	movs	r3, #0
 8006eae:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8006eb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eb2:	f107 0208 	add.w	r2, r7, #8
 8006eb6:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8006eb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006ebc:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8006ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ec0:	60bb      	str	r3, [r7, #8]
 8006ec2:	e01a      	b.n	8006efa <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8006ec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8006eca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8006ed0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ed2:	685a      	ldr	r2, [r3, #4]
 8006ed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ed6:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8006ed8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d009      	beq.n	8006ef4 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8006ee0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ee2:	f107 0208 	add.w	r2, r7, #8
 8006ee6:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8006ee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006eec:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 8006eee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ef0:	60bb      	str	r3, [r7, #8]
 8006ef2:	e002      	b.n	8006efa <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8006ef4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 8006efa:	4a33      	ldr	r2, [pc, #204]	; (8006fc8 <_tx_timer_thread_entry+0x1f0>)
 8006efc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006efe:	6013      	str	r3, [r2, #0]
 8006f00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f02:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f06:	f383 8810 	msr	PRIMASK, r3
}
 8006f0a:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 8006f0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d002      	beq.n	8006f18 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 8006f12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f14:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8006f16:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006f18:	f3ef 8310 	mrs	r3, PRIMASK
 8006f1c:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8006f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8006f20:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8006f22:	b672      	cpsid	i
    return(int_posture);
 8006f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 8006f26:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8006f28:	4b27      	ldr	r3, [pc, #156]	; (8006fc8 <_tx_timer_thread_entry+0x1f0>)
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d105      	bne.n	8006f42 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 8006f36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f38:	2200      	movs	r2, #0
 8006f3a:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8006f3c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8006f3e:	f7ff feb1 	bl	8006ca4 <_tx_timer_system_activate>
 8006f42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f44:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	f383 8810 	msr	PRIMASK, r3
}
 8006f4c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006f4e:	f3ef 8310 	mrs	r3, PRIMASK
 8006f52:	623b      	str	r3, [r7, #32]
    return(posture);
 8006f54:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8006f56:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006f58:	b672      	cpsid	i
    return(int_posture);
 8006f5a:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8006f5c:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	f47f af7c 	bne.w	8006e5e <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8006f66:	4b17      	ldr	r3, [pc, #92]	; (8006fc4 <_tx_timer_thread_entry+0x1ec>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d116      	bne.n	8006f9c <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8006f6e:	4b17      	ldr	r3, [pc, #92]	; (8006fcc <_tx_timer_thread_entry+0x1f4>)
 8006f70:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8006f72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f74:	2203      	movs	r2, #3
 8006f76:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8006f78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8006f7e:	4b14      	ldr	r3, [pc, #80]	; (8006fd0 <_tx_timer_thread_entry+0x1f8>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	3301      	adds	r3, #1
 8006f84:	4a12      	ldr	r2, [pc, #72]	; (8006fd0 <_tx_timer_thread_entry+0x1f8>)
 8006f86:	6013      	str	r3, [r2, #0]
 8006f88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f8a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	f383 8810 	msr	PRIMASK, r3
}
 8006f92:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8006f94:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006f96:	f7ff fc41 	bl	800681c <_tx_thread_system_suspend>
 8006f9a:	e728      	b.n	8006dee <_tx_timer_thread_entry+0x16>
 8006f9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f9e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	f383 8810 	msr	PRIMASK, r3
}
 8006fa6:	bf00      	nop
            TX_DISABLE
 8006fa8:	e721      	b.n	8006dee <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 8006faa:	bf00      	nop
 8006fac:	3760      	adds	r7, #96	; 0x60
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	4154494d 	.word	0x4154494d
 8006fb8:	24000c54 	.word	0x24000c54
 8006fbc:	24000ce4 	.word	0x24000ce4
 8006fc0:	24000d9c 	.word	0x24000d9c
 8006fc4:	24000cd8 	.word	0x24000cd8
 8006fc8:	24000d98 	.word	0x24000d98
 8006fcc:	24000ce8 	.word	0x24000ce8
 8006fd0:	24000c44 	.word	0x24000c44

08006fd4 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b092      	sub	sp, #72	; 0x48
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	60b9      	str	r1, [r7, #8]
 8006fde:	607a      	str	r2, [r7, #4]
 8006fe0:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d102      	bne.n	8006ff2 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8006fec:	2302      	movs	r3, #2
 8006fee:	647b      	str	r3, [r7, #68]	; 0x44
 8006ff0:	e075      	b.n	80070de <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 8006ff2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ff4:	2b34      	cmp	r3, #52	; 0x34
 8006ff6:	d002      	beq.n	8006ffe <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8006ff8:	2302      	movs	r3, #2
 8006ffa:	647b      	str	r3, [r7, #68]	; 0x44
 8006ffc:	e06f      	b.n	80070de <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006ffe:	f3ef 8310 	mrs	r3, PRIMASK
 8007002:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8007004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8007006:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8007008:	b672      	cpsid	i
    return(int_posture);
 800700a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800700c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800700e:	4b3b      	ldr	r3, [pc, #236]	; (80070fc <_txe_byte_pool_create+0x128>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	3301      	adds	r3, #1
 8007014:	4a39      	ldr	r2, [pc, #228]	; (80070fc <_txe_byte_pool_create+0x128>)
 8007016:	6013      	str	r3, [r2, #0]
 8007018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800701c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800701e:	f383 8810 	msr	PRIMASK, r3
}
 8007022:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 8007024:	4b36      	ldr	r3, [pc, #216]	; (8007100 <_txe_byte_pool_create+0x12c>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800702a:	2300      	movs	r3, #0
 800702c:	643b      	str	r3, [r7, #64]	; 0x40
 800702e:	e009      	b.n	8007044 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8007030:	68fa      	ldr	r2, [r7, #12]
 8007032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007034:	429a      	cmp	r2, r3
 8007036:	d00b      	beq.n	8007050 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8007038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800703a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800703c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800703e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007040:	3301      	adds	r3, #1
 8007042:	643b      	str	r3, [r7, #64]	; 0x40
 8007044:	4b2f      	ldr	r3, [pc, #188]	; (8007104 <_txe_byte_pool_create+0x130>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800704a:	429a      	cmp	r2, r3
 800704c:	d3f0      	bcc.n	8007030 <_txe_byte_pool_create+0x5c>
 800704e:	e000      	b.n	8007052 <_txe_byte_pool_create+0x7e>
                break;
 8007050:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007052:	f3ef 8310 	mrs	r3, PRIMASK
 8007056:	623b      	str	r3, [r7, #32]
    return(posture);
 8007058:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800705a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800705c:	b672      	cpsid	i
    return(int_posture);
 800705e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8007060:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8007062:	4b26      	ldr	r3, [pc, #152]	; (80070fc <_txe_byte_pool_create+0x128>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	3b01      	subs	r3, #1
 8007068:	4a24      	ldr	r2, [pc, #144]	; (80070fc <_txe_byte_pool_create+0x128>)
 800706a:	6013      	str	r3, [r2, #0]
 800706c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007072:	f383 8810 	msr	PRIMASK, r3
}
 8007076:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8007078:	f7ff fa96 	bl	80065a8 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007080:	429a      	cmp	r2, r3
 8007082:	d102      	bne.n	800708a <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8007084:	2302      	movs	r3, #2
 8007086:	647b      	str	r3, [r7, #68]	; 0x44
 8007088:	e029      	b.n	80070de <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d102      	bne.n	8007096 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8007090:	2303      	movs	r3, #3
 8007092:	647b      	str	r3, [r7, #68]	; 0x44
 8007094:	e023      	b.n	80070de <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	2b63      	cmp	r3, #99	; 0x63
 800709a:	d802      	bhi.n	80070a2 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800709c:	2305      	movs	r3, #5
 800709e:	647b      	str	r3, [r7, #68]	; 0x44
 80070a0:	e01d      	b.n	80070de <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80070a2:	4b19      	ldr	r3, [pc, #100]	; (8007108 <_txe_byte_pool_create+0x134>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 80070a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070aa:	4a18      	ldr	r2, [pc, #96]	; (800710c <_txe_byte_pool_create+0x138>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d101      	bne.n	80070b4 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80070b0:	2313      	movs	r3, #19
 80070b2:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80070b4:	f3ef 8305 	mrs	r3, IPSR
 80070b8:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80070ba:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80070bc:	4b14      	ldr	r3, [pc, #80]	; (8007110 <_txe_byte_pool_create+0x13c>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d00b      	beq.n	80070de <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80070c6:	f3ef 8305 	mrs	r3, IPSR
 80070ca:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80070cc:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80070ce:	4b10      	ldr	r3, [pc, #64]	; (8007110 <_txe_byte_pool_create+0x13c>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80070d8:	d201      	bcs.n	80070de <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 80070da:	2313      	movs	r3, #19
 80070dc:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80070de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d106      	bne.n	80070f2 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	68b9      	ldr	r1, [r7, #8]
 80070ea:	68f8      	ldr	r0, [r7, #12]
 80070ec:	f7fe ff5a 	bl	8005fa4 <_tx_byte_pool_create>
 80070f0:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 80070f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3748      	adds	r7, #72	; 0x48
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}
 80070fc:	24000c44 	.word	0x24000c44
 8007100:	24000b8c 	.word	0x24000b8c
 8007104:	24000ba8 	.word	0x24000ba8
 8007108:	24000c48 	.word	0x24000c48
 800710c:	24000ce8 	.word	0x24000ce8
 8007110:	24000010 	.word	0x24000010

08007114 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b09a      	sub	sp, #104	; 0x68
 8007118:	af06      	add	r7, sp, #24
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	607a      	str	r2, [r7, #4]
 8007120:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8007122:	2300      	movs	r3, #0
 8007124:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d102      	bne.n	8007132 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800712c:	230e      	movs	r3, #14
 800712e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007130:	e0bb      	b.n	80072aa <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 8007132:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007134:	2bb0      	cmp	r3, #176	; 0xb0
 8007136:	d002      	beq.n	800713e <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8007138:	230e      	movs	r3, #14
 800713a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800713c:	e0b5      	b.n	80072aa <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800713e:	f3ef 8310 	mrs	r3, PRIMASK
 8007142:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8007144:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8007146:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8007148:	b672      	cpsid	i
    return(int_posture);
 800714a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800714c:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800714e:	4b64      	ldr	r3, [pc, #400]	; (80072e0 <_txe_thread_create+0x1cc>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	3301      	adds	r3, #1
 8007154:	4a62      	ldr	r2, [pc, #392]	; (80072e0 <_txe_thread_create+0x1cc>)
 8007156:	6013      	str	r3, [r2, #0]
 8007158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800715a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800715c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800715e:	f383 8810 	msr	PRIMASK, r3
}
 8007162:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 8007164:	2300      	movs	r3, #0
 8007166:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 8007168:	4b5e      	ldr	r3, [pc, #376]	; (80072e4 <_txe_thread_create+0x1d0>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800716e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007170:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 8007172:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007174:	3b01      	subs	r3, #1
 8007176:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007178:	4413      	add	r3, r2
 800717a:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800717c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800717e:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8007180:	2300      	movs	r3, #0
 8007182:	647b      	str	r3, [r7, #68]	; 0x44
 8007184:	e02b      	b.n	80071de <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800718a:	429a      	cmp	r2, r3
 800718c:	d101      	bne.n	8007192 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800718e:	2301      	movs	r3, #1
 8007190:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 8007192:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007194:	2b01      	cmp	r3, #1
 8007196:	d028      	beq.n	80071ea <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 8007198:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800719e:	429a      	cmp	r2, r3
 80071a0:	d308      	bcc.n	80071b4 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 80071a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071a4:	691b      	ldr	r3, [r3, #16]
 80071a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d203      	bcs.n	80071b4 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 80071ac:	2300      	movs	r3, #0
 80071ae:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 80071b0:	2301      	movs	r3, #1
 80071b2:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 80071b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d308      	bcc.n	80071d0 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 80071be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d203      	bcs.n	80071d0 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 80071c8:	2300      	movs	r3, #0
 80071ca:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 80071cc:	2301      	movs	r3, #1
 80071ce:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 80071d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071d6:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 80071d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071da:	3301      	adds	r3, #1
 80071dc:	647b      	str	r3, [r7, #68]	; 0x44
 80071de:	4b42      	ldr	r3, [pc, #264]	; (80072e8 <_txe_thread_create+0x1d4>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d3ce      	bcc.n	8007186 <_txe_thread_create+0x72>
 80071e8:	e000      	b.n	80071ec <_txe_thread_create+0xd8>
                break;
 80071ea:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80071ec:	f3ef 8310 	mrs	r3, PRIMASK
 80071f0:	61fb      	str	r3, [r7, #28]
    return(posture);
 80071f2:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80071f4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80071f6:	b672      	cpsid	i
    return(int_posture);
 80071f8:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80071fa:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80071fc:	4b38      	ldr	r3, [pc, #224]	; (80072e0 <_txe_thread_create+0x1cc>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	3b01      	subs	r3, #1
 8007202:	4a37      	ldr	r2, [pc, #220]	; (80072e0 <_txe_thread_create+0x1cc>)
 8007204:	6013      	str	r3, [r2, #0]
 8007206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007208:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800720a:	6a3b      	ldr	r3, [r7, #32]
 800720c:	f383 8810 	msr	PRIMASK, r3
}
 8007210:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8007212:	f7ff f9c9 	bl	80065a8 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800721a:	429a      	cmp	r2, r3
 800721c:	d102      	bne.n	8007224 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 800721e:	230e      	movs	r3, #14
 8007220:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007222:	e042      	b.n	80072aa <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 8007224:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007226:	2b00      	cmp	r3, #0
 8007228:	d102      	bne.n	8007230 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800722a:	2303      	movs	r3, #3
 800722c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800722e:	e03c      	b.n	80072aa <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d102      	bne.n	800723c <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8007236:	2303      	movs	r3, #3
 8007238:	64fb      	str	r3, [r7, #76]	; 0x4c
 800723a:	e036      	b.n	80072aa <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800723c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800723e:	2bc7      	cmp	r3, #199	; 0xc7
 8007240:	d802      	bhi.n	8007248 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 8007242:	2305      	movs	r3, #5
 8007244:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007246:	e030      	b.n	80072aa <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 8007248:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800724a:	2b1f      	cmp	r3, #31
 800724c:	d902      	bls.n	8007254 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800724e:	230f      	movs	r3, #15
 8007250:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007252:	e02a      	b.n	80072aa <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 8007254:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007256:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007258:	429a      	cmp	r2, r3
 800725a:	d902      	bls.n	8007262 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 800725c:	2318      	movs	r3, #24
 800725e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007260:	e023      	b.n	80072aa <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 8007262:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007264:	2b01      	cmp	r3, #1
 8007266:	d902      	bls.n	800726e <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 8007268:	2310      	movs	r3, #16
 800726a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800726c:	e01d      	b.n	80072aa <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800726e:	4b1f      	ldr	r3, [pc, #124]	; (80072ec <_txe_thread_create+0x1d8>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8007274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007276:	4a1e      	ldr	r2, [pc, #120]	; (80072f0 <_txe_thread_create+0x1dc>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d101      	bne.n	8007280 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800727c:	2313      	movs	r3, #19
 800727e:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007280:	f3ef 8305 	mrs	r3, IPSR
 8007284:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8007286:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8007288:	4b1a      	ldr	r3, [pc, #104]	; (80072f4 <_txe_thread_create+0x1e0>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4313      	orrs	r3, r2
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00b      	beq.n	80072aa <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007292:	f3ef 8305 	mrs	r3, IPSR
 8007296:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8007298:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800729a:	4b16      	ldr	r3, [pc, #88]	; (80072f4 <_txe_thread_create+0x1e0>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4313      	orrs	r3, r2
 80072a0:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80072a4:	d201      	bcs.n	80072aa <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 80072a6:	2313      	movs	r3, #19
 80072a8:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80072aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d112      	bne.n	80072d6 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 80072b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072b2:	9305      	str	r3, [sp, #20]
 80072b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80072b6:	9304      	str	r3, [sp, #16]
 80072b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072ba:	9303      	str	r3, [sp, #12]
 80072bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072be:	9302      	str	r3, [sp, #8]
 80072c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072c2:	9301      	str	r3, [sp, #4]
 80072c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80072c6:	9300      	str	r3, [sp, #0]
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	68b9      	ldr	r1, [r7, #8]
 80072ce:	68f8      	ldr	r0, [r7, #12]
 80072d0:	f7fe ff6c 	bl	80061ac <_tx_thread_create>
 80072d4:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 80072d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3750      	adds	r7, #80	; 0x50
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	24000c44 	.word	0x24000c44
 80072e4:	24000c34 	.word	0x24000c34
 80072e8:	24000c3c 	.word	0x24000c3c
 80072ec:	24000c48 	.word	0x24000c48
 80072f0:	24000ce8 	.word	0x24000ce8
 80072f4:	24000010 	.word	0x24000010

080072f8 <__libc_init_array>:
 80072f8:	b570      	push	{r4, r5, r6, lr}
 80072fa:	4d0d      	ldr	r5, [pc, #52]	; (8007330 <__libc_init_array+0x38>)
 80072fc:	4c0d      	ldr	r4, [pc, #52]	; (8007334 <__libc_init_array+0x3c>)
 80072fe:	1b64      	subs	r4, r4, r5
 8007300:	10a4      	asrs	r4, r4, #2
 8007302:	2600      	movs	r6, #0
 8007304:	42a6      	cmp	r6, r4
 8007306:	d109      	bne.n	800731c <__libc_init_array+0x24>
 8007308:	4d0b      	ldr	r5, [pc, #44]	; (8007338 <__libc_init_array+0x40>)
 800730a:	4c0c      	ldr	r4, [pc, #48]	; (800733c <__libc_init_array+0x44>)
 800730c:	f000 f820 	bl	8007350 <_init>
 8007310:	1b64      	subs	r4, r4, r5
 8007312:	10a4      	asrs	r4, r4, #2
 8007314:	2600      	movs	r6, #0
 8007316:	42a6      	cmp	r6, r4
 8007318:	d105      	bne.n	8007326 <__libc_init_array+0x2e>
 800731a:	bd70      	pop	{r4, r5, r6, pc}
 800731c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007320:	4798      	blx	r3
 8007322:	3601      	adds	r6, #1
 8007324:	e7ee      	b.n	8007304 <__libc_init_array+0xc>
 8007326:	f855 3b04 	ldr.w	r3, [r5], #4
 800732a:	4798      	blx	r3
 800732c:	3601      	adds	r6, #1
 800732e:	e7f2      	b.n	8007316 <__libc_init_array+0x1e>
 8007330:	080073dc 	.word	0x080073dc
 8007334:	080073dc 	.word	0x080073dc
 8007338:	080073dc 	.word	0x080073dc
 800733c:	080073e0 	.word	0x080073e0

08007340 <memset>:
 8007340:	4402      	add	r2, r0
 8007342:	4603      	mov	r3, r0
 8007344:	4293      	cmp	r3, r2
 8007346:	d100      	bne.n	800734a <memset+0xa>
 8007348:	4770      	bx	lr
 800734a:	f803 1b01 	strb.w	r1, [r3], #1
 800734e:	e7f9      	b.n	8007344 <memset+0x4>

08007350 <_init>:
 8007350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007352:	bf00      	nop
 8007354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007356:	bc08      	pop	{r3}
 8007358:	469e      	mov	lr, r3
 800735a:	4770      	bx	lr

0800735c <_fini>:
 800735c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800735e:	bf00      	nop
 8007360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007362:	bc08      	pop	{r3}
 8007364:	469e      	mov	lr, r3
 8007366:	4770      	bx	lr
