
Led_Toggle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008260  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08008530  08008530  00018530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080085a8  080085a8  000185a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080085b0  080085b0  000185b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080085b4  080085b4  000185b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .trace        0000fa00  24000000  24000000  00020000  2**2
                  ALLOC
  7 .data         00000014  2400fa00  080085b8  0001fa00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .RxDecripSection 00000060  2400fa14  080085cc  0001fa14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .TxDecripSection 00000060  2400fa74  0800862c  0001fa74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000015c8  2400fad4  0800868c  0001fad4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2401109c  0800868c  0002109c  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0001fad4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003f001  00000000  00000000  0001fb02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000654d  00000000  00000000  0005eb03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001518  00000000  00000000  00065050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001270  00000000  00000000  00066568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000371d2  00000000  00000000  000677d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000209c2  00000000  00000000  0009e9aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0015aaa8  00000000  00000000  000bf36c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00219e14  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005028  00000000  00000000  00219e68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400fad4 	.word	0x2400fad4
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08008518 	.word	0x08008518

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400fad8 	.word	0x2400fad8
 800030c:	08008518 	.word	0x08008518

08000310 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 8000310:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 8000312:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000316:	4919      	ldr	r1, [pc, #100]	; (800037c <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 8000318:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 800031c:	4818      	ldr	r0, [pc, #96]	; (8000380 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800031e:	4917      	ldr	r1, [pc, #92]	; (800037c <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 8000320:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 8000322:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000324:	4817      	ldr	r0, [pc, #92]	; (8000384 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000326:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000328:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 800032c:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 800032e:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000332:	4915      	ldr	r1, [pc, #84]	; (8000388 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000334:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000336:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800033a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800033c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000340:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000344:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000348:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800034c:	490f      	ldr	r1, [pc, #60]	; (800038c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800034e:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000352:	4770      	bx	lr

08000354 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000354:	f7ff bffe 	b.w	8000354 <__tx_BadHandler>

08000358 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000358:	f7ff bffe 	b.w	8000358 <__tx_HardfaultHandler>

0800035c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800035c:	f7ff bffe 	b.w	800035c <__tx_SVCallHandler>

08000360 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000360:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000362:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000366:	4770      	bx	lr

08000368 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000368:	b501      	push	{r0, lr}
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800036a:	f000 f891 	bl	8000490 <_tx_timer_interrupt>
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800036e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000372:	4770      	bx	lr

08000374 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000374:	f7ff bffe 	b.w	8000374 <__tx_NMIHandler>

08000378 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000378:	f7ff bffe 	b.w	8000378 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800037c:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000380:	24010af0 	.word	0x24010af0
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000384:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000388:	0053ec5f 	.word	0x0053ec5f
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800038c:	40ff0000 	.word	0x40ff0000

08000390 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 8000390:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000394:	4a2a      	ldr	r2, [pc, #168]	; (8000440 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000396:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_FP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000398:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 800039c:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 80003a0:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 80003a4:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 80003a6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 80003aa:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 80003ae:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 80003b2:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 80003b6:	f3bf 8f6f 	isb	sy

080003ba <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 80003ba:	e7fe      	b.n	80003ba <__tx_wait_here>

080003bc <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003bc:	4821      	ldr	r0, [pc, #132]	; (8000444 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003be:	4a22      	ldr	r2, [pc, #136]	; (8000448 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 80003c0:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 80003c4:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 80003c6:	b191      	cbz	r1, 80003ee <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 80003c8:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 80003ca:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 80003ce:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80003d2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80003d6:	d101      	bne.n	80003dc <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80003d8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080003dc <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003dc:	4c1b      	ldr	r4, [pc, #108]	; (800044c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80003de:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80003e2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80003e4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80003e8:	b10d      	cbz	r5, 80003ee <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80003ea:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80003ec:	6023      	str	r3, [r4, #0]

080003ee <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80003ee:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 80003f0:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 80003f2:	b1b1      	cbz	r1, 8000422 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 80003f4:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003f6:	b662      	cpsie	i

080003f8 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 80003f8:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003fa:	4c14      	ldr	r4, [pc, #80]	; (800044c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 80003fc:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 80003fe:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000402:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000404:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 8000406:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 800040a:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800040e:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000412:	d101      	bne.n	8000418 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000414:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000418 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000418:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 800041c:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 8000420:	4770      	bx	lr

08000422 <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000422:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000424:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 8000426:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000428:	b909      	cbnz	r1, 800042e <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800042a:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 800042c:	e7f9      	b.n	8000422 <__tx_ts_wait>

0800042e <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 800042e:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000432:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000436:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800043a:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 800043c:	e7dc      	b.n	80003f8 <__tx_ts_restore>

0800043e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800043e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000440:	24010af4 	.word	0x24010af4
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000444:	24010af8 	.word	0x24010af8
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000448:	24010afc 	.word	0x24010afc
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800044c:	24010b90 	.word	0x24010b90

08000450 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000450:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000452:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000456:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800045a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800045e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000460:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000464:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000466:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000468:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800046a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800046c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800046e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000470:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000472:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000474:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000476:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000478:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800047a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800047c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800047e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000482:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000484:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000486:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800048a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800048c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800048e:	4770      	bx	lr

08000490 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000490:	4922      	ldr	r1, [pc, #136]	; (800051c <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000492:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000494:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000498:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800049a:	4b21      	ldr	r3, [pc, #132]	; (8000520 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800049c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800049e:	b13a      	cbz	r2, 80004b0 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 80004a0:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 80004a4:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 80004a6:	b91a      	cbnz	r2, 80004b0 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004a8:	4b1e      	ldr	r3, [pc, #120]	; (8000524 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 80004aa:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 80004ae:	6018      	str	r0, [r3, #0]

080004b0 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004b0:	491d      	ldr	r1, [pc, #116]	; (8000528 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 80004b2:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 80004b4:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 80004b6:	b122      	cbz	r2, 80004c2 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004b8:	4b1c      	ldr	r3, [pc, #112]	; (800052c <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 80004ba:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 80004be:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 80004c0:	e008      	b.n	80004d4 <__tx_timer_done>

080004c2 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 80004c2:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80004c6:	4b1a      	ldr	r3, [pc, #104]	; (8000530 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 80004c8:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 80004ca:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 80004cc:	d101      	bne.n	80004d2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004ce:	4b19      	ldr	r3, [pc, #100]	; (8000534 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80004d0:	6818      	ldr	r0, [r3, #0]

080004d2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80004d2:	6008      	str	r0, [r1, #0]

080004d4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80004d4:	4b13      	ldr	r3, [pc, #76]	; (8000524 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80004d6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80004d8:	b912      	cbnz	r2, 80004e0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80004da:	4914      	ldr	r1, [pc, #80]	; (800052c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80004dc:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80004de:	b1d0      	cbz	r0, 8000516 <__tx_timer_nothing_expired>

080004e0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80004e0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80004e4:	4911      	ldr	r1, [pc, #68]	; (800052c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80004e6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80004e8:	b108      	cbz	r0, 80004ee <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80004ea:	f006 ffd7 	bl	800749c <_tx_timer_expiration_process>

080004ee <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80004ee:	4b0d      	ldr	r3, [pc, #52]	; (8000524 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 80004f0:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 80004f2:	b172      	cbz	r2, 8000512 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 80004f4:	f006 feb6 	bl	8007264 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004f8:	480f      	ldr	r0, [pc, #60]	; (8000538 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 80004fa:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 80004fc:	b949      	cbnz	r1, 8000512 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004fe:	480f      	ldr	r0, [pc, #60]	; (800053c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000500:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000502:	4a0f      	ldr	r2, [pc, #60]	; (8000540 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8000504:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000506:	480f      	ldr	r0, [pc, #60]	; (8000544 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000508:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 800050c:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 800050e:	d000      	beq.n	8000512 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000510:	6002      	str	r2, [r0, #0]

08000512 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 8000512:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000516 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000516:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 800051a:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800051c:	24011068 	.word	0x24011068
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000520:	24010b90 	.word	0x24010b90
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000524:	24011064 	.word	0x24011064
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000528:	24010b08 	.word	0x24010b08
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800052c:	24010b8c 	.word	0x24010b8c
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000530:	24010b98 	.word	0x24010b98
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000534:	24010c50 	.word	0x24010c50
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000538:	24010af4 	.word	0x24010af4
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800053c:	24010af8 	.word	0x24010af8
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000540:	24010afc 	.word	0x24010afc
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000544:	e000ed04 	.word	0xe000ed04

08000548 <__aeabi_uldivmod>:
 8000548:	b953      	cbnz	r3, 8000560 <__aeabi_uldivmod+0x18>
 800054a:	b94a      	cbnz	r2, 8000560 <__aeabi_uldivmod+0x18>
 800054c:	2900      	cmp	r1, #0
 800054e:	bf08      	it	eq
 8000550:	2800      	cmpeq	r0, #0
 8000552:	bf1c      	itt	ne
 8000554:	f04f 31ff 	movne.w	r1, #4294967295
 8000558:	f04f 30ff 	movne.w	r0, #4294967295
 800055c:	f000 b96e 	b.w	800083c <__aeabi_idiv0>
 8000560:	f1ad 0c08 	sub.w	ip, sp, #8
 8000564:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000568:	f000 f806 	bl	8000578 <__udivmoddi4>
 800056c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000570:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000574:	b004      	add	sp, #16
 8000576:	4770      	bx	lr

08000578 <__udivmoddi4>:
 8000578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800057c:	9d08      	ldr	r5, [sp, #32]
 800057e:	4604      	mov	r4, r0
 8000580:	468c      	mov	ip, r1
 8000582:	2b00      	cmp	r3, #0
 8000584:	f040 8083 	bne.w	800068e <__udivmoddi4+0x116>
 8000588:	428a      	cmp	r2, r1
 800058a:	4617      	mov	r7, r2
 800058c:	d947      	bls.n	800061e <__udivmoddi4+0xa6>
 800058e:	fab2 f282 	clz	r2, r2
 8000592:	b142      	cbz	r2, 80005a6 <__udivmoddi4+0x2e>
 8000594:	f1c2 0020 	rsb	r0, r2, #32
 8000598:	fa24 f000 	lsr.w	r0, r4, r0
 800059c:	4091      	lsls	r1, r2
 800059e:	4097      	lsls	r7, r2
 80005a0:	ea40 0c01 	orr.w	ip, r0, r1
 80005a4:	4094      	lsls	r4, r2
 80005a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80005aa:	0c23      	lsrs	r3, r4, #16
 80005ac:	fbbc f6f8 	udiv	r6, ip, r8
 80005b0:	fa1f fe87 	uxth.w	lr, r7
 80005b4:	fb08 c116 	mls	r1, r8, r6, ip
 80005b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005bc:	fb06 f10e 	mul.w	r1, r6, lr
 80005c0:	4299      	cmp	r1, r3
 80005c2:	d909      	bls.n	80005d8 <__udivmoddi4+0x60>
 80005c4:	18fb      	adds	r3, r7, r3
 80005c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80005ca:	f080 8119 	bcs.w	8000800 <__udivmoddi4+0x288>
 80005ce:	4299      	cmp	r1, r3
 80005d0:	f240 8116 	bls.w	8000800 <__udivmoddi4+0x288>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	443b      	add	r3, r7
 80005d8:	1a5b      	subs	r3, r3, r1
 80005da:	b2a4      	uxth	r4, r4
 80005dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e0:	fb08 3310 	mls	r3, r8, r0, r3
 80005e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80005ec:	45a6      	cmp	lr, r4
 80005ee:	d909      	bls.n	8000604 <__udivmoddi4+0x8c>
 80005f0:	193c      	adds	r4, r7, r4
 80005f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80005f6:	f080 8105 	bcs.w	8000804 <__udivmoddi4+0x28c>
 80005fa:	45a6      	cmp	lr, r4
 80005fc:	f240 8102 	bls.w	8000804 <__udivmoddi4+0x28c>
 8000600:	3802      	subs	r0, #2
 8000602:	443c      	add	r4, r7
 8000604:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000608:	eba4 040e 	sub.w	r4, r4, lr
 800060c:	2600      	movs	r6, #0
 800060e:	b11d      	cbz	r5, 8000618 <__udivmoddi4+0xa0>
 8000610:	40d4      	lsrs	r4, r2
 8000612:	2300      	movs	r3, #0
 8000614:	e9c5 4300 	strd	r4, r3, [r5]
 8000618:	4631      	mov	r1, r6
 800061a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800061e:	b902      	cbnz	r2, 8000622 <__udivmoddi4+0xaa>
 8000620:	deff      	udf	#255	; 0xff
 8000622:	fab2 f282 	clz	r2, r2
 8000626:	2a00      	cmp	r2, #0
 8000628:	d150      	bne.n	80006cc <__udivmoddi4+0x154>
 800062a:	1bcb      	subs	r3, r1, r7
 800062c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000630:	fa1f f887 	uxth.w	r8, r7
 8000634:	2601      	movs	r6, #1
 8000636:	fbb3 fcfe 	udiv	ip, r3, lr
 800063a:	0c21      	lsrs	r1, r4, #16
 800063c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000640:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000644:	fb08 f30c 	mul.w	r3, r8, ip
 8000648:	428b      	cmp	r3, r1
 800064a:	d907      	bls.n	800065c <__udivmoddi4+0xe4>
 800064c:	1879      	adds	r1, r7, r1
 800064e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000652:	d202      	bcs.n	800065a <__udivmoddi4+0xe2>
 8000654:	428b      	cmp	r3, r1
 8000656:	f200 80e9 	bhi.w	800082c <__udivmoddi4+0x2b4>
 800065a:	4684      	mov	ip, r0
 800065c:	1ac9      	subs	r1, r1, r3
 800065e:	b2a3      	uxth	r3, r4
 8000660:	fbb1 f0fe 	udiv	r0, r1, lr
 8000664:	fb0e 1110 	mls	r1, lr, r0, r1
 8000668:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800066c:	fb08 f800 	mul.w	r8, r8, r0
 8000670:	45a0      	cmp	r8, r4
 8000672:	d907      	bls.n	8000684 <__udivmoddi4+0x10c>
 8000674:	193c      	adds	r4, r7, r4
 8000676:	f100 33ff 	add.w	r3, r0, #4294967295
 800067a:	d202      	bcs.n	8000682 <__udivmoddi4+0x10a>
 800067c:	45a0      	cmp	r8, r4
 800067e:	f200 80d9 	bhi.w	8000834 <__udivmoddi4+0x2bc>
 8000682:	4618      	mov	r0, r3
 8000684:	eba4 0408 	sub.w	r4, r4, r8
 8000688:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800068c:	e7bf      	b.n	800060e <__udivmoddi4+0x96>
 800068e:	428b      	cmp	r3, r1
 8000690:	d909      	bls.n	80006a6 <__udivmoddi4+0x12e>
 8000692:	2d00      	cmp	r5, #0
 8000694:	f000 80b1 	beq.w	80007fa <__udivmoddi4+0x282>
 8000698:	2600      	movs	r6, #0
 800069a:	e9c5 0100 	strd	r0, r1, [r5]
 800069e:	4630      	mov	r0, r6
 80006a0:	4631      	mov	r1, r6
 80006a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006a6:	fab3 f683 	clz	r6, r3
 80006aa:	2e00      	cmp	r6, #0
 80006ac:	d14a      	bne.n	8000744 <__udivmoddi4+0x1cc>
 80006ae:	428b      	cmp	r3, r1
 80006b0:	d302      	bcc.n	80006b8 <__udivmoddi4+0x140>
 80006b2:	4282      	cmp	r2, r0
 80006b4:	f200 80b8 	bhi.w	8000828 <__udivmoddi4+0x2b0>
 80006b8:	1a84      	subs	r4, r0, r2
 80006ba:	eb61 0103 	sbc.w	r1, r1, r3
 80006be:	2001      	movs	r0, #1
 80006c0:	468c      	mov	ip, r1
 80006c2:	2d00      	cmp	r5, #0
 80006c4:	d0a8      	beq.n	8000618 <__udivmoddi4+0xa0>
 80006c6:	e9c5 4c00 	strd	r4, ip, [r5]
 80006ca:	e7a5      	b.n	8000618 <__udivmoddi4+0xa0>
 80006cc:	f1c2 0320 	rsb	r3, r2, #32
 80006d0:	fa20 f603 	lsr.w	r6, r0, r3
 80006d4:	4097      	lsls	r7, r2
 80006d6:	fa01 f002 	lsl.w	r0, r1, r2
 80006da:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80006de:	40d9      	lsrs	r1, r3
 80006e0:	4330      	orrs	r0, r6
 80006e2:	0c03      	lsrs	r3, r0, #16
 80006e4:	fbb1 f6fe 	udiv	r6, r1, lr
 80006e8:	fa1f f887 	uxth.w	r8, r7
 80006ec:	fb0e 1116 	mls	r1, lr, r6, r1
 80006f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006f4:	fb06 f108 	mul.w	r1, r6, r8
 80006f8:	4299      	cmp	r1, r3
 80006fa:	fa04 f402 	lsl.w	r4, r4, r2
 80006fe:	d909      	bls.n	8000714 <__udivmoddi4+0x19c>
 8000700:	18fb      	adds	r3, r7, r3
 8000702:	f106 3cff 	add.w	ip, r6, #4294967295
 8000706:	f080 808d 	bcs.w	8000824 <__udivmoddi4+0x2ac>
 800070a:	4299      	cmp	r1, r3
 800070c:	f240 808a 	bls.w	8000824 <__udivmoddi4+0x2ac>
 8000710:	3e02      	subs	r6, #2
 8000712:	443b      	add	r3, r7
 8000714:	1a5b      	subs	r3, r3, r1
 8000716:	b281      	uxth	r1, r0
 8000718:	fbb3 f0fe 	udiv	r0, r3, lr
 800071c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000720:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000724:	fb00 f308 	mul.w	r3, r0, r8
 8000728:	428b      	cmp	r3, r1
 800072a:	d907      	bls.n	800073c <__udivmoddi4+0x1c4>
 800072c:	1879      	adds	r1, r7, r1
 800072e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000732:	d273      	bcs.n	800081c <__udivmoddi4+0x2a4>
 8000734:	428b      	cmp	r3, r1
 8000736:	d971      	bls.n	800081c <__udivmoddi4+0x2a4>
 8000738:	3802      	subs	r0, #2
 800073a:	4439      	add	r1, r7
 800073c:	1acb      	subs	r3, r1, r3
 800073e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000742:	e778      	b.n	8000636 <__udivmoddi4+0xbe>
 8000744:	f1c6 0c20 	rsb	ip, r6, #32
 8000748:	fa03 f406 	lsl.w	r4, r3, r6
 800074c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000750:	431c      	orrs	r4, r3
 8000752:	fa20 f70c 	lsr.w	r7, r0, ip
 8000756:	fa01 f306 	lsl.w	r3, r1, r6
 800075a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800075e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000762:	431f      	orrs	r7, r3
 8000764:	0c3b      	lsrs	r3, r7, #16
 8000766:	fbb1 f9fe 	udiv	r9, r1, lr
 800076a:	fa1f f884 	uxth.w	r8, r4
 800076e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000772:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000776:	fb09 fa08 	mul.w	sl, r9, r8
 800077a:	458a      	cmp	sl, r1
 800077c:	fa02 f206 	lsl.w	r2, r2, r6
 8000780:	fa00 f306 	lsl.w	r3, r0, r6
 8000784:	d908      	bls.n	8000798 <__udivmoddi4+0x220>
 8000786:	1861      	adds	r1, r4, r1
 8000788:	f109 30ff 	add.w	r0, r9, #4294967295
 800078c:	d248      	bcs.n	8000820 <__udivmoddi4+0x2a8>
 800078e:	458a      	cmp	sl, r1
 8000790:	d946      	bls.n	8000820 <__udivmoddi4+0x2a8>
 8000792:	f1a9 0902 	sub.w	r9, r9, #2
 8000796:	4421      	add	r1, r4
 8000798:	eba1 010a 	sub.w	r1, r1, sl
 800079c:	b2bf      	uxth	r7, r7
 800079e:	fbb1 f0fe 	udiv	r0, r1, lr
 80007a2:	fb0e 1110 	mls	r1, lr, r0, r1
 80007a6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80007aa:	fb00 f808 	mul.w	r8, r0, r8
 80007ae:	45b8      	cmp	r8, r7
 80007b0:	d907      	bls.n	80007c2 <__udivmoddi4+0x24a>
 80007b2:	19e7      	adds	r7, r4, r7
 80007b4:	f100 31ff 	add.w	r1, r0, #4294967295
 80007b8:	d22e      	bcs.n	8000818 <__udivmoddi4+0x2a0>
 80007ba:	45b8      	cmp	r8, r7
 80007bc:	d92c      	bls.n	8000818 <__udivmoddi4+0x2a0>
 80007be:	3802      	subs	r0, #2
 80007c0:	4427      	add	r7, r4
 80007c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80007c6:	eba7 0708 	sub.w	r7, r7, r8
 80007ca:	fba0 8902 	umull	r8, r9, r0, r2
 80007ce:	454f      	cmp	r7, r9
 80007d0:	46c6      	mov	lr, r8
 80007d2:	4649      	mov	r1, r9
 80007d4:	d31a      	bcc.n	800080c <__udivmoddi4+0x294>
 80007d6:	d017      	beq.n	8000808 <__udivmoddi4+0x290>
 80007d8:	b15d      	cbz	r5, 80007f2 <__udivmoddi4+0x27a>
 80007da:	ebb3 020e 	subs.w	r2, r3, lr
 80007de:	eb67 0701 	sbc.w	r7, r7, r1
 80007e2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80007e6:	40f2      	lsrs	r2, r6
 80007e8:	ea4c 0202 	orr.w	r2, ip, r2
 80007ec:	40f7      	lsrs	r7, r6
 80007ee:	e9c5 2700 	strd	r2, r7, [r5]
 80007f2:	2600      	movs	r6, #0
 80007f4:	4631      	mov	r1, r6
 80007f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007fa:	462e      	mov	r6, r5
 80007fc:	4628      	mov	r0, r5
 80007fe:	e70b      	b.n	8000618 <__udivmoddi4+0xa0>
 8000800:	4606      	mov	r6, r0
 8000802:	e6e9      	b.n	80005d8 <__udivmoddi4+0x60>
 8000804:	4618      	mov	r0, r3
 8000806:	e6fd      	b.n	8000604 <__udivmoddi4+0x8c>
 8000808:	4543      	cmp	r3, r8
 800080a:	d2e5      	bcs.n	80007d8 <__udivmoddi4+0x260>
 800080c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000810:	eb69 0104 	sbc.w	r1, r9, r4
 8000814:	3801      	subs	r0, #1
 8000816:	e7df      	b.n	80007d8 <__udivmoddi4+0x260>
 8000818:	4608      	mov	r0, r1
 800081a:	e7d2      	b.n	80007c2 <__udivmoddi4+0x24a>
 800081c:	4660      	mov	r0, ip
 800081e:	e78d      	b.n	800073c <__udivmoddi4+0x1c4>
 8000820:	4681      	mov	r9, r0
 8000822:	e7b9      	b.n	8000798 <__udivmoddi4+0x220>
 8000824:	4666      	mov	r6, ip
 8000826:	e775      	b.n	8000714 <__udivmoddi4+0x19c>
 8000828:	4630      	mov	r0, r6
 800082a:	e74a      	b.n	80006c2 <__udivmoddi4+0x14a>
 800082c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000830:	4439      	add	r1, r7
 8000832:	e713      	b.n	800065c <__udivmoddi4+0xe4>
 8000834:	3802      	subs	r0, #2
 8000836:	443c      	add	r4, r7
 8000838:	e724      	b.n	8000684 <__udivmoddi4+0x10c>
 800083a:	bf00      	nop

0800083c <__aeabi_idiv0>:
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop

08000840 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af02      	add	r7, sp, #8
 8000846:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 800084c:	2334      	movs	r3, #52	; 0x34
 800084e:	9300      	str	r3, [sp, #0]
 8000850:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000854:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <tx_application_define+0x40>)
 8000856:	490b      	ldr	r1, [pc, #44]	; (8000884 <tx_application_define+0x44>)
 8000858:	480b      	ldr	r0, [pc, #44]	; (8000888 <tx_application_define+0x48>)
 800085a:	f007 fc9f 	bl	800819c <_txe_byte_pool_create>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d109      	bne.n	8000878 <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8000864:	4b08      	ldr	r3, [pc, #32]	; (8000888 <tx_application_define+0x48>)
 8000866:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 8000868:	68b8      	ldr	r0, [r7, #8]
 800086a:	f000 f80f 	bl	800088c <App_ThreadX_Init>
 800086e:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d000      	beq.n	8000878 <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 8000876:	e7fe      	b.n	8000876 <tx_application_define+0x36>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 8000878:	bf00      	nop
 800087a:	3710      	adds	r7, #16
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	2400faf0 	.word	0x2400faf0
 8000884:	08008530 	.word	0x08008530
 8000888:	2400fef0 	.word	0x2400fef0

0800088c <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08c      	sub	sp, #48	; 0x30
 8000890:	af08      	add	r7, sp, #32
 8000892:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000894:	2300      	movs	r3, #0
 8000896:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN App_ThreadX_MEM_POOL */
TX_BYTE_POOL *byte_pool=(TX_BYTE_POOL*) memory_ptr;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	60bb      	str	r3, [r7, #8]
(void)byte_pool;
  /* USER CODE END App_ThreadX_MEM_POOL */

  /* USER CODE BEGIN App_ThreadX_Init */
tx_thread_create(&thread_ptr,"my_thread",my_thread_entry,0x1234,thread_stack,THREAD_STACK_SIZE,15,13,1,TX_AUTO_START);
 800089c:	23b0      	movs	r3, #176	; 0xb0
 800089e:	9306      	str	r3, [sp, #24]
 80008a0:	2301      	movs	r3, #1
 80008a2:	9305      	str	r3, [sp, #20]
 80008a4:	2301      	movs	r3, #1
 80008a6:	9304      	str	r3, [sp, #16]
 80008a8:	230d      	movs	r3, #13
 80008aa:	9303      	str	r3, [sp, #12]
 80008ac:	230f      	movs	r3, #15
 80008ae:	9302      	str	r3, [sp, #8]
 80008b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008b4:	9301      	str	r3, [sp, #4]
 80008b6:	4b15      	ldr	r3, [pc, #84]	; (800090c <App_ThreadX_Init+0x80>)
 80008b8:	9300      	str	r3, [sp, #0]
 80008ba:	f241 2334 	movw	r3, #4660	; 0x1234
 80008be:	4a14      	ldr	r2, [pc, #80]	; (8000910 <App_ThreadX_Init+0x84>)
 80008c0:	4914      	ldr	r1, [pc, #80]	; (8000914 <App_ThreadX_Init+0x88>)
 80008c2:	4815      	ldr	r0, [pc, #84]	; (8000918 <App_ThreadX_Init+0x8c>)
 80008c4:	f007 fd0a 	bl	80082dc <_txe_thread_create>
tx_thread_create(&thread_ptr2,"my_thread2",my_thread_entry2,0x1234,thread_stack2,THREAD_STACK_SIZE,14,14,1,TX_AUTO_START);
 80008c8:	23b0      	movs	r3, #176	; 0xb0
 80008ca:	9306      	str	r3, [sp, #24]
 80008cc:	2301      	movs	r3, #1
 80008ce:	9305      	str	r3, [sp, #20]
 80008d0:	2301      	movs	r3, #1
 80008d2:	9304      	str	r3, [sp, #16]
 80008d4:	230e      	movs	r3, #14
 80008d6:	9303      	str	r3, [sp, #12]
 80008d8:	230e      	movs	r3, #14
 80008da:	9302      	str	r3, [sp, #8]
 80008dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008e0:	9301      	str	r3, [sp, #4]
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <App_ThreadX_Init+0x90>)
 80008e4:	9300      	str	r3, [sp, #0]
 80008e6:	f241 2334 	movw	r3, #4660	; 0x1234
 80008ea:	4a0d      	ldr	r2, [pc, #52]	; (8000920 <App_ThreadX_Init+0x94>)
 80008ec:	490d      	ldr	r1, [pc, #52]	; (8000924 <App_ThreadX_Init+0x98>)
 80008ee:	480e      	ldr	r0, [pc, #56]	; (8000928 <App_ThreadX_Init+0x9c>)
 80008f0:	f007 fcf4 	bl	80082dc <_txe_thread_create>
tx_trace_enable(&tracex_buffer,TRACEX_BUFFER_SIZE,30);
 80008f4:	221e      	movs	r2, #30
 80008f6:	f44f 417a 	mov.w	r1, #64000	; 0xfa00
 80008fa:	480c      	ldr	r0, [pc, #48]	; (800092c <App_ThreadX_Init+0xa0>)
 80008fc:	f007 f804 	bl	8007908 <_tx_trace_enable>

  /* USER CODE END App_ThreadX_Init */

  return ret;
 8000900:	68fb      	ldr	r3, [r7, #12]
}
 8000902:	4618      	mov	r0, r3
 8000904:	3710      	adds	r7, #16
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	2401048c 	.word	0x2401048c
 8000910:	0800093d 	.word	0x0800093d
 8000914:	08008544 	.word	0x08008544
 8000918:	2400ffdc 	.word	0x2400ffdc
 800091c:	2401008c 	.word	0x2401008c
 8000920:	08000961 	.word	0x08000961
 8000924:	08008550 	.word	0x08008550
 8000928:	2400ff2c 	.word	0x2400ff2c
 800092c:	24000000 	.word	0x24000000

08000930 <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000934:	f005 fcdc 	bl	80062f0 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}

0800093c <my_thread_entry>:

/* USER CODE BEGIN 1 */
void my_thread_entry(ULONG inital_input){
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	while(1){
		 HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin);
 8000944:	2102      	movs	r1, #2
 8000946:	4805      	ldr	r0, [pc, #20]	; (800095c <my_thread_entry+0x20>)
 8000948:	f001 fc23 	bl	8002192 <HAL_GPIO_TogglePin>
		 HAL_Delay(500);
 800094c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000950:	f000 fd30 	bl	80013b4 <HAL_Delay>
		 tx_thread_sleep(20);
 8000954:	2014      	movs	r0, #20
 8000956:	f005 fef9 	bl	800674c <_tx_thread_sleep>
		 HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin);
 800095a:	e7f3      	b.n	8000944 <my_thread_entry+0x8>
 800095c:	58021000 	.word	0x58021000

08000960 <my_thread_entry2>:
	}
}

void my_thread_entry2(ULONG inital_input){
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
	while(1){
		 HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin);
 8000968:	2101      	movs	r1, #1
 800096a:	4805      	ldr	r0, [pc, #20]	; (8000980 <my_thread_entry2+0x20>)
 800096c:	f001 fc11 	bl	8002192 <HAL_GPIO_TogglePin>
		 HAL_Delay(500);
 8000970:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000974:	f000 fd1e 	bl	80013b4 <HAL_Delay>
		 tx_thread_sleep(20);
 8000978:	2014      	movs	r0, #20
 800097a:	f005 fee7 	bl	800674c <_tx_thread_sleep>
		 HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin);
 800097e:	e7f3      	b.n	8000968 <my_thread_entry2+0x8>
 8000980:	58020400 	.word	0x58020400

08000984 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000988:	f000 fcb8 	bl	80012fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800098c:	f000 f816 	bl	80009bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000990:	f000 f924 	bl	8000bdc <MX_GPIO_Init>
  MX_ETH_Init();
 8000994:	f000 f882 	bl	8000a9c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000998:	f000 f8cc 	bl	8000b34 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 800099c:	f000 f916 	bl	8000bcc <MX_USB_OTG_HS_USB_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 80009a0:	f7ff ffc6 	bl	8000930 <MX_ThreadX_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin);
 80009a4:	2102      	movs	r1, #2
 80009a6:	4804      	ldr	r0, [pc, #16]	; (80009b8 <main+0x34>)
 80009a8:	f001 fbf3 	bl	8002192 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80009ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009b0:	f000 fd00 	bl	80013b4 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin);
 80009b4:	e7f6      	b.n	80009a4 <main+0x20>
 80009b6:	bf00      	nop
 80009b8:	58021000 	.word	0x58021000

080009bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b09c      	sub	sp, #112	; 0x70
 80009c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c6:	224c      	movs	r2, #76	; 0x4c
 80009c8:	2100      	movs	r1, #0
 80009ca:	4618      	mov	r0, r3
 80009cc:	f007 fd9c 	bl	8008508 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	2220      	movs	r2, #32
 80009d4:	2100      	movs	r1, #0
 80009d6:	4618      	mov	r0, r3
 80009d8:	f007 fd96 	bl	8008508 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80009dc:	2002      	movs	r0, #2
 80009de:	f001 fbf3 	bl	80021c8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80009e2:	2300      	movs	r3, #0
 80009e4:	603b      	str	r3, [r7, #0]
 80009e6:	4b2c      	ldr	r3, [pc, #176]	; (8000a98 <SystemClock_Config+0xdc>)
 80009e8:	699b      	ldr	r3, [r3, #24]
 80009ea:	4a2b      	ldr	r2, [pc, #172]	; (8000a98 <SystemClock_Config+0xdc>)
 80009ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009f0:	6193      	str	r3, [r2, #24]
 80009f2:	4b29      	ldr	r3, [pc, #164]	; (8000a98 <SystemClock_Config+0xdc>)
 80009f4:	699b      	ldr	r3, [r3, #24]
 80009f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009fa:	603b      	str	r3, [r7, #0]
 80009fc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009fe:	bf00      	nop
 8000a00:	4b25      	ldr	r3, [pc, #148]	; (8000a98 <SystemClock_Config+0xdc>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a0c:	d1f8      	bne.n	8000a00 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000a0e:	2321      	movs	r3, #33	; 0x21
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a12:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a16:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a20:	2302      	movs	r3, #2
 8000a22:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a24:	2304      	movs	r3, #4
 8000a26:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000a28:	f240 1313 	movw	r3, #275	; 0x113
 8000a2c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a32:	2304      	movs	r3, #4
 8000a34:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a36:	2302      	movs	r3, #2
 8000a38:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000a3a:	2304      	movs	r3, #4
 8000a3c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f001 fbf6 	bl	800223c <HAL_RCC_OscConfig>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a56:	f000 f9cf 	bl	8000df8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a5a:	233f      	movs	r3, #63	; 0x3f
 8000a5c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a5e:	2303      	movs	r3, #3
 8000a60:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a66:	2308      	movs	r3, #8
 8000a68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a6a:	2340      	movs	r3, #64	; 0x40
 8000a6c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a6e:	2340      	movs	r3, #64	; 0x40
 8000a70:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a76:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a78:	2340      	movs	r3, #64	; 0x40
 8000a7a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a7c:	1d3b      	adds	r3, r7, #4
 8000a7e:	2103      	movs	r1, #3
 8000a80:	4618      	mov	r0, r3
 8000a82:	f001 ff87 	bl	8002994 <HAL_RCC_ClockConfig>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000a8c:	f000 f9b4 	bl	8000df8 <Error_Handler>
  }
}
 8000a90:	bf00      	nop
 8000a92:	3770      	adds	r7, #112	; 0x70
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	58024800 	.word	0x58024800

08000a9c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000aa0:	4b1e      	ldr	r3, [pc, #120]	; (8000b1c <MX_ETH_Init+0x80>)
 8000aa2:	4a1f      	ldr	r2, [pc, #124]	; (8000b20 <MX_ETH_Init+0x84>)
 8000aa4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000aa6:	4b1f      	ldr	r3, [pc, #124]	; (8000b24 <MX_ETH_Init+0x88>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000aac:	4b1d      	ldr	r3, [pc, #116]	; (8000b24 <MX_ETH_Init+0x88>)
 8000aae:	2280      	movs	r2, #128	; 0x80
 8000ab0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000ab2:	4b1c      	ldr	r3, [pc, #112]	; (8000b24 <MX_ETH_Init+0x88>)
 8000ab4:	22e1      	movs	r2, #225	; 0xe1
 8000ab6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000ab8:	4b1a      	ldr	r3, [pc, #104]	; (8000b24 <MX_ETH_Init+0x88>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000abe:	4b19      	ldr	r3, [pc, #100]	; (8000b24 <MX_ETH_Init+0x88>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000ac4:	4b17      	ldr	r3, [pc, #92]	; (8000b24 <MX_ETH_Init+0x88>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000aca:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <MX_ETH_Init+0x80>)
 8000acc:	4a15      	ldr	r2, [pc, #84]	; (8000b24 <MX_ETH_Init+0x88>)
 8000ace:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <MX_ETH_Init+0x80>)
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000ad6:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <MX_ETH_Init+0x80>)
 8000ad8:	4a13      	ldr	r2, [pc, #76]	; (8000b28 <MX_ETH_Init+0x8c>)
 8000ada:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000adc:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <MX_ETH_Init+0x80>)
 8000ade:	4a13      	ldr	r2, [pc, #76]	; (8000b2c <MX_ETH_Init+0x90>)
 8000ae0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 4;
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <MX_ETH_Init+0x80>)
 8000ae4:	2204      	movs	r2, #4
 8000ae6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000ae8:	480c      	ldr	r0, [pc, #48]	; (8000b1c <MX_ETH_Init+0x80>)
 8000aea:	f000 fd7b 	bl	80015e4 <HAL_ETH_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_ETH_Init+0x5c>
  {
    Error_Handler();
 8000af4:	f000 f980 	bl	8000df8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000af8:	2234      	movs	r2, #52	; 0x34
 8000afa:	2100      	movs	r1, #0
 8000afc:	480c      	ldr	r0, [pc, #48]	; (8000b30 <MX_ETH_Init+0x94>)
 8000afe:	f007 fd03 	bl	8008508 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000b02:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <MX_ETH_Init+0x94>)
 8000b04:	2221      	movs	r2, #33	; 0x21
 8000b06:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000b08:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <MX_ETH_Init+0x94>)
 8000b0a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b0e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000b10:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <MX_ETH_Init+0x94>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	2401091c 	.word	0x2401091c
 8000b20:	40028000 	.word	0x40028000
 8000b24:	2400ff24 	.word	0x2400ff24
 8000b28:	2400fa74 	.word	0x2400fa74
 8000b2c:	2400fa14 	.word	0x2400fa14
 8000b30:	240109a4 	.word	0x240109a4

08000b34 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b38:	4b22      	ldr	r3, [pc, #136]	; (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000b3a:	4a23      	ldr	r2, [pc, #140]	; (8000bc8 <MX_USART3_UART_Init+0x94>)
 8000b3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b3e:	4b21      	ldr	r3, [pc, #132]	; (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000b40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b46:	4b1f      	ldr	r3, [pc, #124]	; (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b4c:	4b1d      	ldr	r3, [pc, #116]	; (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b52:	4b1c      	ldr	r3, [pc, #112]	; (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b58:	4b1a      	ldr	r3, [pc, #104]	; (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5e:	4b19      	ldr	r3, [pc, #100]	; (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b64:	4b17      	ldr	r3, [pc, #92]	; (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b6a:	4b16      	ldr	r3, [pc, #88]	; (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b70:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b76:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b7c:	4811      	ldr	r0, [pc, #68]	; (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000b7e:	f004 f8e7 	bl	8004d50 <HAL_UART_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b88:	f000 f936 	bl	8000df8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	480d      	ldr	r0, [pc, #52]	; (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000b90:	f005 f97a 	bl	8005e88 <HAL_UARTEx_SetTxFifoThreshold>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b9a:	f000 f92d 	bl	8000df8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	4808      	ldr	r0, [pc, #32]	; (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000ba2:	f005 f9af 	bl	8005f04 <HAL_UARTEx_SetRxFifoThreshold>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000bac:	f000 f924 	bl	8000df8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000bb0:	4804      	ldr	r0, [pc, #16]	; (8000bc4 <MX_USART3_UART_Init+0x90>)
 8000bb2:	f005 f930 	bl	8005e16 <HAL_UARTEx_DisableFifoMode>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000bbc:	f000 f91c 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	2401088c 	.word	0x2401088c
 8000bc8:	40004800 	.word	0x40004800

08000bcc <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
	...

08000bdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08c      	sub	sp, #48	; 0x30
 8000be0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be2:	f107 031c 	add.w	r3, r7, #28
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
 8000bf0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf2:	4b71      	ldr	r3, [pc, #452]	; (8000db8 <MX_GPIO_Init+0x1dc>)
 8000bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf8:	4a6f      	ldr	r2, [pc, #444]	; (8000db8 <MX_GPIO_Init+0x1dc>)
 8000bfa:	f043 0304 	orr.w	r3, r3, #4
 8000bfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c02:	4b6d      	ldr	r3, [pc, #436]	; (8000db8 <MX_GPIO_Init+0x1dc>)
 8000c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c08:	f003 0304 	and.w	r3, r3, #4
 8000c0c:	61bb      	str	r3, [r7, #24]
 8000c0e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c10:	4b69      	ldr	r3, [pc, #420]	; (8000db8 <MX_GPIO_Init+0x1dc>)
 8000c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c16:	4a68      	ldr	r2, [pc, #416]	; (8000db8 <MX_GPIO_Init+0x1dc>)
 8000c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c20:	4b65      	ldr	r3, [pc, #404]	; (8000db8 <MX_GPIO_Init+0x1dc>)
 8000c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c2a:	617b      	str	r3, [r7, #20]
 8000c2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	4b62      	ldr	r3, [pc, #392]	; (8000db8 <MX_GPIO_Init+0x1dc>)
 8000c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c34:	4a60      	ldr	r2, [pc, #384]	; (8000db8 <MX_GPIO_Init+0x1dc>)
 8000c36:	f043 0301 	orr.w	r3, r3, #1
 8000c3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c3e:	4b5e      	ldr	r3, [pc, #376]	; (8000db8 <MX_GPIO_Init+0x1dc>)
 8000c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c44:	f003 0301 	and.w	r3, r3, #1
 8000c48:	613b      	str	r3, [r7, #16]
 8000c4a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4c:	4b5a      	ldr	r3, [pc, #360]	; (8000db8 <MX_GPIO_Init+0x1dc>)
 8000c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c52:	4a59      	ldr	r2, [pc, #356]	; (8000db8 <MX_GPIO_Init+0x1dc>)
 8000c54:	f043 0302 	orr.w	r3, r3, #2
 8000c58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c5c:	4b56      	ldr	r3, [pc, #344]	; (8000db8 <MX_GPIO_Init+0x1dc>)
 8000c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c62:	f003 0302 	and.w	r3, r3, #2
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c6a:	4b53      	ldr	r3, [pc, #332]	; (8000db8 <MX_GPIO_Init+0x1dc>)
 8000c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c70:	4a51      	ldr	r2, [pc, #324]	; (8000db8 <MX_GPIO_Init+0x1dc>)
 8000c72:	f043 0308 	orr.w	r3, r3, #8
 8000c76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c7a:	4b4f      	ldr	r3, [pc, #316]	; (8000db8 <MX_GPIO_Init+0x1dc>)
 8000c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c80:	f003 0308 	and.w	r3, r3, #8
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c88:	4b4b      	ldr	r3, [pc, #300]	; (8000db8 <MX_GPIO_Init+0x1dc>)
 8000c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8e:	4a4a      	ldr	r2, [pc, #296]	; (8000db8 <MX_GPIO_Init+0x1dc>)
 8000c90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c98:	4b47      	ldr	r3, [pc, #284]	; (8000db8 <MX_GPIO_Init+0x1dc>)
 8000c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ca2:	607b      	str	r3, [r7, #4]
 8000ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ca6:	4b44      	ldr	r3, [pc, #272]	; (8000db8 <MX_GPIO_Init+0x1dc>)
 8000ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cac:	4a42      	ldr	r2, [pc, #264]	; (8000db8 <MX_GPIO_Init+0x1dc>)
 8000cae:	f043 0310 	orr.w	r3, r3, #16
 8000cb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cb6:	4b40      	ldr	r3, [pc, #256]	; (8000db8 <MX_GPIO_Init+0x1dc>)
 8000cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cbc:	f003 0310 	and.w	r3, r3, #16
 8000cc0:	603b      	str	r3, [r7, #0]
 8000cc2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f244 0101 	movw	r1, #16385	; 0x4001
 8000cca:	483c      	ldr	r0, [pc, #240]	; (8000dbc <MX_GPIO_Init+0x1e0>)
 8000ccc:	f001 fa48 	bl	8002160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cd6:	483a      	ldr	r0, [pc, #232]	; (8000dc0 <MX_GPIO_Init+0x1e4>)
 8000cd8:	f001 fa42 	bl	8002160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2102      	movs	r1, #2
 8000ce0:	4838      	ldr	r0, [pc, #224]	; (8000dc4 <MX_GPIO_Init+0x1e8>)
 8000ce2:	f001 fa3d 	bl	8002160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ce6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cec:	2300      	movs	r3, #0
 8000cee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cf4:	f107 031c 	add.w	r3, r7, #28
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4833      	ldr	r0, [pc, #204]	; (8000dc8 <MX_GPIO_Init+0x1ec>)
 8000cfc:	f001 f888 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000d00:	f244 0301 	movw	r3, #16385	; 0x4001
 8000d04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d06:	2301      	movs	r3, #1
 8000d08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d12:	f107 031c 	add.w	r3, r7, #28
 8000d16:	4619      	mov	r1, r3
 8000d18:	4828      	ldr	r0, [pc, #160]	; (8000dbc <MX_GPIO_Init+0x1e0>)
 8000d1a:	f001 f879 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000d1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d24:	2301      	movs	r3, #1
 8000d26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000d30:	f107 031c 	add.w	r3, r7, #28
 8000d34:	4619      	mov	r1, r3
 8000d36:	4822      	ldr	r0, [pc, #136]	; (8000dc0 <MX_GPIO_Init+0x1e4>)
 8000d38:	f001 f86a 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000d3c:	2380      	movs	r3, #128	; 0x80
 8000d3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d40:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000d4a:	f107 031c 	add.w	r3, r7, #28
 8000d4e:	4619      	mov	r1, r3
 8000d50:	481e      	ldr	r0, [pc, #120]	; (8000dcc <MX_GPIO_Init+0x1f0>)
 8000d52:	f001 f85d 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000d56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d64:	f107 031c 	add.w	r3, r7, #28
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4819      	ldr	r0, [pc, #100]	; (8000dd0 <MX_GPIO_Init+0x1f4>)
 8000d6c:	f001 f850 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000d70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d76:	2302      	movs	r3, #2
 8000d78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000d82:	230a      	movs	r3, #10
 8000d84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000d86:	f107 031c 	add.w	r3, r7, #28
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4810      	ldr	r0, [pc, #64]	; (8000dd0 <MX_GPIO_Init+0x1f4>)
 8000d8e:	f001 f83f 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000d92:	2302      	movs	r3, #2
 8000d94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d96:	2301      	movs	r3, #1
 8000d98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000da2:	f107 031c 	add.w	r3, r7, #28
 8000da6:	4619      	mov	r1, r3
 8000da8:	4806      	ldr	r0, [pc, #24]	; (8000dc4 <MX_GPIO_Init+0x1e8>)
 8000daa:	f001 f831 	bl	8001e10 <HAL_GPIO_Init>

}
 8000dae:	bf00      	nop
 8000db0:	3730      	adds	r7, #48	; 0x30
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	58024400 	.word	0x58024400
 8000dbc:	58020400 	.word	0x58020400
 8000dc0:	58020c00 	.word	0x58020c00
 8000dc4:	58021000 	.word	0x58021000
 8000dc8:	58020800 	.word	0x58020800
 8000dcc:	58021800 	.word	0x58021800
 8000dd0:	58020000 	.word	0x58020000

08000dd4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a04      	ldr	r2, [pc, #16]	; (8000df4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d101      	bne.n	8000dea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000de6:	f000 fac5 	bl	8001374 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40001000 	.word	0x40001000

08000df8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dfc:	b672      	cpsid	i
}
 8000dfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <Error_Handler+0x8>
	...

08000e04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <HAL_MspInit+0x30>)
 8000e0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e10:	4a08      	ldr	r2, [pc, #32]	; (8000e34 <HAL_MspInit+0x30>)
 8000e12:	f043 0302 	orr.w	r3, r3, #2
 8000e16:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_MspInit+0x30>)
 8000e1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e20:	f003 0302 	and.w	r3, r3, #2
 8000e24:	607b      	str	r3, [r7, #4]
 8000e26:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	58024400 	.word	0x58024400

08000e38 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08e      	sub	sp, #56	; 0x38
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a59      	ldr	r2, [pc, #356]	; (8000fbc <HAL_ETH_MspInit+0x184>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	f040 80ab 	bne.w	8000fb2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000e5c:	4b58      	ldr	r3, [pc, #352]	; (8000fc0 <HAL_ETH_MspInit+0x188>)
 8000e5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e62:	4a57      	ldr	r2, [pc, #348]	; (8000fc0 <HAL_ETH_MspInit+0x188>)
 8000e64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e68:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e6c:	4b54      	ldr	r3, [pc, #336]	; (8000fc0 <HAL_ETH_MspInit+0x188>)
 8000e6e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e76:	623b      	str	r3, [r7, #32]
 8000e78:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000e7a:	4b51      	ldr	r3, [pc, #324]	; (8000fc0 <HAL_ETH_MspInit+0x188>)
 8000e7c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e80:	4a4f      	ldr	r2, [pc, #316]	; (8000fc0 <HAL_ETH_MspInit+0x188>)
 8000e82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e86:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e8a:	4b4d      	ldr	r3, [pc, #308]	; (8000fc0 <HAL_ETH_MspInit+0x188>)
 8000e8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e94:	61fb      	str	r3, [r7, #28]
 8000e96:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000e98:	4b49      	ldr	r3, [pc, #292]	; (8000fc0 <HAL_ETH_MspInit+0x188>)
 8000e9a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e9e:	4a48      	ldr	r2, [pc, #288]	; (8000fc0 <HAL_ETH_MspInit+0x188>)
 8000ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ea8:	4b45      	ldr	r3, [pc, #276]	; (8000fc0 <HAL_ETH_MspInit+0x188>)
 8000eaa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb2:	61bb      	str	r3, [r7, #24]
 8000eb4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb6:	4b42      	ldr	r3, [pc, #264]	; (8000fc0 <HAL_ETH_MspInit+0x188>)
 8000eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ebc:	4a40      	ldr	r2, [pc, #256]	; (8000fc0 <HAL_ETH_MspInit+0x188>)
 8000ebe:	f043 0304 	orr.w	r3, r3, #4
 8000ec2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ec6:	4b3e      	ldr	r3, [pc, #248]	; (8000fc0 <HAL_ETH_MspInit+0x188>)
 8000ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ecc:	f003 0304 	and.w	r3, r3, #4
 8000ed0:	617b      	str	r3, [r7, #20]
 8000ed2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed4:	4b3a      	ldr	r3, [pc, #232]	; (8000fc0 <HAL_ETH_MspInit+0x188>)
 8000ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eda:	4a39      	ldr	r2, [pc, #228]	; (8000fc0 <HAL_ETH_MspInit+0x188>)
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ee4:	4b36      	ldr	r3, [pc, #216]	; (8000fc0 <HAL_ETH_MspInit+0x188>)
 8000ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef2:	4b33      	ldr	r3, [pc, #204]	; (8000fc0 <HAL_ETH_MspInit+0x188>)
 8000ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef8:	4a31      	ldr	r2, [pc, #196]	; (8000fc0 <HAL_ETH_MspInit+0x188>)
 8000efa:	f043 0302 	orr.w	r3, r3, #2
 8000efe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f02:	4b2f      	ldr	r3, [pc, #188]	; (8000fc0 <HAL_ETH_MspInit+0x188>)
 8000f04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f08:	f003 0302 	and.w	r3, r3, #2
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f10:	4b2b      	ldr	r3, [pc, #172]	; (8000fc0 <HAL_ETH_MspInit+0x188>)
 8000f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f16:	4a2a      	ldr	r2, [pc, #168]	; (8000fc0 <HAL_ETH_MspInit+0x188>)
 8000f18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f20:	4b27      	ldr	r3, [pc, #156]	; (8000fc0 <HAL_ETH_MspInit+0x188>)
 8000f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000f2e:	2332      	movs	r3, #50	; 0x32
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f32:	2302      	movs	r3, #2
 8000f34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f3e:	230b      	movs	r3, #11
 8000f40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f46:	4619      	mov	r1, r3
 8000f48:	481e      	ldr	r0, [pc, #120]	; (8000fc4 <HAL_ETH_MspInit+0x18c>)
 8000f4a:	f000 ff61 	bl	8001e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000f4e:	2386      	movs	r3, #134	; 0x86
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f52:	2302      	movs	r3, #2
 8000f54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f5e:	230b      	movs	r3, #11
 8000f60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f66:	4619      	mov	r1, r3
 8000f68:	4817      	ldr	r0, [pc, #92]	; (8000fc8 <HAL_ETH_MspInit+0x190>)
 8000f6a:	f000 ff51 	bl	8001e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000f6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	2302      	movs	r3, #2
 8000f76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f80:	230b      	movs	r3, #11
 8000f82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000f84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4810      	ldr	r0, [pc, #64]	; (8000fcc <HAL_ETH_MspInit+0x194>)
 8000f8c:	f000 ff40 	bl	8001e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000f90:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f96:	2302      	movs	r3, #2
 8000f98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fa2:	230b      	movs	r3, #11
 8000fa4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000faa:	4619      	mov	r1, r3
 8000fac:	4808      	ldr	r0, [pc, #32]	; (8000fd0 <HAL_ETH_MspInit+0x198>)
 8000fae:	f000 ff2f 	bl	8001e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000fb2:	bf00      	nop
 8000fb4:	3738      	adds	r7, #56	; 0x38
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40028000 	.word	0x40028000
 8000fc0:	58024400 	.word	0x58024400
 8000fc4:	58020800 	.word	0x58020800
 8000fc8:	58020000 	.word	0x58020000
 8000fcc:	58020400 	.word	0x58020400
 8000fd0:	58021800 	.word	0x58021800

08000fd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b0b6      	sub	sp, #216	; 0xd8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fec:	f107 0310 	add.w	r3, r7, #16
 8000ff0:	22b4      	movs	r2, #180	; 0xb4
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f007 fa87 	bl	8008508 <memset>
  if(huart->Instance==USART3)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a25      	ldr	r2, [pc, #148]	; (8001094 <HAL_UART_MspInit+0xc0>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d142      	bne.n	800108a <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001004:	2302      	movs	r3, #2
 8001006:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001008:	2300      	movs	r3, #0
 800100a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800100e:	f107 0310 	add.w	r3, r7, #16
 8001012:	4618      	mov	r0, r3
 8001014:	f002 f88c 	bl	8003130 <HAL_RCCEx_PeriphCLKConfig>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800101e:	f7ff feeb 	bl	8000df8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001022:	4b1d      	ldr	r3, [pc, #116]	; (8001098 <HAL_UART_MspInit+0xc4>)
 8001024:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001028:	4a1b      	ldr	r2, [pc, #108]	; (8001098 <HAL_UART_MspInit+0xc4>)
 800102a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800102e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001032:	4b19      	ldr	r3, [pc, #100]	; (8001098 <HAL_UART_MspInit+0xc4>)
 8001034:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001038:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001040:	4b15      	ldr	r3, [pc, #84]	; (8001098 <HAL_UART_MspInit+0xc4>)
 8001042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001046:	4a14      	ldr	r2, [pc, #80]	; (8001098 <HAL_UART_MspInit+0xc4>)
 8001048:	f043 0308 	orr.w	r3, r3, #8
 800104c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001050:	4b11      	ldr	r3, [pc, #68]	; (8001098 <HAL_UART_MspInit+0xc4>)
 8001052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001056:	f003 0308 	and.w	r3, r3, #8
 800105a:	60bb      	str	r3, [r7, #8]
 800105c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 800105e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001062:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001066:	2302      	movs	r3, #2
 8001068:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	2300      	movs	r3, #0
 8001074:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001078:	2307      	movs	r3, #7
 800107a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800107e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001082:	4619      	mov	r1, r3
 8001084:	4805      	ldr	r0, [pc, #20]	; (800109c <HAL_UART_MspInit+0xc8>)
 8001086:	f000 fec3 	bl	8001e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800108a:	bf00      	nop
 800108c:	37d8      	adds	r7, #216	; 0xd8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40004800 	.word	0x40004800
 8001098:	58024400 	.word	0x58024400
 800109c:	58020c00 	.word	0x58020c00

080010a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b090      	sub	sp, #64	; 0x40
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b0f      	cmp	r3, #15
 80010ac:	d827      	bhi.n	80010fe <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80010ae:	2200      	movs	r2, #0
 80010b0:	6879      	ldr	r1, [r7, #4]
 80010b2:	2036      	movs	r0, #54	; 0x36
 80010b4:	f000 fa6e 	bl	8001594 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010b8:	2036      	movs	r0, #54	; 0x36
 80010ba:	f000 fa85 	bl	80015c8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80010be:	4a29      	ldr	r2, [pc, #164]	; (8001164 <HAL_InitTick+0xc4>)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80010c4:	4b28      	ldr	r3, [pc, #160]	; (8001168 <HAL_InitTick+0xc8>)
 80010c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010ca:	4a27      	ldr	r2, [pc, #156]	; (8001168 <HAL_InitTick+0xc8>)
 80010cc:	f043 0310 	orr.w	r3, r3, #16
 80010d0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010d4:	4b24      	ldr	r3, [pc, #144]	; (8001168 <HAL_InitTick+0xc8>)
 80010d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010da:	f003 0310 	and.w	r3, r3, #16
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010e2:	f107 0210 	add.w	r2, r7, #16
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	4611      	mov	r1, r2
 80010ec:	4618      	mov	r0, r3
 80010ee:	f001 ffdd 	bl	80030ac <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80010f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010f4:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80010f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d106      	bne.n	800110a <HAL_InitTick+0x6a>
 80010fc:	e001      	b.n	8001102 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e02b      	b.n	800115a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001102:	f001 ffa7 	bl	8003054 <HAL_RCC_GetPCLK1Freq>
 8001106:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001108:	e004      	b.n	8001114 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800110a:	f001 ffa3 	bl	8003054 <HAL_RCC_GetPCLK1Freq>
 800110e:	4603      	mov	r3, r0
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001116:	4a15      	ldr	r2, [pc, #84]	; (800116c <HAL_InitTick+0xcc>)
 8001118:	fba2 2303 	umull	r2, r3, r2, r3
 800111c:	0c9b      	lsrs	r3, r3, #18
 800111e:	3b01      	subs	r3, #1
 8001120:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001122:	4b13      	ldr	r3, [pc, #76]	; (8001170 <HAL_InitTick+0xd0>)
 8001124:	4a13      	ldr	r2, [pc, #76]	; (8001174 <HAL_InitTick+0xd4>)
 8001126:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001128:	4b11      	ldr	r3, [pc, #68]	; (8001170 <HAL_InitTick+0xd0>)
 800112a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800112e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001130:	4a0f      	ldr	r2, [pc, #60]	; (8001170 <HAL_InitTick+0xd0>)
 8001132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001134:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001136:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <HAL_InitTick+0xd0>)
 8001138:	2200      	movs	r2, #0
 800113a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800113c:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <HAL_InitTick+0xd0>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001142:	480b      	ldr	r0, [pc, #44]	; (8001170 <HAL_InitTick+0xd0>)
 8001144:	f003 fb10 	bl	8004768 <HAL_TIM_Base_Init>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d104      	bne.n	8001158 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800114e:	4808      	ldr	r0, [pc, #32]	; (8001170 <HAL_InitTick+0xd0>)
 8001150:	f003 fb6c 	bl	800482c <HAL_TIM_Base_Start_IT>
 8001154:	4603      	mov	r3, r0
 8001156:	e000      	b.n	800115a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001158:	2301      	movs	r3, #1
}
 800115a:	4618      	mov	r0, r3
 800115c:	3740      	adds	r7, #64	; 0x40
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	2400fa08 	.word	0x2400fa08
 8001168:	58024400 	.word	0x58024400
 800116c:	431bde83 	.word	0x431bde83
 8001170:	240109d8 	.word	0x240109d8
 8001174:	40001000 	.word	0x40001000

08001178 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800117c:	e7fe      	b.n	800117c <NMI_Handler+0x4>

0800117e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001182:	e7fe      	b.n	8001182 <HardFault_Handler+0x4>

08001184 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001188:	e7fe      	b.n	8001188 <MemManage_Handler+0x4>

0800118a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800118e:	e7fe      	b.n	800118e <BusFault_Handler+0x4>

08001190 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001194:	e7fe      	b.n	8001194 <UsageFault_Handler+0x4>

08001196 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80011a8:	4802      	ldr	r0, [pc, #8]	; (80011b4 <TIM6_DAC_IRQHandler+0x10>)
 80011aa:	f003 fbc5 	bl	8004938 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	240109d8 	.word	0x240109d8

080011b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011bc:	4b32      	ldr	r3, [pc, #200]	; (8001288 <SystemInit+0xd0>)
 80011be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011c2:	4a31      	ldr	r2, [pc, #196]	; (8001288 <SystemInit+0xd0>)
 80011c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011cc:	4b2f      	ldr	r3, [pc, #188]	; (800128c <SystemInit+0xd4>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 030f 	and.w	r3, r3, #15
 80011d4:	2b06      	cmp	r3, #6
 80011d6:	d807      	bhi.n	80011e8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011d8:	4b2c      	ldr	r3, [pc, #176]	; (800128c <SystemInit+0xd4>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f023 030f 	bic.w	r3, r3, #15
 80011e0:	4a2a      	ldr	r2, [pc, #168]	; (800128c <SystemInit+0xd4>)
 80011e2:	f043 0307 	orr.w	r3, r3, #7
 80011e6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80011e8:	4b29      	ldr	r3, [pc, #164]	; (8001290 <SystemInit+0xd8>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a28      	ldr	r2, [pc, #160]	; (8001290 <SystemInit+0xd8>)
 80011ee:	f043 0301 	orr.w	r3, r3, #1
 80011f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011f4:	4b26      	ldr	r3, [pc, #152]	; (8001290 <SystemInit+0xd8>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80011fa:	4b25      	ldr	r3, [pc, #148]	; (8001290 <SystemInit+0xd8>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	4924      	ldr	r1, [pc, #144]	; (8001290 <SystemInit+0xd8>)
 8001200:	4b24      	ldr	r3, [pc, #144]	; (8001294 <SystemInit+0xdc>)
 8001202:	4013      	ands	r3, r2
 8001204:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001206:	4b21      	ldr	r3, [pc, #132]	; (800128c <SystemInit+0xd4>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0308 	and.w	r3, r3, #8
 800120e:	2b00      	cmp	r3, #0
 8001210:	d007      	beq.n	8001222 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001212:	4b1e      	ldr	r3, [pc, #120]	; (800128c <SystemInit+0xd4>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f023 030f 	bic.w	r3, r3, #15
 800121a:	4a1c      	ldr	r2, [pc, #112]	; (800128c <SystemInit+0xd4>)
 800121c:	f043 0307 	orr.w	r3, r3, #7
 8001220:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001222:	4b1b      	ldr	r3, [pc, #108]	; (8001290 <SystemInit+0xd8>)
 8001224:	2200      	movs	r2, #0
 8001226:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001228:	4b19      	ldr	r3, [pc, #100]	; (8001290 <SystemInit+0xd8>)
 800122a:	2200      	movs	r2, #0
 800122c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800122e:	4b18      	ldr	r3, [pc, #96]	; (8001290 <SystemInit+0xd8>)
 8001230:	2200      	movs	r2, #0
 8001232:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001234:	4b16      	ldr	r3, [pc, #88]	; (8001290 <SystemInit+0xd8>)
 8001236:	4a18      	ldr	r2, [pc, #96]	; (8001298 <SystemInit+0xe0>)
 8001238:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800123a:	4b15      	ldr	r3, [pc, #84]	; (8001290 <SystemInit+0xd8>)
 800123c:	4a17      	ldr	r2, [pc, #92]	; (800129c <SystemInit+0xe4>)
 800123e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001240:	4b13      	ldr	r3, [pc, #76]	; (8001290 <SystemInit+0xd8>)
 8001242:	4a17      	ldr	r2, [pc, #92]	; (80012a0 <SystemInit+0xe8>)
 8001244:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001246:	4b12      	ldr	r3, [pc, #72]	; (8001290 <SystemInit+0xd8>)
 8001248:	2200      	movs	r2, #0
 800124a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800124c:	4b10      	ldr	r3, [pc, #64]	; (8001290 <SystemInit+0xd8>)
 800124e:	4a14      	ldr	r2, [pc, #80]	; (80012a0 <SystemInit+0xe8>)
 8001250:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001252:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <SystemInit+0xd8>)
 8001254:	2200      	movs	r2, #0
 8001256:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001258:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <SystemInit+0xd8>)
 800125a:	4a11      	ldr	r2, [pc, #68]	; (80012a0 <SystemInit+0xe8>)
 800125c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800125e:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <SystemInit+0xd8>)
 8001260:	2200      	movs	r2, #0
 8001262:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001264:	4b0a      	ldr	r3, [pc, #40]	; (8001290 <SystemInit+0xd8>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a09      	ldr	r2, [pc, #36]	; (8001290 <SystemInit+0xd8>)
 800126a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800126e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001270:	4b07      	ldr	r3, [pc, #28]	; (8001290 <SystemInit+0xd8>)
 8001272:	2200      	movs	r2, #0
 8001274:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001276:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <SystemInit+0xec>)
 8001278:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800127c:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800127e:	bf00      	nop
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	e000ed00 	.word	0xe000ed00
 800128c:	52002000 	.word	0x52002000
 8001290:	58024400 	.word	0x58024400
 8001294:	eaf6ed7f 	.word	0xeaf6ed7f
 8001298:	02020200 	.word	0x02020200
 800129c:	01ff0000 	.word	0x01ff0000
 80012a0:	01010280 	.word	0x01010280
 80012a4:	52004000 	.word	0x52004000

080012a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80012a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80012ac:	f7ff ff84 	bl	80011b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012b0:	480c      	ldr	r0, [pc, #48]	; (80012e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012b2:	490d      	ldr	r1, [pc, #52]	; (80012e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012b4:	4a0d      	ldr	r2, [pc, #52]	; (80012ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012b8:	e002      	b.n	80012c0 <LoopCopyDataInit>

080012ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012be:	3304      	adds	r3, #4

080012c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012c4:	d3f9      	bcc.n	80012ba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012c6:	4a0a      	ldr	r2, [pc, #40]	; (80012f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012c8:	4c0a      	ldr	r4, [pc, #40]	; (80012f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012cc:	e001      	b.n	80012d2 <LoopFillZerobss>

080012ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012d0:	3204      	adds	r2, #4

080012d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012d4:	d3fb      	bcc.n	80012ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012d6:	f007 f8f3 	bl	80084c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012da:	f7ff fb53 	bl	8000984 <main>
  bx  lr
 80012de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012e0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80012e4:	2400fa00 	.word	0x2400fa00
  ldr r1, =_edata
 80012e8:	2400fa14 	.word	0x2400fa14
  ldr r2, =_sidata
 80012ec:	080085b8 	.word	0x080085b8
  ldr r2, =_sbss
 80012f0:	2400fad4 	.word	0x2400fad4
  ldr r4, =_ebss
 80012f4:	2401109c 	.word	0x2401109c

080012f8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012f8:	e7fe      	b.n	80012f8 <ADC3_IRQHandler>
	...

080012fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001302:	2003      	movs	r0, #3
 8001304:	f000 f93b 	bl	800157e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001308:	f001 fcfa 	bl	8002d00 <HAL_RCC_GetSysClockFreq>
 800130c:	4602      	mov	r2, r0
 800130e:	4b15      	ldr	r3, [pc, #84]	; (8001364 <HAL_Init+0x68>)
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	0a1b      	lsrs	r3, r3, #8
 8001314:	f003 030f 	and.w	r3, r3, #15
 8001318:	4913      	ldr	r1, [pc, #76]	; (8001368 <HAL_Init+0x6c>)
 800131a:	5ccb      	ldrb	r3, [r1, r3]
 800131c:	f003 031f 	and.w	r3, r3, #31
 8001320:	fa22 f303 	lsr.w	r3, r2, r3
 8001324:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001326:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <HAL_Init+0x68>)
 8001328:	699b      	ldr	r3, [r3, #24]
 800132a:	f003 030f 	and.w	r3, r3, #15
 800132e:	4a0e      	ldr	r2, [pc, #56]	; (8001368 <HAL_Init+0x6c>)
 8001330:	5cd3      	ldrb	r3, [r2, r3]
 8001332:	f003 031f 	and.w	r3, r3, #31
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	fa22 f303 	lsr.w	r3, r2, r3
 800133c:	4a0b      	ldr	r2, [pc, #44]	; (800136c <HAL_Init+0x70>)
 800133e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001340:	4a0b      	ldr	r2, [pc, #44]	; (8001370 <HAL_Init+0x74>)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001346:	200f      	movs	r0, #15
 8001348:	f7ff feaa 	bl	80010a0 <HAL_InitTick>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e002      	b.n	800135c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001356:	f7ff fd55 	bl	8000e04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800135a:	2300      	movs	r3, #0
}
 800135c:	4618      	mov	r0, r3
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	58024400 	.word	0x58024400
 8001368:	08008570 	.word	0x08008570
 800136c:	2400fa04 	.word	0x2400fa04
 8001370:	2400fa00 	.word	0x2400fa00

08001374 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <HAL_IncTick+0x20>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	461a      	mov	r2, r3
 800137e:	4b06      	ldr	r3, [pc, #24]	; (8001398 <HAL_IncTick+0x24>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4413      	add	r3, r2
 8001384:	4a04      	ldr	r2, [pc, #16]	; (8001398 <HAL_IncTick+0x24>)
 8001386:	6013      	str	r3, [r2, #0]
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	2400fa0c 	.word	0x2400fa0c
 8001398:	24010a24 	.word	0x24010a24

0800139c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return uwTick;
 80013a0:	4b03      	ldr	r3, [pc, #12]	; (80013b0 <HAL_GetTick+0x14>)
 80013a2:	681b      	ldr	r3, [r3, #0]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	24010a24 	.word	0x24010a24

080013b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013bc:	f7ff ffee 	bl	800139c <HAL_GetTick>
 80013c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013cc:	d005      	beq.n	80013da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ce:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <HAL_Delay+0x44>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	461a      	mov	r2, r3
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	4413      	add	r3, r2
 80013d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013da:	bf00      	nop
 80013dc:	f7ff ffde 	bl	800139c <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	68fa      	ldr	r2, [r7, #12]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d8f7      	bhi.n	80013dc <HAL_Delay+0x28>
  {
  }
}
 80013ec:	bf00      	nop
 80013ee:	bf00      	nop
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	2400fa0c 	.word	0x2400fa0c

080013fc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001404:	4b06      	ldr	r3, [pc, #24]	; (8001420 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800140c:	4904      	ldr	r1, [pc, #16]	; (8001420 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4313      	orrs	r3, r2
 8001412:	604b      	str	r3, [r1, #4]
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	58000400 	.word	0x58000400

08001424 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001434:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <__NVIC_SetPriorityGrouping+0x40>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800143a:	68ba      	ldr	r2, [r7, #8]
 800143c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001440:	4013      	ands	r3, r2
 8001442:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800144c:	4b06      	ldr	r3, [pc, #24]	; (8001468 <__NVIC_SetPriorityGrouping+0x44>)
 800144e:	4313      	orrs	r3, r2
 8001450:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001452:	4a04      	ldr	r2, [pc, #16]	; (8001464 <__NVIC_SetPriorityGrouping+0x40>)
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	60d3      	str	r3, [r2, #12]
}
 8001458:	bf00      	nop
 800145a:	3714      	adds	r7, #20
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	e000ed00 	.word	0xe000ed00
 8001468:	05fa0000 	.word	0x05fa0000

0800146c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001470:	4b04      	ldr	r3, [pc, #16]	; (8001484 <__NVIC_GetPriorityGrouping+0x18>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	0a1b      	lsrs	r3, r3, #8
 8001476:	f003 0307 	and.w	r3, r3, #7
}
 800147a:	4618      	mov	r0, r3
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001492:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001496:	2b00      	cmp	r3, #0
 8001498:	db0b      	blt.n	80014b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800149a:	88fb      	ldrh	r3, [r7, #6]
 800149c:	f003 021f 	and.w	r2, r3, #31
 80014a0:	4907      	ldr	r1, [pc, #28]	; (80014c0 <__NVIC_EnableIRQ+0x38>)
 80014a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014a6:	095b      	lsrs	r3, r3, #5
 80014a8:	2001      	movs	r0, #1
 80014aa:	fa00 f202 	lsl.w	r2, r0, r2
 80014ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	e000e100 	.word	0xe000e100

080014c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	6039      	str	r1, [r7, #0]
 80014ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	db0a      	blt.n	80014ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	490c      	ldr	r1, [pc, #48]	; (8001510 <__NVIC_SetPriority+0x4c>)
 80014de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014e2:	0112      	lsls	r2, r2, #4
 80014e4:	b2d2      	uxtb	r2, r2
 80014e6:	440b      	add	r3, r1
 80014e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014ec:	e00a      	b.n	8001504 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	4908      	ldr	r1, [pc, #32]	; (8001514 <__NVIC_SetPriority+0x50>)
 80014f4:	88fb      	ldrh	r3, [r7, #6]
 80014f6:	f003 030f 	and.w	r3, r3, #15
 80014fa:	3b04      	subs	r3, #4
 80014fc:	0112      	lsls	r2, r2, #4
 80014fe:	b2d2      	uxtb	r2, r2
 8001500:	440b      	add	r3, r1
 8001502:	761a      	strb	r2, [r3, #24]
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	e000e100 	.word	0xe000e100
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001518:	b480      	push	{r7}
 800151a:	b089      	sub	sp, #36	; 0x24
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	f1c3 0307 	rsb	r3, r3, #7
 8001532:	2b04      	cmp	r3, #4
 8001534:	bf28      	it	cs
 8001536:	2304      	movcs	r3, #4
 8001538:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	3304      	adds	r3, #4
 800153e:	2b06      	cmp	r3, #6
 8001540:	d902      	bls.n	8001548 <NVIC_EncodePriority+0x30>
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	3b03      	subs	r3, #3
 8001546:	e000      	b.n	800154a <NVIC_EncodePriority+0x32>
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800154c:	f04f 32ff 	mov.w	r2, #4294967295
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43da      	mvns	r2, r3
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	401a      	ands	r2, r3
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001560:	f04f 31ff 	mov.w	r1, #4294967295
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	fa01 f303 	lsl.w	r3, r1, r3
 800156a:	43d9      	mvns	r1, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001570:	4313      	orrs	r3, r2
         );
}
 8001572:	4618      	mov	r0, r3
 8001574:	3724      	adds	r7, #36	; 0x24
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f7ff ff4c 	bl	8001424 <__NVIC_SetPriorityGrouping>
}
 800158c:	bf00      	nop
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
 80015a0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015a2:	f7ff ff63 	bl	800146c <__NVIC_GetPriorityGrouping>
 80015a6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	68b9      	ldr	r1, [r7, #8]
 80015ac:	6978      	ldr	r0, [r7, #20]
 80015ae:	f7ff ffb3 	bl	8001518 <NVIC_EncodePriority>
 80015b2:	4602      	mov	r2, r0
 80015b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015b8:	4611      	mov	r1, r2
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff ff82 	bl	80014c4 <__NVIC_SetPriority>
}
 80015c0:	bf00      	nop
 80015c2:	3718      	adds	r7, #24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff ff56 	bl	8001488 <__NVIC_EnableIRQ>
}
 80015dc:	bf00      	nop
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e0c6      	b.n	8001784 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d102      	bne.n	8001604 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff fc1a 	bl	8000e38 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2223      	movs	r2, #35	; 0x23
 8001608:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800160a:	4b60      	ldr	r3, [pc, #384]	; (800178c <HAL_ETH_Init+0x1a8>)
 800160c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001610:	4a5e      	ldr	r2, [pc, #376]	; (800178c <HAL_ETH_Init+0x1a8>)
 8001612:	f043 0302 	orr.w	r3, r3, #2
 8001616:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800161a:	4b5c      	ldr	r3, [pc, #368]	; (800178c <HAL_ETH_Init+0x1a8>)
 800161c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	60bb      	str	r3, [r7, #8]
 8001626:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	7a1b      	ldrb	r3, [r3, #8]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d103      	bne.n	8001638 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001630:	2000      	movs	r0, #0
 8001632:	f7ff fee3 	bl	80013fc <HAL_SYSCFG_ETHInterfaceSelect>
 8001636:	e003      	b.n	8001640 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001638:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800163c:	f7ff fede 	bl	80013fc <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f042 0201 	orr.w	r2, r2, #1
 8001652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001656:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001658:	f7ff fea0 	bl	800139c <HAL_GetTick>
 800165c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800165e:	e00f      	b.n	8001680 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001660:	f7ff fe9c 	bl	800139c <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800166e:	d907      	bls.n	8001680 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2204      	movs	r2, #4
 8001674:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	22e0      	movs	r2, #224	; 0xe0
 800167a:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e081      	b.n	8001784 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1e6      	bne.n	8001660 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f000 fac0 	bl	8001c18 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001698:	f001 fcac 	bl	8002ff4 <HAL_RCC_GetHCLKFreq>
 800169c:	4603      	mov	r3, r0
 800169e:	4a3c      	ldr	r2, [pc, #240]	; (8001790 <HAL_ETH_Init+0x1ac>)
 80016a0:	fba2 2303 	umull	r2, r3, r2, r3
 80016a4:	0c9a      	lsrs	r2, r3, #18
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	3a01      	subs	r2, #1
 80016ac:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f000 fa13 	bl	8001adc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80016cc:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80016d0:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	f003 0303 	and.w	r3, r3, #3
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d007      	beq.n	80016ee <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2201      	movs	r2, #1
 80016e2:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	22e0      	movs	r2, #224	; 0xe0
 80016e8:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e04a      	b.n	8001784 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	f241 1308 	movw	r3, #4360	; 0x1108
 80016f6:	4413      	add	r3, r2
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	4b26      	ldr	r3, [pc, #152]	; (8001794 <HAL_ETH_Init+0x1b0>)
 80016fc:	4013      	ands	r3, r2
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	6952      	ldr	r2, [r2, #20]
 8001702:	0052      	lsls	r2, r2, #1
 8001704:	6879      	ldr	r1, [r7, #4]
 8001706:	6809      	ldr	r1, [r1, #0]
 8001708:	431a      	orrs	r2, r3
 800170a:	f241 1308 	movw	r3, #4360	; 0x1108
 800170e:	440b      	add	r3, r1
 8001710:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f000 fad8 	bl	8001cc8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f000 fb1c 	bl	8001d56 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	3305      	adds	r3, #5
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	021a      	lsls	r2, r3, #8
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	3304      	adds	r3, #4
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	4619      	mov	r1, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	430a      	orrs	r2, r1
 8001738:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	3303      	adds	r3, #3
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	061a      	lsls	r2, r3, #24
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	3302      	adds	r3, #2
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	041b      	lsls	r3, r3, #16
 8001750:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	3301      	adds	r3, #1
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800175c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800176a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800176c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2210      	movs	r2, #16
 800177a:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2210      	movs	r2, #16
 8001780:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8001782:	2300      	movs	r3, #0
}
 8001784:	4618      	mov	r0, r3
 8001786:	3710      	adds	r7, #16
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	58024400 	.word	0x58024400
 8001790:	431bde83 	.word	0x431bde83
 8001794:	ffff8001 	.word	0xffff8001

08001798 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80017aa:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	791b      	ldrb	r3, [r3, #4]
 80017b0:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80017b2:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	7b1b      	ldrb	r3, [r3, #12]
 80017b8:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80017ba:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	7b5b      	ldrb	r3, [r3, #13]
 80017c0:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80017c2:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	7b9b      	ldrb	r3, [r3, #14]
 80017c8:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80017ca:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	7bdb      	ldrb	r3, [r3, #15]
 80017d0:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80017d2:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	7c12      	ldrb	r2, [r2, #16]
 80017d8:	2a00      	cmp	r2, #0
 80017da:	d102      	bne.n	80017e2 <ETH_SetMACConfig+0x4a>
 80017dc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80017e0:	e000      	b.n	80017e4 <ETH_SetMACConfig+0x4c>
 80017e2:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80017e4:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80017e6:	683a      	ldr	r2, [r7, #0]
 80017e8:	7c52      	ldrb	r2, [r2, #17]
 80017ea:	2a00      	cmp	r2, #0
 80017ec:	d102      	bne.n	80017f4 <ETH_SetMACConfig+0x5c>
 80017ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017f2:	e000      	b.n	80017f6 <ETH_SetMACConfig+0x5e>
 80017f4:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80017f6:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	7c9b      	ldrb	r3, [r3, #18]
 80017fc:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80017fe:	431a      	orrs	r2, r3
                                macconf->Speed |
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001804:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 800180a:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	7f1b      	ldrb	r3, [r3, #28]
 8001810:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8001812:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	7f5b      	ldrb	r3, [r3, #29]
 8001818:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800181a:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	7f92      	ldrb	r2, [r2, #30]
 8001820:	2a00      	cmp	r2, #0
 8001822:	d102      	bne.n	800182a <ETH_SetMACConfig+0x92>
 8001824:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001828:	e000      	b.n	800182c <ETH_SetMACConfig+0x94>
 800182a:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800182c:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	7fdb      	ldrb	r3, [r3, #31]
 8001832:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001834:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	f892 2020 	ldrb.w	r2, [r2, #32]
 800183c:	2a00      	cmp	r2, #0
 800183e:	d102      	bne.n	8001846 <ETH_SetMACConfig+0xae>
 8001840:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001844:	e000      	b.n	8001848 <ETH_SetMACConfig+0xb0>
 8001846:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001848:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800184e:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001856:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8001858:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 800185e:	4313      	orrs	r3, r2
 8001860:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	4b56      	ldr	r3, [pc, #344]	; (80019c4 <ETH_SetMACConfig+0x22c>)
 800186a:	4013      	ands	r3, r2
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	6812      	ldr	r2, [r2, #0]
 8001870:	68f9      	ldr	r1, [r7, #12]
 8001872:	430b      	orrs	r3, r1
 8001874:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800187a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001882:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001884:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800188c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800188e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001896:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001898:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80018a0:	2a00      	cmp	r2, #0
 80018a2:	d102      	bne.n	80018aa <ETH_SetMACConfig+0x112>
 80018a4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018a8:	e000      	b.n	80018ac <ETH_SetMACConfig+0x114>
 80018aa:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80018ac:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80018b2:	4313      	orrs	r3, r2
 80018b4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	685a      	ldr	r2, [r3, #4]
 80018bc:	4b42      	ldr	r3, [pc, #264]	; (80019c8 <ETH_SetMACConfig+0x230>)
 80018be:	4013      	ands	r3, r2
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	6812      	ldr	r2, [r2, #0]
 80018c4:	68f9      	ldr	r1, [r7, #12]
 80018c6:	430b      	orrs	r3, r1
 80018c8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018d0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80018d6:	4313      	orrs	r3, r2
 80018d8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	68da      	ldr	r2, [r3, #12]
 80018e0:	4b3a      	ldr	r3, [pc, #232]	; (80019cc <ETH_SetMACConfig+0x234>)
 80018e2:	4013      	ands	r3, r2
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	6812      	ldr	r2, [r2, #0]
 80018e8:	68f9      	ldr	r1, [r7, #12]
 80018ea:	430b      	orrs	r3, r1
 80018ec:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80018f4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80018fa:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001902:	2a00      	cmp	r2, #0
 8001904:	d101      	bne.n	800190a <ETH_SetMACConfig+0x172>
 8001906:	2280      	movs	r2, #128	; 0x80
 8001908:	e000      	b.n	800190c <ETH_SetMACConfig+0x174>
 800190a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800190c:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001912:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001914:	4313      	orrs	r3, r2
 8001916:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800191e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001922:	4013      	ands	r3, r2
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	6812      	ldr	r2, [r2, #0]
 8001928:	68f9      	ldr	r1, [r7, #12]
 800192a:	430b      	orrs	r3, r1
 800192c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001934:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800193c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800193e:	4313      	orrs	r3, r2
 8001940:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800194a:	f023 0103 	bic.w	r1, r3, #3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	430a      	orrs	r2, r1
 8001956:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001962:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	430a      	orrs	r2, r1
 8001970:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800197e:	2a00      	cmp	r2, #0
 8001980:	d101      	bne.n	8001986 <ETH_SetMACConfig+0x1ee>
 8001982:	2240      	movs	r2, #64	; 0x40
 8001984:	e000      	b.n	8001988 <ETH_SetMACConfig+0x1f0>
 8001986:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001988:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001990:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001992:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800199a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800199c:	4313      	orrs	r3, r2
 800199e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80019a8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	430a      	orrs	r2, r1
 80019b4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80019b8:	bf00      	nop
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	00048083 	.word	0x00048083
 80019c8:	c0f88000 	.word	0xc0f88000
 80019cc:	fffffef0 	.word	0xfffffef0

080019d0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	4b38      	ldr	r3, [pc, #224]	; (8001ac8 <ETH_SetDMAConfig+0xf8>)
 80019e6:	4013      	ands	r3, r2
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	6812      	ldr	r2, [r2, #0]
 80019ec:	6879      	ldr	r1, [r7, #4]
 80019ee:	6809      	ldr	r1, [r1, #0]
 80019f0:	431a      	orrs	r2, r3
 80019f2:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80019f6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	791b      	ldrb	r3, [r3, #4]
 80019fc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001a02:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	7b1b      	ldrb	r3, [r3, #12]
 8001a08:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	f241 0304 	movw	r3, #4100	; 0x1004
 8001a16:	4413      	add	r3, r2
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	4b2c      	ldr	r3, [pc, #176]	; (8001acc <ETH_SetDMAConfig+0xfc>)
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	6811      	ldr	r1, [r2, #0]
 8001a22:	68fa      	ldr	r2, [r7, #12]
 8001a24:	431a      	orrs	r2, r3
 8001a26:	f241 0304 	movw	r3, #4100	; 0x1004
 8001a2a:	440b      	add	r3, r1
 8001a2c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	7b5b      	ldrb	r3, [r3, #13]
 8001a32:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	4b22      	ldr	r3, [pc, #136]	; (8001ad0 <ETH_SetDMAConfig+0x100>)
 8001a48:	4013      	ands	r3, r2
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	6811      	ldr	r1, [r2, #0]
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	431a      	orrs	r2, r3
 8001a52:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8001a56:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	7d1b      	ldrb	r3, [r3, #20]
 8001a60:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001a62:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	7f5b      	ldrb	r3, [r3, #29]
 8001a68:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	f241 1304 	movw	r3, #4356	; 0x1104
 8001a76:	4413      	add	r3, r2
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	4b16      	ldr	r3, [pc, #88]	; (8001ad4 <ETH_SetDMAConfig+0x104>)
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	6811      	ldr	r1, [r2, #0]
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	431a      	orrs	r2, r3
 8001a86:	f241 1304 	movw	r3, #4356	; 0x1104
 8001a8a:	440b      	add	r3, r1
 8001a8c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	7f1b      	ldrb	r3, [r3, #28]
 8001a92:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	f241 1308 	movw	r3, #4360	; 0x1108
 8001aa4:	4413      	add	r3, r2
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <ETH_SetDMAConfig+0x108>)
 8001aaa:	4013      	ands	r3, r2
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	6811      	ldr	r1, [r2, #0]
 8001ab0:	68fa      	ldr	r2, [r7, #12]
 8001ab2:	431a      	orrs	r2, r3
 8001ab4:	f241 1308 	movw	r3, #4360	; 0x1108
 8001ab8:	440b      	add	r3, r1
 8001aba:	601a      	str	r2, [r3, #0]
}
 8001abc:	bf00      	nop
 8001abe:	3714      	adds	r7, #20
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	ffff87fd 	.word	0xffff87fd
 8001acc:	ffff2ffe 	.word	0xffff2ffe
 8001ad0:	fffec000 	.word	0xfffec000
 8001ad4:	ffc0efef 	.word	0xffc0efef
 8001ad8:	7fc0ffff 	.word	0x7fc0ffff

08001adc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b0a4      	sub	sp, #144	; 0x90
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001aea:	2300      	movs	r3, #0
 8001aec:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001aee:	2300      	movs	r3, #0
 8001af0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001af4:	2300      	movs	r3, #0
 8001af6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001afa:	2301      	movs	r3, #1
 8001afc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001b00:	2301      	movs	r3, #1
 8001b02:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001b06:	2301      	movs	r3, #1
 8001b08:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001b12:	2301      	movs	r3, #1
 8001b14:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001b18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b1c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001b34:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001b38:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001b40:	2300      	movs	r3, #0
 8001b42:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001b44:	2301      	movs	r3, #1
 8001b46:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001b50:	2300      	movs	r3, #0
 8001b52:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001b56:	2300      	movs	r3, #0
 8001b58:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001b62:	2300      	movs	r3, #0
 8001b64:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001b74:	2320      	movs	r3, #32
 8001b76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001b80:	2300      	movs	r3, #0
 8001b82:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001b86:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001b8c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b90:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001b92:	2300      	movs	r3, #0
 8001b94:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001baa:	2300      	movs	r3, #0
 8001bac:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001bc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff fde6 	bl	8001798 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001bde:	2300      	movs	r3, #0
 8001be0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001be2:	2300      	movs	r3, #0
 8001be4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001be6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001bea:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001bec:	2300      	movs	r3, #0
 8001bee:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001bf0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001bf4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8001bfc:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001c00:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001c02:	f107 0308 	add.w	r3, r7, #8
 8001c06:	4619      	mov	r1, r3
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7ff fee1 	bl	80019d0 <ETH_SetDMAConfig>
}
 8001c0e:	bf00      	nop
 8001c10:	3790      	adds	r7, #144	; 0x90
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
	...

08001c18 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c28:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c30:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001c32:	f001 f9df 	bl	8002ff4 <HAL_RCC_GetHCLKFreq>
 8001c36:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	4a1e      	ldr	r2, [pc, #120]	; (8001cb4 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d908      	bls.n	8001c52 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	4a1d      	ldr	r2, [pc, #116]	; (8001cb8 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d804      	bhi.n	8001c52 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	e027      	b.n	8001ca2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	4a18      	ldr	r2, [pc, #96]	; (8001cb8 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d908      	bls.n	8001c6c <ETH_MAC_MDIO_ClkConfig+0x54>
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	4a17      	ldr	r2, [pc, #92]	; (8001cbc <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d204      	bcs.n	8001c6c <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	e01a      	b.n	8001ca2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	4a13      	ldr	r2, [pc, #76]	; (8001cbc <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d303      	bcc.n	8001c7c <ETH_MAC_MDIO_ClkConfig+0x64>
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	4a12      	ldr	r2, [pc, #72]	; (8001cc0 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d911      	bls.n	8001ca0 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	4a10      	ldr	r2, [pc, #64]	; (8001cc0 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d908      	bls.n	8001c96 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	4a0f      	ldr	r2, [pc, #60]	; (8001cc4 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d804      	bhi.n	8001c96 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	e005      	b.n	8001ca2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	e000      	b.n	8001ca2 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001ca0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001cac:	bf00      	nop
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	01312cff 	.word	0x01312cff
 8001cb8:	02160ebf 	.word	0x02160ebf
 8001cbc:	03938700 	.word	0x03938700
 8001cc0:	05f5e0ff 	.word	0x05f5e0ff
 8001cc4:	08f0d17f 	.word	0x08f0d17f

08001cc8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	e01d      	b.n	8001d12 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	68d9      	ldr	r1, [r3, #12]
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	4413      	add	r3, r2
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	440b      	add	r3, r1
 8001ce6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001d00:	68b9      	ldr	r1, [r7, #8]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	3206      	adds	r2, #6
 8001d08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2b03      	cmp	r3, #3
 8001d16:	d9de      	bls.n	8001cd6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	f241 132c 	movw	r3, #4396	; 0x112c
 8001d26:	4413      	add	r3, r2
 8001d28:	2203      	movs	r2, #3
 8001d2a:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	68d9      	ldr	r1, [r3, #12]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	f241 1314 	movw	r3, #4372	; 0x1114
 8001d38:	4413      	add	r3, r2
 8001d3a:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68da      	ldr	r2, [r3, #12]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8001d48:	601a      	str	r2, [r3, #0]
}
 8001d4a:	bf00      	nop
 8001d4c:	3714      	adds	r7, #20
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d56:	b480      	push	{r7}
 8001d58:	b085      	sub	sp, #20
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	e024      	b.n	8001dae <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6919      	ldr	r1, [r3, #16]
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	4413      	add	r3, r2
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	440b      	add	r3, r1
 8001d74:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	2200      	movs	r2, #0
 8001d86:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	2200      	movs	r2, #0
 8001d92:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	2200      	movs	r2, #0
 8001d98:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001d9a:	68ba      	ldr	r2, [r7, #8]
 8001d9c:	6879      	ldr	r1, [r7, #4]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	3310      	adds	r3, #16
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	440b      	add	r3, r1
 8001da6:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	3301      	adds	r3, #1
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2b03      	cmp	r3, #3
 8001db2:	d9d7      	bls.n	8001d64 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	f241 1330 	movw	r3, #4400	; 0x1130
 8001dda:	4413      	add	r3, r2
 8001ddc:	2203      	movs	r2, #3
 8001dde:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6919      	ldr	r1, [r3, #16]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	f241 131c 	movw	r3, #4380	; 0x111c
 8001dec:	4413      	add	r3, r2
 8001dee:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	f241 1328 	movw	r3, #4392	; 0x1128
 8001e00:	4413      	add	r3, r2
 8001e02:	6019      	str	r1, [r3, #0]
}
 8001e04:	bf00      	nop
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b089      	sub	sp, #36	; 0x24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001e1e:	4b86      	ldr	r3, [pc, #536]	; (8002038 <HAL_GPIO_Init+0x228>)
 8001e20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e22:	e18c      	b.n	800213e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	2101      	movs	r1, #1
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e30:	4013      	ands	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f000 817e 	beq.w	8002138 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 0303 	and.w	r3, r3, #3
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d005      	beq.n	8001e54 <HAL_GPIO_Init+0x44>
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 0303 	and.w	r3, r3, #3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d130      	bne.n	8001eb6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	2203      	movs	r2, #3
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	68da      	ldr	r2, [r3, #12]
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	43db      	mvns	r3, r3
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	4013      	ands	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	091b      	lsrs	r3, r3, #4
 8001ea0:	f003 0201 	and.w	r2, r3, #1
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	2b03      	cmp	r3, #3
 8001ec0:	d017      	beq.n	8001ef2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	2203      	movs	r2, #3
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	689a      	ldr	r2, [r3, #8]
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f003 0303 	and.w	r3, r3, #3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d123      	bne.n	8001f46 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	08da      	lsrs	r2, r3, #3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	3208      	adds	r2, #8
 8001f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	220f      	movs	r2, #15
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	691a      	ldr	r2, [r3, #16]
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	08da      	lsrs	r2, r3, #3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3208      	adds	r2, #8
 8001f40:	69b9      	ldr	r1, [r7, #24]
 8001f42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	2203      	movs	r2, #3
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43db      	mvns	r3, r3
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f003 0203 	and.w	r2, r3, #3
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 80d8 	beq.w	8002138 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f88:	4b2c      	ldr	r3, [pc, #176]	; (800203c <HAL_GPIO_Init+0x22c>)
 8001f8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f8e:	4a2b      	ldr	r2, [pc, #172]	; (800203c <HAL_GPIO_Init+0x22c>)
 8001f90:	f043 0302 	orr.w	r3, r3, #2
 8001f94:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001f98:	4b28      	ldr	r3, [pc, #160]	; (800203c <HAL_GPIO_Init+0x22c>)
 8001f9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fa6:	4a26      	ldr	r2, [pc, #152]	; (8002040 <HAL_GPIO_Init+0x230>)
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	089b      	lsrs	r3, r3, #2
 8001fac:	3302      	adds	r3, #2
 8001fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f003 0303 	and.w	r3, r3, #3
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	220f      	movs	r2, #15
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a1d      	ldr	r2, [pc, #116]	; (8002044 <HAL_GPIO_Init+0x234>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d04a      	beq.n	8002068 <HAL_GPIO_Init+0x258>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a1c      	ldr	r2, [pc, #112]	; (8002048 <HAL_GPIO_Init+0x238>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d02b      	beq.n	8002032 <HAL_GPIO_Init+0x222>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a1b      	ldr	r2, [pc, #108]	; (800204c <HAL_GPIO_Init+0x23c>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d025      	beq.n	800202e <HAL_GPIO_Init+0x21e>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a1a      	ldr	r2, [pc, #104]	; (8002050 <HAL_GPIO_Init+0x240>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d01f      	beq.n	800202a <HAL_GPIO_Init+0x21a>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a19      	ldr	r2, [pc, #100]	; (8002054 <HAL_GPIO_Init+0x244>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d019      	beq.n	8002026 <HAL_GPIO_Init+0x216>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a18      	ldr	r2, [pc, #96]	; (8002058 <HAL_GPIO_Init+0x248>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d013      	beq.n	8002022 <HAL_GPIO_Init+0x212>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a17      	ldr	r2, [pc, #92]	; (800205c <HAL_GPIO_Init+0x24c>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d00d      	beq.n	800201e <HAL_GPIO_Init+0x20e>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a16      	ldr	r2, [pc, #88]	; (8002060 <HAL_GPIO_Init+0x250>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d007      	beq.n	800201a <HAL_GPIO_Init+0x20a>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a15      	ldr	r2, [pc, #84]	; (8002064 <HAL_GPIO_Init+0x254>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d101      	bne.n	8002016 <HAL_GPIO_Init+0x206>
 8002012:	2309      	movs	r3, #9
 8002014:	e029      	b.n	800206a <HAL_GPIO_Init+0x25a>
 8002016:	230a      	movs	r3, #10
 8002018:	e027      	b.n	800206a <HAL_GPIO_Init+0x25a>
 800201a:	2307      	movs	r3, #7
 800201c:	e025      	b.n	800206a <HAL_GPIO_Init+0x25a>
 800201e:	2306      	movs	r3, #6
 8002020:	e023      	b.n	800206a <HAL_GPIO_Init+0x25a>
 8002022:	2305      	movs	r3, #5
 8002024:	e021      	b.n	800206a <HAL_GPIO_Init+0x25a>
 8002026:	2304      	movs	r3, #4
 8002028:	e01f      	b.n	800206a <HAL_GPIO_Init+0x25a>
 800202a:	2303      	movs	r3, #3
 800202c:	e01d      	b.n	800206a <HAL_GPIO_Init+0x25a>
 800202e:	2302      	movs	r3, #2
 8002030:	e01b      	b.n	800206a <HAL_GPIO_Init+0x25a>
 8002032:	2301      	movs	r3, #1
 8002034:	e019      	b.n	800206a <HAL_GPIO_Init+0x25a>
 8002036:	bf00      	nop
 8002038:	58000080 	.word	0x58000080
 800203c:	58024400 	.word	0x58024400
 8002040:	58000400 	.word	0x58000400
 8002044:	58020000 	.word	0x58020000
 8002048:	58020400 	.word	0x58020400
 800204c:	58020800 	.word	0x58020800
 8002050:	58020c00 	.word	0x58020c00
 8002054:	58021000 	.word	0x58021000
 8002058:	58021400 	.word	0x58021400
 800205c:	58021800 	.word	0x58021800
 8002060:	58021c00 	.word	0x58021c00
 8002064:	58022400 	.word	0x58022400
 8002068:	2300      	movs	r3, #0
 800206a:	69fa      	ldr	r2, [r7, #28]
 800206c:	f002 0203 	and.w	r2, r2, #3
 8002070:	0092      	lsls	r2, r2, #2
 8002072:	4093      	lsls	r3, r2
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800207a:	4938      	ldr	r1, [pc, #224]	; (800215c <HAL_GPIO_Init+0x34c>)
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	089b      	lsrs	r3, r3, #2
 8002080:	3302      	adds	r3, #2
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	43db      	mvns	r3, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4013      	ands	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80020ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80020b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	43db      	mvns	r3, r3
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4013      	ands	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d003      	beq.n	80020dc <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	4313      	orrs	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80020dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	43db      	mvns	r3, r3
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4013      	ands	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d003      	beq.n	8002108 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	4313      	orrs	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	43db      	mvns	r3, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4013      	ands	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	4313      	orrs	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	3301      	adds	r3, #1
 800213c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	fa22 f303 	lsr.w	r3, r2, r3
 8002148:	2b00      	cmp	r3, #0
 800214a:	f47f ae6b 	bne.w	8001e24 <HAL_GPIO_Init+0x14>
  }
}
 800214e:	bf00      	nop
 8002150:	bf00      	nop
 8002152:	3724      	adds	r7, #36	; 0x24
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	58000400 	.word	0x58000400

08002160 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	460b      	mov	r3, r1
 800216a:	807b      	strh	r3, [r7, #2]
 800216c:	4613      	mov	r3, r2
 800216e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002170:	787b      	ldrb	r3, [r7, #1]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002176:	887a      	ldrh	r2, [r7, #2]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800217c:	e003      	b.n	8002186 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800217e:	887b      	ldrh	r3, [r7, #2]
 8002180:	041a      	lsls	r2, r3, #16
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	619a      	str	r2, [r3, #24]
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002192:	b480      	push	{r7}
 8002194:	b085      	sub	sp, #20
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
 800219a:	460b      	mov	r3, r1
 800219c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021a4:	887a      	ldrh	r2, [r7, #2]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	4013      	ands	r3, r2
 80021aa:	041a      	lsls	r2, r3, #16
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	43d9      	mvns	r1, r3
 80021b0:	887b      	ldrh	r3, [r7, #2]
 80021b2:	400b      	ands	r3, r1
 80021b4:	431a      	orrs	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	619a      	str	r2, [r3, #24]
}
 80021ba:	bf00      	nop
 80021bc:	3714      	adds	r7, #20
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
	...

080021c8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80021d0:	4b19      	ldr	r3, [pc, #100]	; (8002238 <HAL_PWREx_ConfigSupply+0x70>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	f003 0304 	and.w	r3, r3, #4
 80021d8:	2b04      	cmp	r3, #4
 80021da:	d00a      	beq.n	80021f2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80021dc:	4b16      	ldr	r3, [pc, #88]	; (8002238 <HAL_PWREx_ConfigSupply+0x70>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	f003 0307 	and.w	r3, r3, #7
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d001      	beq.n	80021ee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e01f      	b.n	800222e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80021ee:	2300      	movs	r3, #0
 80021f0:	e01d      	b.n	800222e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80021f2:	4b11      	ldr	r3, [pc, #68]	; (8002238 <HAL_PWREx_ConfigSupply+0x70>)
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	f023 0207 	bic.w	r2, r3, #7
 80021fa:	490f      	ldr	r1, [pc, #60]	; (8002238 <HAL_PWREx_ConfigSupply+0x70>)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4313      	orrs	r3, r2
 8002200:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002202:	f7ff f8cb 	bl	800139c <HAL_GetTick>
 8002206:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002208:	e009      	b.n	800221e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800220a:	f7ff f8c7 	bl	800139c <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002218:	d901      	bls.n	800221e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e007      	b.n	800222e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800221e:	4b06      	ldr	r3, [pc, #24]	; (8002238 <HAL_PWREx_ConfigSupply+0x70>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002226:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800222a:	d1ee      	bne.n	800220a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	58024800 	.word	0x58024800

0800223c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b08c      	sub	sp, #48	; 0x30
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e397      	b.n	800297e <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b00      	cmp	r3, #0
 8002258:	f000 8087 	beq.w	800236a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800225c:	4b9e      	ldr	r3, [pc, #632]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002264:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002266:	4b9c      	ldr	r3, [pc, #624]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 8002268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800226c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800226e:	2b10      	cmp	r3, #16
 8002270:	d007      	beq.n	8002282 <HAL_RCC_OscConfig+0x46>
 8002272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002274:	2b18      	cmp	r3, #24
 8002276:	d110      	bne.n	800229a <HAL_RCC_OscConfig+0x5e>
 8002278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800227a:	f003 0303 	and.w	r3, r3, #3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d10b      	bne.n	800229a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002282:	4b95      	ldr	r3, [pc, #596]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d06c      	beq.n	8002368 <HAL_RCC_OscConfig+0x12c>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d168      	bne.n	8002368 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e371      	b.n	800297e <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022a2:	d106      	bne.n	80022b2 <HAL_RCC_OscConfig+0x76>
 80022a4:	4b8c      	ldr	r3, [pc, #560]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a8b      	ldr	r2, [pc, #556]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 80022aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ae:	6013      	str	r3, [r2, #0]
 80022b0:	e02e      	b.n	8002310 <HAL_RCC_OscConfig+0xd4>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d10c      	bne.n	80022d4 <HAL_RCC_OscConfig+0x98>
 80022ba:	4b87      	ldr	r3, [pc, #540]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a86      	ldr	r2, [pc, #536]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 80022c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022c4:	6013      	str	r3, [r2, #0]
 80022c6:	4b84      	ldr	r3, [pc, #528]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a83      	ldr	r2, [pc, #524]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 80022cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022d0:	6013      	str	r3, [r2, #0]
 80022d2:	e01d      	b.n	8002310 <HAL_RCC_OscConfig+0xd4>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022dc:	d10c      	bne.n	80022f8 <HAL_RCC_OscConfig+0xbc>
 80022de:	4b7e      	ldr	r3, [pc, #504]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a7d      	ldr	r2, [pc, #500]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 80022e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022e8:	6013      	str	r3, [r2, #0]
 80022ea:	4b7b      	ldr	r3, [pc, #492]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a7a      	ldr	r2, [pc, #488]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 80022f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022f4:	6013      	str	r3, [r2, #0]
 80022f6:	e00b      	b.n	8002310 <HAL_RCC_OscConfig+0xd4>
 80022f8:	4b77      	ldr	r3, [pc, #476]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a76      	ldr	r2, [pc, #472]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 80022fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002302:	6013      	str	r3, [r2, #0]
 8002304:	4b74      	ldr	r3, [pc, #464]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a73      	ldr	r2, [pc, #460]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 800230a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800230e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d013      	beq.n	8002340 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002318:	f7ff f840 	bl	800139c <HAL_GetTick>
 800231c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002320:	f7ff f83c 	bl	800139c <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b64      	cmp	r3, #100	; 0x64
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e325      	b.n	800297e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002332:	4b69      	ldr	r3, [pc, #420]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d0f0      	beq.n	8002320 <HAL_RCC_OscConfig+0xe4>
 800233e:	e014      	b.n	800236a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002340:	f7ff f82c 	bl	800139c <HAL_GetTick>
 8002344:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002348:	f7ff f828 	bl	800139c <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b64      	cmp	r3, #100	; 0x64
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e311      	b.n	800297e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800235a:	4b5f      	ldr	r3, [pc, #380]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1f0      	bne.n	8002348 <HAL_RCC_OscConfig+0x10c>
 8002366:	e000      	b.n	800236a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002368:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	f000 808a 	beq.w	800248c <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002378:	4b57      	ldr	r3, [pc, #348]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002380:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002382:	4b55      	ldr	r3, [pc, #340]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 8002384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002386:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002388:	6a3b      	ldr	r3, [r7, #32]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d007      	beq.n	800239e <HAL_RCC_OscConfig+0x162>
 800238e:	6a3b      	ldr	r3, [r7, #32]
 8002390:	2b18      	cmp	r3, #24
 8002392:	d137      	bne.n	8002404 <HAL_RCC_OscConfig+0x1c8>
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	f003 0303 	and.w	r3, r3, #3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d132      	bne.n	8002404 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800239e:	4b4e      	ldr	r3, [pc, #312]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0304 	and.w	r3, r3, #4
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d005      	beq.n	80023b6 <HAL_RCC_OscConfig+0x17a>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e2e3      	b.n	800297e <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80023b6:	4b48      	ldr	r3, [pc, #288]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f023 0219 	bic.w	r2, r3, #25
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	4945      	ldr	r1, [pc, #276]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80023c8:	f7fe ffe8 	bl	800139c <HAL_GetTick>
 80023cc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023d0:	f7fe ffe4 	bl	800139c <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e2cd      	b.n	800297e <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023e2:	4b3d      	ldr	r3, [pc, #244]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0304 	and.w	r3, r3, #4
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0f0      	beq.n	80023d0 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ee:	4b3a      	ldr	r3, [pc, #232]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	061b      	lsls	r3, r3, #24
 80023fc:	4936      	ldr	r1, [pc, #216]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002402:	e043      	b.n	800248c <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d026      	beq.n	800245a <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800240c:	4b32      	ldr	r3, [pc, #200]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f023 0219 	bic.w	r2, r3, #25
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	492f      	ldr	r1, [pc, #188]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 800241a:	4313      	orrs	r3, r2
 800241c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241e:	f7fe ffbd 	bl	800139c <HAL_GetTick>
 8002422:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002424:	e008      	b.n	8002438 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002426:	f7fe ffb9 	bl	800139c <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	2b02      	cmp	r3, #2
 8002432:	d901      	bls.n	8002438 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e2a2      	b.n	800297e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002438:	4b27      	ldr	r3, [pc, #156]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b00      	cmp	r3, #0
 8002442:	d0f0      	beq.n	8002426 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002444:	4b24      	ldr	r3, [pc, #144]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	061b      	lsls	r3, r3, #24
 8002452:	4921      	ldr	r1, [pc, #132]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 8002454:	4313      	orrs	r3, r2
 8002456:	604b      	str	r3, [r1, #4]
 8002458:	e018      	b.n	800248c <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800245a:	4b1f      	ldr	r3, [pc, #124]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a1e      	ldr	r2, [pc, #120]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 8002460:	f023 0301 	bic.w	r3, r3, #1
 8002464:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002466:	f7fe ff99 	bl	800139c <HAL_GetTick>
 800246a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800246e:	f7fe ff95 	bl	800139c <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e27e      	b.n	800297e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002480:	4b15      	ldr	r3, [pc, #84]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1f0      	bne.n	800246e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0310 	and.w	r3, r3, #16
 8002494:	2b00      	cmp	r3, #0
 8002496:	d06d      	beq.n	8002574 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002498:	4b0f      	ldr	r3, [pc, #60]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024a0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024a2:	4b0d      	ldr	r3, [pc, #52]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 80024a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a6:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	2b08      	cmp	r3, #8
 80024ac:	d007      	beq.n	80024be <HAL_RCC_OscConfig+0x282>
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	2b18      	cmp	r3, #24
 80024b2:	d11e      	bne.n	80024f2 <HAL_RCC_OscConfig+0x2b6>
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	f003 0303 	and.w	r3, r3, #3
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d119      	bne.n	80024f2 <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80024be:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d008      	beq.n	80024dc <HAL_RCC_OscConfig+0x2a0>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	2b80      	cmp	r3, #128	; 0x80
 80024d0:	d004      	beq.n	80024dc <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e253      	b.n	800297e <HAL_RCC_OscConfig+0x742>
 80024d6:	bf00      	nop
 80024d8:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80024dc:	4ba3      	ldr	r3, [pc, #652]	; (800276c <HAL_RCC_OscConfig+0x530>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	061b      	lsls	r3, r3, #24
 80024ea:	49a0      	ldr	r1, [pc, #640]	; (800276c <HAL_RCC_OscConfig+0x530>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80024f0:	e040      	b.n	8002574 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d023      	beq.n	8002542 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80024fa:	4b9c      	ldr	r3, [pc, #624]	; (800276c <HAL_RCC_OscConfig+0x530>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a9b      	ldr	r2, [pc, #620]	; (800276c <HAL_RCC_OscConfig+0x530>)
 8002500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002504:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002506:	f7fe ff49 	bl	800139c <HAL_GetTick>
 800250a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800250c:	e008      	b.n	8002520 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800250e:	f7fe ff45 	bl	800139c <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e22e      	b.n	800297e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002520:	4b92      	ldr	r3, [pc, #584]	; (800276c <HAL_RCC_OscConfig+0x530>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002528:	2b00      	cmp	r3, #0
 800252a:	d0f0      	beq.n	800250e <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800252c:	4b8f      	ldr	r3, [pc, #572]	; (800276c <HAL_RCC_OscConfig+0x530>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	061b      	lsls	r3, r3, #24
 800253a:	498c      	ldr	r1, [pc, #560]	; (800276c <HAL_RCC_OscConfig+0x530>)
 800253c:	4313      	orrs	r3, r2
 800253e:	60cb      	str	r3, [r1, #12]
 8002540:	e018      	b.n	8002574 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002542:	4b8a      	ldr	r3, [pc, #552]	; (800276c <HAL_RCC_OscConfig+0x530>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a89      	ldr	r2, [pc, #548]	; (800276c <HAL_RCC_OscConfig+0x530>)
 8002548:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800254c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254e:	f7fe ff25 	bl	800139c <HAL_GetTick>
 8002552:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002554:	e008      	b.n	8002568 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002556:	f7fe ff21 	bl	800139c <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e20a      	b.n	800297e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002568:	4b80      	ldr	r3, [pc, #512]	; (800276c <HAL_RCC_OscConfig+0x530>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1f0      	bne.n	8002556 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0308 	and.w	r3, r3, #8
 800257c:	2b00      	cmp	r3, #0
 800257e:	d036      	beq.n	80025ee <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d019      	beq.n	80025bc <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002588:	4b78      	ldr	r3, [pc, #480]	; (800276c <HAL_RCC_OscConfig+0x530>)
 800258a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800258c:	4a77      	ldr	r2, [pc, #476]	; (800276c <HAL_RCC_OscConfig+0x530>)
 800258e:	f043 0301 	orr.w	r3, r3, #1
 8002592:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002594:	f7fe ff02 	bl	800139c <HAL_GetTick>
 8002598:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800259c:	f7fe fefe 	bl	800139c <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e1e7      	b.n	800297e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80025ae:	4b6f      	ldr	r3, [pc, #444]	; (800276c <HAL_RCC_OscConfig+0x530>)
 80025b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d0f0      	beq.n	800259c <HAL_RCC_OscConfig+0x360>
 80025ba:	e018      	b.n	80025ee <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025bc:	4b6b      	ldr	r3, [pc, #428]	; (800276c <HAL_RCC_OscConfig+0x530>)
 80025be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025c0:	4a6a      	ldr	r2, [pc, #424]	; (800276c <HAL_RCC_OscConfig+0x530>)
 80025c2:	f023 0301 	bic.w	r3, r3, #1
 80025c6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c8:	f7fe fee8 	bl	800139c <HAL_GetTick>
 80025cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025d0:	f7fe fee4 	bl	800139c <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e1cd      	b.n	800297e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80025e2:	4b62      	ldr	r3, [pc, #392]	; (800276c <HAL_RCC_OscConfig+0x530>)
 80025e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1f0      	bne.n	80025d0 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0320 	and.w	r3, r3, #32
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d036      	beq.n	8002668 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d019      	beq.n	8002636 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002602:	4b5a      	ldr	r3, [pc, #360]	; (800276c <HAL_RCC_OscConfig+0x530>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a59      	ldr	r2, [pc, #356]	; (800276c <HAL_RCC_OscConfig+0x530>)
 8002608:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800260c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800260e:	f7fe fec5 	bl	800139c <HAL_GetTick>
 8002612:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002614:	e008      	b.n	8002628 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002616:	f7fe fec1 	bl	800139c <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e1aa      	b.n	800297e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002628:	4b50      	ldr	r3, [pc, #320]	; (800276c <HAL_RCC_OscConfig+0x530>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d0f0      	beq.n	8002616 <HAL_RCC_OscConfig+0x3da>
 8002634:	e018      	b.n	8002668 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002636:	4b4d      	ldr	r3, [pc, #308]	; (800276c <HAL_RCC_OscConfig+0x530>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a4c      	ldr	r2, [pc, #304]	; (800276c <HAL_RCC_OscConfig+0x530>)
 800263c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002640:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002642:	f7fe feab 	bl	800139c <HAL_GetTick>
 8002646:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002648:	e008      	b.n	800265c <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800264a:	f7fe fea7 	bl	800139c <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e190      	b.n	800297e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800265c:	4b43      	ldr	r3, [pc, #268]	; (800276c <HAL_RCC_OscConfig+0x530>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1f0      	bne.n	800264a <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 8085 	beq.w	8002780 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002676:	4b3e      	ldr	r3, [pc, #248]	; (8002770 <HAL_RCC_OscConfig+0x534>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a3d      	ldr	r2, [pc, #244]	; (8002770 <HAL_RCC_OscConfig+0x534>)
 800267c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002680:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002682:	f7fe fe8b 	bl	800139c <HAL_GetTick>
 8002686:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800268a:	f7fe fe87 	bl	800139c <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b64      	cmp	r3, #100	; 0x64
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e170      	b.n	800297e <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800269c:	4b34      	ldr	r3, [pc, #208]	; (8002770 <HAL_RCC_OscConfig+0x534>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0f0      	beq.n	800268a <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d106      	bne.n	80026be <HAL_RCC_OscConfig+0x482>
 80026b0:	4b2e      	ldr	r3, [pc, #184]	; (800276c <HAL_RCC_OscConfig+0x530>)
 80026b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b4:	4a2d      	ldr	r2, [pc, #180]	; (800276c <HAL_RCC_OscConfig+0x530>)
 80026b6:	f043 0301 	orr.w	r3, r3, #1
 80026ba:	6713      	str	r3, [r2, #112]	; 0x70
 80026bc:	e02d      	b.n	800271a <HAL_RCC_OscConfig+0x4de>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10c      	bne.n	80026e0 <HAL_RCC_OscConfig+0x4a4>
 80026c6:	4b29      	ldr	r3, [pc, #164]	; (800276c <HAL_RCC_OscConfig+0x530>)
 80026c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ca:	4a28      	ldr	r2, [pc, #160]	; (800276c <HAL_RCC_OscConfig+0x530>)
 80026cc:	f023 0301 	bic.w	r3, r3, #1
 80026d0:	6713      	str	r3, [r2, #112]	; 0x70
 80026d2:	4b26      	ldr	r3, [pc, #152]	; (800276c <HAL_RCC_OscConfig+0x530>)
 80026d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d6:	4a25      	ldr	r2, [pc, #148]	; (800276c <HAL_RCC_OscConfig+0x530>)
 80026d8:	f023 0304 	bic.w	r3, r3, #4
 80026dc:	6713      	str	r3, [r2, #112]	; 0x70
 80026de:	e01c      	b.n	800271a <HAL_RCC_OscConfig+0x4de>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	2b05      	cmp	r3, #5
 80026e6:	d10c      	bne.n	8002702 <HAL_RCC_OscConfig+0x4c6>
 80026e8:	4b20      	ldr	r3, [pc, #128]	; (800276c <HAL_RCC_OscConfig+0x530>)
 80026ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ec:	4a1f      	ldr	r2, [pc, #124]	; (800276c <HAL_RCC_OscConfig+0x530>)
 80026ee:	f043 0304 	orr.w	r3, r3, #4
 80026f2:	6713      	str	r3, [r2, #112]	; 0x70
 80026f4:	4b1d      	ldr	r3, [pc, #116]	; (800276c <HAL_RCC_OscConfig+0x530>)
 80026f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f8:	4a1c      	ldr	r2, [pc, #112]	; (800276c <HAL_RCC_OscConfig+0x530>)
 80026fa:	f043 0301 	orr.w	r3, r3, #1
 80026fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002700:	e00b      	b.n	800271a <HAL_RCC_OscConfig+0x4de>
 8002702:	4b1a      	ldr	r3, [pc, #104]	; (800276c <HAL_RCC_OscConfig+0x530>)
 8002704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002706:	4a19      	ldr	r2, [pc, #100]	; (800276c <HAL_RCC_OscConfig+0x530>)
 8002708:	f023 0301 	bic.w	r3, r3, #1
 800270c:	6713      	str	r3, [r2, #112]	; 0x70
 800270e:	4b17      	ldr	r3, [pc, #92]	; (800276c <HAL_RCC_OscConfig+0x530>)
 8002710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002712:	4a16      	ldr	r2, [pc, #88]	; (800276c <HAL_RCC_OscConfig+0x530>)
 8002714:	f023 0304 	bic.w	r3, r3, #4
 8002718:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d015      	beq.n	800274e <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002722:	f7fe fe3b 	bl	800139c <HAL_GetTick>
 8002726:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002728:	e00a      	b.n	8002740 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800272a:	f7fe fe37 	bl	800139c <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	f241 3288 	movw	r2, #5000	; 0x1388
 8002738:	4293      	cmp	r3, r2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e11e      	b.n	800297e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002740:	4b0a      	ldr	r3, [pc, #40]	; (800276c <HAL_RCC_OscConfig+0x530>)
 8002742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d0ee      	beq.n	800272a <HAL_RCC_OscConfig+0x4ee>
 800274c:	e018      	b.n	8002780 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800274e:	f7fe fe25 	bl	800139c <HAL_GetTick>
 8002752:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002754:	e00e      	b.n	8002774 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002756:	f7fe fe21 	bl	800139c <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	f241 3288 	movw	r2, #5000	; 0x1388
 8002764:	4293      	cmp	r3, r2
 8002766:	d905      	bls.n	8002774 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e108      	b.n	800297e <HAL_RCC_OscConfig+0x742>
 800276c:	58024400 	.word	0x58024400
 8002770:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002774:	4b84      	ldr	r3, [pc, #528]	; (8002988 <HAL_RCC_OscConfig+0x74c>)
 8002776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1ea      	bne.n	8002756 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002784:	2b00      	cmp	r3, #0
 8002786:	f000 80f9 	beq.w	800297c <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800278a:	4b7f      	ldr	r3, [pc, #508]	; (8002988 <HAL_RCC_OscConfig+0x74c>)
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002792:	2b18      	cmp	r3, #24
 8002794:	f000 80b4 	beq.w	8002900 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279c:	2b02      	cmp	r3, #2
 800279e:	f040 8095 	bne.w	80028cc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a2:	4b79      	ldr	r3, [pc, #484]	; (8002988 <HAL_RCC_OscConfig+0x74c>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a78      	ldr	r2, [pc, #480]	; (8002988 <HAL_RCC_OscConfig+0x74c>)
 80027a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ae:	f7fe fdf5 	bl	800139c <HAL_GetTick>
 80027b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027b4:	e008      	b.n	80027c8 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027b6:	f7fe fdf1 	bl	800139c <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e0da      	b.n	800297e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027c8:	4b6f      	ldr	r3, [pc, #444]	; (8002988 <HAL_RCC_OscConfig+0x74c>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1f0      	bne.n	80027b6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027d4:	4b6c      	ldr	r3, [pc, #432]	; (8002988 <HAL_RCC_OscConfig+0x74c>)
 80027d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027d8:	4b6c      	ldr	r3, [pc, #432]	; (800298c <HAL_RCC_OscConfig+0x750>)
 80027da:	4013      	ands	r3, r2
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80027e4:	0112      	lsls	r2, r2, #4
 80027e6:	430a      	orrs	r2, r1
 80027e8:	4967      	ldr	r1, [pc, #412]	; (8002988 <HAL_RCC_OscConfig+0x74c>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	628b      	str	r3, [r1, #40]	; 0x28
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	3b01      	subs	r3, #1
 80027f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027fc:	3b01      	subs	r3, #1
 80027fe:	025b      	lsls	r3, r3, #9
 8002800:	b29b      	uxth	r3, r3
 8002802:	431a      	orrs	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002808:	3b01      	subs	r3, #1
 800280a:	041b      	lsls	r3, r3, #16
 800280c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002810:	431a      	orrs	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002816:	3b01      	subs	r3, #1
 8002818:	061b      	lsls	r3, r3, #24
 800281a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800281e:	495a      	ldr	r1, [pc, #360]	; (8002988 <HAL_RCC_OscConfig+0x74c>)
 8002820:	4313      	orrs	r3, r2
 8002822:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002824:	4b58      	ldr	r3, [pc, #352]	; (8002988 <HAL_RCC_OscConfig+0x74c>)
 8002826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002828:	4a57      	ldr	r2, [pc, #348]	; (8002988 <HAL_RCC_OscConfig+0x74c>)
 800282a:	f023 0301 	bic.w	r3, r3, #1
 800282e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002830:	4b55      	ldr	r3, [pc, #340]	; (8002988 <HAL_RCC_OscConfig+0x74c>)
 8002832:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002834:	4b56      	ldr	r3, [pc, #344]	; (8002990 <HAL_RCC_OscConfig+0x754>)
 8002836:	4013      	ands	r3, r2
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800283c:	00d2      	lsls	r2, r2, #3
 800283e:	4952      	ldr	r1, [pc, #328]	; (8002988 <HAL_RCC_OscConfig+0x74c>)
 8002840:	4313      	orrs	r3, r2
 8002842:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002844:	4b50      	ldr	r3, [pc, #320]	; (8002988 <HAL_RCC_OscConfig+0x74c>)
 8002846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002848:	f023 020c 	bic.w	r2, r3, #12
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002850:	494d      	ldr	r1, [pc, #308]	; (8002988 <HAL_RCC_OscConfig+0x74c>)
 8002852:	4313      	orrs	r3, r2
 8002854:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002856:	4b4c      	ldr	r3, [pc, #304]	; (8002988 <HAL_RCC_OscConfig+0x74c>)
 8002858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285a:	f023 0202 	bic.w	r2, r3, #2
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002862:	4949      	ldr	r1, [pc, #292]	; (8002988 <HAL_RCC_OscConfig+0x74c>)
 8002864:	4313      	orrs	r3, r2
 8002866:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002868:	4b47      	ldr	r3, [pc, #284]	; (8002988 <HAL_RCC_OscConfig+0x74c>)
 800286a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286c:	4a46      	ldr	r2, [pc, #280]	; (8002988 <HAL_RCC_OscConfig+0x74c>)
 800286e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002872:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002874:	4b44      	ldr	r3, [pc, #272]	; (8002988 <HAL_RCC_OscConfig+0x74c>)
 8002876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002878:	4a43      	ldr	r2, [pc, #268]	; (8002988 <HAL_RCC_OscConfig+0x74c>)
 800287a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800287e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002880:	4b41      	ldr	r3, [pc, #260]	; (8002988 <HAL_RCC_OscConfig+0x74c>)
 8002882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002884:	4a40      	ldr	r2, [pc, #256]	; (8002988 <HAL_RCC_OscConfig+0x74c>)
 8002886:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800288a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800288c:	4b3e      	ldr	r3, [pc, #248]	; (8002988 <HAL_RCC_OscConfig+0x74c>)
 800288e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002890:	4a3d      	ldr	r2, [pc, #244]	; (8002988 <HAL_RCC_OscConfig+0x74c>)
 8002892:	f043 0301 	orr.w	r3, r3, #1
 8002896:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002898:	4b3b      	ldr	r3, [pc, #236]	; (8002988 <HAL_RCC_OscConfig+0x74c>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a3a      	ldr	r2, [pc, #232]	; (8002988 <HAL_RCC_OscConfig+0x74c>)
 800289e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a4:	f7fe fd7a 	bl	800139c <HAL_GetTick>
 80028a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ac:	f7fe fd76 	bl	800139c <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e05f      	b.n	800297e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028be:	4b32      	ldr	r3, [pc, #200]	; (8002988 <HAL_RCC_OscConfig+0x74c>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d0f0      	beq.n	80028ac <HAL_RCC_OscConfig+0x670>
 80028ca:	e057      	b.n	800297c <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028cc:	4b2e      	ldr	r3, [pc, #184]	; (8002988 <HAL_RCC_OscConfig+0x74c>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a2d      	ldr	r2, [pc, #180]	; (8002988 <HAL_RCC_OscConfig+0x74c>)
 80028d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d8:	f7fe fd60 	bl	800139c <HAL_GetTick>
 80028dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028e0:	f7fe fd5c 	bl	800139c <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e045      	b.n	800297e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028f2:	4b25      	ldr	r3, [pc, #148]	; (8002988 <HAL_RCC_OscConfig+0x74c>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1f0      	bne.n	80028e0 <HAL_RCC_OscConfig+0x6a4>
 80028fe:	e03d      	b.n	800297c <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002900:	4b21      	ldr	r3, [pc, #132]	; (8002988 <HAL_RCC_OscConfig+0x74c>)
 8002902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002904:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002906:	4b20      	ldr	r3, [pc, #128]	; (8002988 <HAL_RCC_OscConfig+0x74c>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002910:	2b01      	cmp	r3, #1
 8002912:	d031      	beq.n	8002978 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	f003 0203 	and.w	r2, r3, #3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800291e:	429a      	cmp	r2, r3
 8002920:	d12a      	bne.n	8002978 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	091b      	lsrs	r3, r3, #4
 8002926:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800292e:	429a      	cmp	r2, r3
 8002930:	d122      	bne.n	8002978 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800293e:	429a      	cmp	r2, r3
 8002940:	d11a      	bne.n	8002978 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	0a5b      	lsrs	r3, r3, #9
 8002946:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800294e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002950:	429a      	cmp	r2, r3
 8002952:	d111      	bne.n	8002978 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	0c1b      	lsrs	r3, r3, #16
 8002958:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002960:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002962:	429a      	cmp	r2, r3
 8002964:	d108      	bne.n	8002978 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	0e1b      	lsrs	r3, r3, #24
 800296a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002972:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002974:	429a      	cmp	r2, r3
 8002976:	d001      	beq.n	800297c <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e000      	b.n	800297e <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3730      	adds	r7, #48	; 0x30
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	58024400 	.word	0x58024400
 800298c:	fffffc0c 	.word	0xfffffc0c
 8002990:	ffff0007 	.word	0xffff0007

08002994 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d101      	bne.n	80029a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e19c      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029a8:	4b8a      	ldr	r3, [pc, #552]	; (8002bd4 <HAL_RCC_ClockConfig+0x240>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 030f 	and.w	r3, r3, #15
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d910      	bls.n	80029d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b6:	4b87      	ldr	r3, [pc, #540]	; (8002bd4 <HAL_RCC_ClockConfig+0x240>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f023 020f 	bic.w	r2, r3, #15
 80029be:	4985      	ldr	r1, [pc, #532]	; (8002bd4 <HAL_RCC_ClockConfig+0x240>)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c6:	4b83      	ldr	r3, [pc, #524]	; (8002bd4 <HAL_RCC_ClockConfig+0x240>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 030f 	and.w	r3, r3, #15
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d001      	beq.n	80029d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e184      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0304 	and.w	r3, r3, #4
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d010      	beq.n	8002a06 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	691a      	ldr	r2, [r3, #16]
 80029e8:	4b7b      	ldr	r3, [pc, #492]	; (8002bd8 <HAL_RCC_ClockConfig+0x244>)
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d908      	bls.n	8002a06 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80029f4:	4b78      	ldr	r3, [pc, #480]	; (8002bd8 <HAL_RCC_ClockConfig+0x244>)
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	4975      	ldr	r1, [pc, #468]	; (8002bd8 <HAL_RCC_ClockConfig+0x244>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0308 	and.w	r3, r3, #8
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d010      	beq.n	8002a34 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	695a      	ldr	r2, [r3, #20]
 8002a16:	4b70      	ldr	r3, [pc, #448]	; (8002bd8 <HAL_RCC_ClockConfig+0x244>)
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d908      	bls.n	8002a34 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002a22:	4b6d      	ldr	r3, [pc, #436]	; (8002bd8 <HAL_RCC_ClockConfig+0x244>)
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	496a      	ldr	r1, [pc, #424]	; (8002bd8 <HAL_RCC_ClockConfig+0x244>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0310 	and.w	r3, r3, #16
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d010      	beq.n	8002a62 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	699a      	ldr	r2, [r3, #24]
 8002a44:	4b64      	ldr	r3, [pc, #400]	; (8002bd8 <HAL_RCC_ClockConfig+0x244>)
 8002a46:	69db      	ldr	r3, [r3, #28]
 8002a48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d908      	bls.n	8002a62 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002a50:	4b61      	ldr	r3, [pc, #388]	; (8002bd8 <HAL_RCC_ClockConfig+0x244>)
 8002a52:	69db      	ldr	r3, [r3, #28]
 8002a54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	495e      	ldr	r1, [pc, #376]	; (8002bd8 <HAL_RCC_ClockConfig+0x244>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0320 	and.w	r3, r3, #32
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d010      	beq.n	8002a90 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	69da      	ldr	r2, [r3, #28]
 8002a72:	4b59      	ldr	r3, [pc, #356]	; (8002bd8 <HAL_RCC_ClockConfig+0x244>)
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d908      	bls.n	8002a90 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002a7e:	4b56      	ldr	r3, [pc, #344]	; (8002bd8 <HAL_RCC_ClockConfig+0x244>)
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	4953      	ldr	r1, [pc, #332]	; (8002bd8 <HAL_RCC_ClockConfig+0x244>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d010      	beq.n	8002abe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68da      	ldr	r2, [r3, #12]
 8002aa0:	4b4d      	ldr	r3, [pc, #308]	; (8002bd8 <HAL_RCC_ClockConfig+0x244>)
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	f003 030f 	and.w	r3, r3, #15
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d908      	bls.n	8002abe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aac:	4b4a      	ldr	r3, [pc, #296]	; (8002bd8 <HAL_RCC_ClockConfig+0x244>)
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	f023 020f 	bic.w	r2, r3, #15
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	4947      	ldr	r1, [pc, #284]	; (8002bd8 <HAL_RCC_ClockConfig+0x244>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d055      	beq.n	8002b76 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002aca:	4b43      	ldr	r3, [pc, #268]	; (8002bd8 <HAL_RCC_ClockConfig+0x244>)
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	4940      	ldr	r1, [pc, #256]	; (8002bd8 <HAL_RCC_ClockConfig+0x244>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d107      	bne.n	8002af4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ae4:	4b3c      	ldr	r3, [pc, #240]	; (8002bd8 <HAL_RCC_ClockConfig+0x244>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d121      	bne.n	8002b34 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e0f6      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	2b03      	cmp	r3, #3
 8002afa:	d107      	bne.n	8002b0c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002afc:	4b36      	ldr	r3, [pc, #216]	; (8002bd8 <HAL_RCC_ClockConfig+0x244>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d115      	bne.n	8002b34 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e0ea      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d107      	bne.n	8002b24 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b14:	4b30      	ldr	r3, [pc, #192]	; (8002bd8 <HAL_RCC_ClockConfig+0x244>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d109      	bne.n	8002b34 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e0de      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b24:	4b2c      	ldr	r3, [pc, #176]	; (8002bd8 <HAL_RCC_ClockConfig+0x244>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e0d6      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b34:	4b28      	ldr	r3, [pc, #160]	; (8002bd8 <HAL_RCC_ClockConfig+0x244>)
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	f023 0207 	bic.w	r2, r3, #7
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	4925      	ldr	r1, [pc, #148]	; (8002bd8 <HAL_RCC_ClockConfig+0x244>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b46:	f7fe fc29 	bl	800139c <HAL_GetTick>
 8002b4a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b4c:	e00a      	b.n	8002b64 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b4e:	f7fe fc25 	bl	800139c <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e0be      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b64:	4b1c      	ldr	r3, [pc, #112]	; (8002bd8 <HAL_RCC_ClockConfig+0x244>)
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	00db      	lsls	r3, r3, #3
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d1eb      	bne.n	8002b4e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d010      	beq.n	8002ba4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68da      	ldr	r2, [r3, #12]
 8002b86:	4b14      	ldr	r3, [pc, #80]	; (8002bd8 <HAL_RCC_ClockConfig+0x244>)
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d208      	bcs.n	8002ba4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b92:	4b11      	ldr	r3, [pc, #68]	; (8002bd8 <HAL_RCC_ClockConfig+0x244>)
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	f023 020f 	bic.w	r2, r3, #15
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	490e      	ldr	r1, [pc, #56]	; (8002bd8 <HAL_RCC_ClockConfig+0x244>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ba4:	4b0b      	ldr	r3, [pc, #44]	; (8002bd4 <HAL_RCC_ClockConfig+0x240>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 030f 	and.w	r3, r3, #15
 8002bac:	683a      	ldr	r2, [r7, #0]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d214      	bcs.n	8002bdc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bb2:	4b08      	ldr	r3, [pc, #32]	; (8002bd4 <HAL_RCC_ClockConfig+0x240>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f023 020f 	bic.w	r2, r3, #15
 8002bba:	4906      	ldr	r1, [pc, #24]	; (8002bd4 <HAL_RCC_ClockConfig+0x240>)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc2:	4b04      	ldr	r3, [pc, #16]	; (8002bd4 <HAL_RCC_ClockConfig+0x240>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 030f 	and.w	r3, r3, #15
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d005      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e086      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x34e>
 8002bd4:	52002000 	.word	0x52002000
 8002bd8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0304 	and.w	r3, r3, #4
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d010      	beq.n	8002c0a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	691a      	ldr	r2, [r3, #16]
 8002bec:	4b3f      	ldr	r3, [pc, #252]	; (8002cec <HAL_RCC_ClockConfig+0x358>)
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d208      	bcs.n	8002c0a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002bf8:	4b3c      	ldr	r3, [pc, #240]	; (8002cec <HAL_RCC_ClockConfig+0x358>)
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	4939      	ldr	r1, [pc, #228]	; (8002cec <HAL_RCC_ClockConfig+0x358>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0308 	and.w	r3, r3, #8
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d010      	beq.n	8002c38 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	695a      	ldr	r2, [r3, #20]
 8002c1a:	4b34      	ldr	r3, [pc, #208]	; (8002cec <HAL_RCC_ClockConfig+0x358>)
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d208      	bcs.n	8002c38 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c26:	4b31      	ldr	r3, [pc, #196]	; (8002cec <HAL_RCC_ClockConfig+0x358>)
 8002c28:	69db      	ldr	r3, [r3, #28]
 8002c2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	492e      	ldr	r1, [pc, #184]	; (8002cec <HAL_RCC_ClockConfig+0x358>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0310 	and.w	r3, r3, #16
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d010      	beq.n	8002c66 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	699a      	ldr	r2, [r3, #24]
 8002c48:	4b28      	ldr	r3, [pc, #160]	; (8002cec <HAL_RCC_ClockConfig+0x358>)
 8002c4a:	69db      	ldr	r3, [r3, #28]
 8002c4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d208      	bcs.n	8002c66 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c54:	4b25      	ldr	r3, [pc, #148]	; (8002cec <HAL_RCC_ClockConfig+0x358>)
 8002c56:	69db      	ldr	r3, [r3, #28]
 8002c58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	4922      	ldr	r1, [pc, #136]	; (8002cec <HAL_RCC_ClockConfig+0x358>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0320 	and.w	r3, r3, #32
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d010      	beq.n	8002c94 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	69da      	ldr	r2, [r3, #28]
 8002c76:	4b1d      	ldr	r3, [pc, #116]	; (8002cec <HAL_RCC_ClockConfig+0x358>)
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d208      	bcs.n	8002c94 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002c82:	4b1a      	ldr	r3, [pc, #104]	; (8002cec <HAL_RCC_ClockConfig+0x358>)
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	4917      	ldr	r1, [pc, #92]	; (8002cec <HAL_RCC_ClockConfig+0x358>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002c94:	f000 f834 	bl	8002d00 <HAL_RCC_GetSysClockFreq>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	4b14      	ldr	r3, [pc, #80]	; (8002cec <HAL_RCC_ClockConfig+0x358>)
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	0a1b      	lsrs	r3, r3, #8
 8002ca0:	f003 030f 	and.w	r3, r3, #15
 8002ca4:	4912      	ldr	r1, [pc, #72]	; (8002cf0 <HAL_RCC_ClockConfig+0x35c>)
 8002ca6:	5ccb      	ldrb	r3, [r1, r3]
 8002ca8:	f003 031f 	and.w	r3, r3, #31
 8002cac:	fa22 f303 	lsr.w	r3, r2, r3
 8002cb0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002cb2:	4b0e      	ldr	r3, [pc, #56]	; (8002cec <HAL_RCC_ClockConfig+0x358>)
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	f003 030f 	and.w	r3, r3, #15
 8002cba:	4a0d      	ldr	r2, [pc, #52]	; (8002cf0 <HAL_RCC_ClockConfig+0x35c>)
 8002cbc:	5cd3      	ldrb	r3, [r2, r3]
 8002cbe:	f003 031f 	and.w	r3, r3, #31
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	fa22 f303 	lsr.w	r3, r2, r3
 8002cc8:	4a0a      	ldr	r2, [pc, #40]	; (8002cf4 <HAL_RCC_ClockConfig+0x360>)
 8002cca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ccc:	4a0a      	ldr	r2, [pc, #40]	; (8002cf8 <HAL_RCC_ClockConfig+0x364>)
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002cd2:	4b0a      	ldr	r3, [pc, #40]	; (8002cfc <HAL_RCC_ClockConfig+0x368>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7fe f9e2 	bl	80010a0 <HAL_InitTick>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3718      	adds	r7, #24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	58024400 	.word	0x58024400
 8002cf0:	08008570 	.word	0x08008570
 8002cf4:	2400fa04 	.word	0x2400fa04
 8002cf8:	2400fa00 	.word	0x2400fa00
 8002cfc:	2400fa08 	.word	0x2400fa08

08002d00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b089      	sub	sp, #36	; 0x24
 8002d04:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d06:	4bb3      	ldr	r3, [pc, #716]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d0e:	2b18      	cmp	r3, #24
 8002d10:	f200 8155 	bhi.w	8002fbe <HAL_RCC_GetSysClockFreq+0x2be>
 8002d14:	a201      	add	r2, pc, #4	; (adr r2, 8002d1c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d1a:	bf00      	nop
 8002d1c:	08002d81 	.word	0x08002d81
 8002d20:	08002fbf 	.word	0x08002fbf
 8002d24:	08002fbf 	.word	0x08002fbf
 8002d28:	08002fbf 	.word	0x08002fbf
 8002d2c:	08002fbf 	.word	0x08002fbf
 8002d30:	08002fbf 	.word	0x08002fbf
 8002d34:	08002fbf 	.word	0x08002fbf
 8002d38:	08002fbf 	.word	0x08002fbf
 8002d3c:	08002da7 	.word	0x08002da7
 8002d40:	08002fbf 	.word	0x08002fbf
 8002d44:	08002fbf 	.word	0x08002fbf
 8002d48:	08002fbf 	.word	0x08002fbf
 8002d4c:	08002fbf 	.word	0x08002fbf
 8002d50:	08002fbf 	.word	0x08002fbf
 8002d54:	08002fbf 	.word	0x08002fbf
 8002d58:	08002fbf 	.word	0x08002fbf
 8002d5c:	08002dad 	.word	0x08002dad
 8002d60:	08002fbf 	.word	0x08002fbf
 8002d64:	08002fbf 	.word	0x08002fbf
 8002d68:	08002fbf 	.word	0x08002fbf
 8002d6c:	08002fbf 	.word	0x08002fbf
 8002d70:	08002fbf 	.word	0x08002fbf
 8002d74:	08002fbf 	.word	0x08002fbf
 8002d78:	08002fbf 	.word	0x08002fbf
 8002d7c:	08002db3 	.word	0x08002db3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d80:	4b94      	ldr	r3, [pc, #592]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0320 	and.w	r3, r3, #32
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d009      	beq.n	8002da0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002d8c:	4b91      	ldr	r3, [pc, #580]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	08db      	lsrs	r3, r3, #3
 8002d92:	f003 0303 	and.w	r3, r3, #3
 8002d96:	4a90      	ldr	r2, [pc, #576]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002d98:	fa22 f303 	lsr.w	r3, r2, r3
 8002d9c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002d9e:	e111      	b.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002da0:	4b8d      	ldr	r3, [pc, #564]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002da2:	61bb      	str	r3, [r7, #24]
    break;
 8002da4:	e10e      	b.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002da6:	4b8d      	ldr	r3, [pc, #564]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002da8:	61bb      	str	r3, [r7, #24]
    break;
 8002daa:	e10b      	b.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002dac:	4b8c      	ldr	r3, [pc, #560]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002dae:	61bb      	str	r3, [r7, #24]
    break;
 8002db0:	e108      	b.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002db2:	4b88      	ldr	r3, [pc, #544]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db6:	f003 0303 	and.w	r3, r3, #3
 8002dba:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002dbc:	4b85      	ldr	r3, [pc, #532]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc0:	091b      	lsrs	r3, r3, #4
 8002dc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dc6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002dc8:	4b82      	ldr	r3, [pc, #520]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002dd2:	4b80      	ldr	r3, [pc, #512]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd6:	08db      	lsrs	r3, r3, #3
 8002dd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	fb02 f303 	mul.w	r3, r2, r3
 8002de2:	ee07 3a90 	vmov	s15, r3
 8002de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dea:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f000 80e1 	beq.w	8002fb8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	f000 8083 	beq.w	8002f04 <HAL_RCC_GetSysClockFreq+0x204>
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	f200 80a1 	bhi.w	8002f48 <HAL_RCC_GetSysClockFreq+0x248>
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d003      	beq.n	8002e14 <HAL_RCC_GetSysClockFreq+0x114>
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d056      	beq.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002e12:	e099      	b.n	8002f48 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e14:	4b6f      	ldr	r3, [pc, #444]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0320 	and.w	r3, r3, #32
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d02d      	beq.n	8002e7c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002e20:	4b6c      	ldr	r3, [pc, #432]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	08db      	lsrs	r3, r3, #3
 8002e26:	f003 0303 	and.w	r3, r3, #3
 8002e2a:	4a6b      	ldr	r2, [pc, #428]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e30:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	ee07 3a90 	vmov	s15, r3
 8002e38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	ee07 3a90 	vmov	s15, r3
 8002e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e4a:	4b62      	ldr	r3, [pc, #392]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e52:	ee07 3a90 	vmov	s15, r3
 8002e56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e5e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002fe4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e76:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002e7a:	e087      	b.n	8002f8c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	ee07 3a90 	vmov	s15, r3
 8002e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e86:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002fe8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002e8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e8e:	4b51      	ldr	r3, [pc, #324]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e96:	ee07 3a90 	vmov	s15, r3
 8002e9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ea2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002fe4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002eaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002eae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002eb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002ebe:	e065      	b.n	8002f8c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	ee07 3a90 	vmov	s15, r3
 8002ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eca:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002fec <HAL_RCC_GetSysClockFreq+0x2ec>
 8002ece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ed2:	4b40      	ldr	r3, [pc, #256]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eda:	ee07 3a90 	vmov	s15, r3
 8002ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ee2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ee6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002fe4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002eea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ef2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002efe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002f02:	e043      	b.n	8002f8c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	ee07 3a90 	vmov	s15, r3
 8002f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f0e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002ff0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002f12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f16:	4b2f      	ldr	r3, [pc, #188]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f1e:	ee07 3a90 	vmov	s15, r3
 8002f22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f26:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f2a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002fe4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002f46:	e021      	b.n	8002f8c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	ee07 3a90 	vmov	s15, r3
 8002f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f52:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002fec <HAL_RCC_GetSysClockFreq+0x2ec>
 8002f56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f5a:	4b1e      	ldr	r3, [pc, #120]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f62:	ee07 3a90 	vmov	s15, r3
 8002f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f6e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002fe4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002f8a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002f8c:	4b11      	ldr	r3, [pc, #68]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f90:	0a5b      	lsrs	r3, r3, #9
 8002f92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f96:	3301      	adds	r3, #1
 8002f98:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	ee07 3a90 	vmov	s15, r3
 8002fa0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002fa4:	edd7 6a07 	vldr	s13, [r7, #28]
 8002fa8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fb0:	ee17 3a90 	vmov	r3, s15
 8002fb4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002fb6:	e005      	b.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	61bb      	str	r3, [r7, #24]
    break;
 8002fbc:	e002      	b.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002fbe:	4b07      	ldr	r3, [pc, #28]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002fc0:	61bb      	str	r3, [r7, #24]
    break;
 8002fc2:	bf00      	nop
  }

  return sysclockfreq;
 8002fc4:	69bb      	ldr	r3, [r7, #24]
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3724      	adds	r7, #36	; 0x24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	58024400 	.word	0x58024400
 8002fd8:	03d09000 	.word	0x03d09000
 8002fdc:	003d0900 	.word	0x003d0900
 8002fe0:	007a1200 	.word	0x007a1200
 8002fe4:	46000000 	.word	0x46000000
 8002fe8:	4c742400 	.word	0x4c742400
 8002fec:	4a742400 	.word	0x4a742400
 8002ff0:	4af42400 	.word	0x4af42400

08002ff4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002ffa:	f7ff fe81 	bl	8002d00 <HAL_RCC_GetSysClockFreq>
 8002ffe:	4602      	mov	r2, r0
 8003000:	4b10      	ldr	r3, [pc, #64]	; (8003044 <HAL_RCC_GetHCLKFreq+0x50>)
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	0a1b      	lsrs	r3, r3, #8
 8003006:	f003 030f 	and.w	r3, r3, #15
 800300a:	490f      	ldr	r1, [pc, #60]	; (8003048 <HAL_RCC_GetHCLKFreq+0x54>)
 800300c:	5ccb      	ldrb	r3, [r1, r3]
 800300e:	f003 031f 	and.w	r3, r3, #31
 8003012:	fa22 f303 	lsr.w	r3, r2, r3
 8003016:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003018:	4b0a      	ldr	r3, [pc, #40]	; (8003044 <HAL_RCC_GetHCLKFreq+0x50>)
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	f003 030f 	and.w	r3, r3, #15
 8003020:	4a09      	ldr	r2, [pc, #36]	; (8003048 <HAL_RCC_GetHCLKFreq+0x54>)
 8003022:	5cd3      	ldrb	r3, [r2, r3]
 8003024:	f003 031f 	and.w	r3, r3, #31
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	fa22 f303 	lsr.w	r3, r2, r3
 800302e:	4a07      	ldr	r2, [pc, #28]	; (800304c <HAL_RCC_GetHCLKFreq+0x58>)
 8003030:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003032:	4a07      	ldr	r2, [pc, #28]	; (8003050 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003038:	4b04      	ldr	r3, [pc, #16]	; (800304c <HAL_RCC_GetHCLKFreq+0x58>)
 800303a:	681b      	ldr	r3, [r3, #0]
}
 800303c:	4618      	mov	r0, r3
 800303e:	3708      	adds	r7, #8
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	58024400 	.word	0x58024400
 8003048:	08008570 	.word	0x08008570
 800304c:	2400fa04 	.word	0x2400fa04
 8003050:	2400fa00 	.word	0x2400fa00

08003054 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003058:	f7ff ffcc 	bl	8002ff4 <HAL_RCC_GetHCLKFreq>
 800305c:	4602      	mov	r2, r0
 800305e:	4b06      	ldr	r3, [pc, #24]	; (8003078 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	091b      	lsrs	r3, r3, #4
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	4904      	ldr	r1, [pc, #16]	; (800307c <HAL_RCC_GetPCLK1Freq+0x28>)
 800306a:	5ccb      	ldrb	r3, [r1, r3]
 800306c:	f003 031f 	and.w	r3, r3, #31
 8003070:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003074:	4618      	mov	r0, r3
 8003076:	bd80      	pop	{r7, pc}
 8003078:	58024400 	.word	0x58024400
 800307c:	08008570 	.word	0x08008570

08003080 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003084:	f7ff ffb6 	bl	8002ff4 <HAL_RCC_GetHCLKFreq>
 8003088:	4602      	mov	r2, r0
 800308a:	4b06      	ldr	r3, [pc, #24]	; (80030a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	0a1b      	lsrs	r3, r3, #8
 8003090:	f003 0307 	and.w	r3, r3, #7
 8003094:	4904      	ldr	r1, [pc, #16]	; (80030a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003096:	5ccb      	ldrb	r3, [r1, r3]
 8003098:	f003 031f 	and.w	r3, r3, #31
 800309c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	58024400 	.word	0x58024400
 80030a8:	08008570 	.word	0x08008570

080030ac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	223f      	movs	r2, #63	; 0x3f
 80030ba:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80030bc:	4b1a      	ldr	r3, [pc, #104]	; (8003128 <HAL_RCC_GetClockConfig+0x7c>)
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	f003 0207 	and.w	r2, r3, #7
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80030c8:	4b17      	ldr	r3, [pc, #92]	; (8003128 <HAL_RCC_GetClockConfig+0x7c>)
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80030d4:	4b14      	ldr	r3, [pc, #80]	; (8003128 <HAL_RCC_GetClockConfig+0x7c>)
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	f003 020f 	and.w	r2, r3, #15
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80030e0:	4b11      	ldr	r3, [pc, #68]	; (8003128 <HAL_RCC_GetClockConfig+0x7c>)
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80030ec:	4b0e      	ldr	r3, [pc, #56]	; (8003128 <HAL_RCC_GetClockConfig+0x7c>)
 80030ee:	69db      	ldr	r3, [r3, #28]
 80030f0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80030f8:	4b0b      	ldr	r3, [pc, #44]	; (8003128 <HAL_RCC_GetClockConfig+0x7c>)
 80030fa:	69db      	ldr	r3, [r3, #28]
 80030fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003104:	4b08      	ldr	r3, [pc, #32]	; (8003128 <HAL_RCC_GetClockConfig+0x7c>)
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003110:	4b06      	ldr	r3, [pc, #24]	; (800312c <HAL_RCC_GetClockConfig+0x80>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 020f 	and.w	r2, r3, #15
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	601a      	str	r2, [r3, #0]
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	58024400 	.word	0x58024400
 800312c:	52002000 	.word	0x52002000

08003130 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b086      	sub	sp, #24
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003138:	2300      	movs	r3, #0
 800313a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800313c:	2300      	movs	r3, #0
 800313e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d03f      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003150:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003154:	d02a      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003156:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800315a:	d824      	bhi.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800315c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003160:	d018      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003162:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003166:	d81e      	bhi.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003168:	2b00      	cmp	r3, #0
 800316a:	d003      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800316c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003170:	d007      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003172:	e018      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003174:	4bab      	ldr	r3, [pc, #684]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003178:	4aaa      	ldr	r2, [pc, #680]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800317a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800317e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003180:	e015      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	3304      	adds	r3, #4
 8003186:	2102      	movs	r1, #2
 8003188:	4618      	mov	r0, r3
 800318a:	f001 f989 	bl	80044a0 <RCCEx_PLL2_Config>
 800318e:	4603      	mov	r3, r0
 8003190:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003192:	e00c      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	3324      	adds	r3, #36	; 0x24
 8003198:	2102      	movs	r1, #2
 800319a:	4618      	mov	r0, r3
 800319c:	f001 fa32 	bl	8004604 <RCCEx_PLL3_Config>
 80031a0:	4603      	mov	r3, r0
 80031a2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80031a4:	e003      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	75fb      	strb	r3, [r7, #23]
      break;
 80031aa:	e000      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80031ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031ae:	7dfb      	ldrb	r3, [r7, #23]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d109      	bne.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80031b4:	4b9b      	ldr	r3, [pc, #620]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031c0:	4998      	ldr	r1, [pc, #608]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	650b      	str	r3, [r1, #80]	; 0x50
 80031c6:	e001      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031c8:	7dfb      	ldrb	r3, [r7, #23]
 80031ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d03d      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031dc:	2b04      	cmp	r3, #4
 80031de:	d826      	bhi.n	800322e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80031e0:	a201      	add	r2, pc, #4	; (adr r2, 80031e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80031e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e6:	bf00      	nop
 80031e8:	080031fd 	.word	0x080031fd
 80031ec:	0800320b 	.word	0x0800320b
 80031f0:	0800321d 	.word	0x0800321d
 80031f4:	08003235 	.word	0x08003235
 80031f8:	08003235 	.word	0x08003235
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031fc:	4b89      	ldr	r3, [pc, #548]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003200:	4a88      	ldr	r2, [pc, #544]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003202:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003206:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003208:	e015      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	3304      	adds	r3, #4
 800320e:	2100      	movs	r1, #0
 8003210:	4618      	mov	r0, r3
 8003212:	f001 f945 	bl	80044a0 <RCCEx_PLL2_Config>
 8003216:	4603      	mov	r3, r0
 8003218:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800321a:	e00c      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3324      	adds	r3, #36	; 0x24
 8003220:	2100      	movs	r1, #0
 8003222:	4618      	mov	r0, r3
 8003224:	f001 f9ee 	bl	8004604 <RCCEx_PLL3_Config>
 8003228:	4603      	mov	r3, r0
 800322a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800322c:	e003      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	75fb      	strb	r3, [r7, #23]
      break;
 8003232:	e000      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003234:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003236:	7dfb      	ldrb	r3, [r7, #23]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d109      	bne.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800323c:	4b79      	ldr	r3, [pc, #484]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800323e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003240:	f023 0207 	bic.w	r2, r3, #7
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003248:	4976      	ldr	r1, [pc, #472]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800324a:	4313      	orrs	r3, r2
 800324c:	650b      	str	r3, [r1, #80]	; 0x50
 800324e:	e001      	b.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003250:	7dfb      	ldrb	r3, [r7, #23]
 8003252:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800325c:	2b00      	cmp	r3, #0
 800325e:	d051      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003266:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800326a:	d036      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800326c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003270:	d830      	bhi.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003272:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003276:	d032      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003278:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800327c:	d82a      	bhi.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800327e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003282:	d02e      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8003284:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003288:	d824      	bhi.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800328a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800328e:	d018      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003290:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003294:	d81e      	bhi.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800329a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800329e:	d007      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80032a0:	e018      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032a2:	4b60      	ldr	r3, [pc, #384]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a6:	4a5f      	ldr	r2, [pc, #380]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80032ae:	e019      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3304      	adds	r3, #4
 80032b4:	2100      	movs	r1, #0
 80032b6:	4618      	mov	r0, r3
 80032b8:	f001 f8f2 	bl	80044a0 <RCCEx_PLL2_Config>
 80032bc:	4603      	mov	r3, r0
 80032be:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80032c0:	e010      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	3324      	adds	r3, #36	; 0x24
 80032c6:	2100      	movs	r1, #0
 80032c8:	4618      	mov	r0, r3
 80032ca:	f001 f99b 	bl	8004604 <RCCEx_PLL3_Config>
 80032ce:	4603      	mov	r3, r0
 80032d0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80032d2:	e007      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	75fb      	strb	r3, [r7, #23]
      break;
 80032d8:	e004      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80032da:	bf00      	nop
 80032dc:	e002      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80032de:	bf00      	nop
 80032e0:	e000      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80032e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032e4:	7dfb      	ldrb	r3, [r7, #23]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10a      	bne.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80032ea:	4b4e      	ldr	r3, [pc, #312]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ee:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80032f8:	494a      	ldr	r1, [pc, #296]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	658b      	str	r3, [r1, #88]	; 0x58
 80032fe:	e001      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003300:	7dfb      	ldrb	r3, [r7, #23]
 8003302:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800330c:	2b00      	cmp	r3, #0
 800330e:	d051      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003316:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800331a:	d036      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800331c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003320:	d830      	bhi.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003322:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003326:	d032      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8003328:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800332c:	d82a      	bhi.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800332e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003332:	d02e      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8003334:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003338:	d824      	bhi.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800333a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800333e:	d018      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8003340:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003344:	d81e      	bhi.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800334a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800334e:	d007      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003350:	e018      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003352:	4b34      	ldr	r3, [pc, #208]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003356:	4a33      	ldr	r2, [pc, #204]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800335c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800335e:	e019      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	3304      	adds	r3, #4
 8003364:	2100      	movs	r1, #0
 8003366:	4618      	mov	r0, r3
 8003368:	f001 f89a 	bl	80044a0 <RCCEx_PLL2_Config>
 800336c:	4603      	mov	r3, r0
 800336e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003370:	e010      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	3324      	adds	r3, #36	; 0x24
 8003376:	2100      	movs	r1, #0
 8003378:	4618      	mov	r0, r3
 800337a:	f001 f943 	bl	8004604 <RCCEx_PLL3_Config>
 800337e:	4603      	mov	r3, r0
 8003380:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003382:	e007      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	75fb      	strb	r3, [r7, #23]
      break;
 8003388:	e004      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800338a:	bf00      	nop
 800338c:	e002      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800338e:	bf00      	nop
 8003390:	e000      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003392:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003394:	7dfb      	ldrb	r3, [r7, #23]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10a      	bne.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800339a:	4b22      	ldr	r3, [pc, #136]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800339c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800339e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80033a8:	491e      	ldr	r1, [pc, #120]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	658b      	str	r3, [r1, #88]	; 0x58
 80033ae:	e001      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033b0:	7dfb      	ldrb	r3, [r7, #23]
 80033b2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d035      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033c4:	2b30      	cmp	r3, #48	; 0x30
 80033c6:	d01c      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80033c8:	2b30      	cmp	r3, #48	; 0x30
 80033ca:	d817      	bhi.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80033cc:	2b20      	cmp	r3, #32
 80033ce:	d00c      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80033d0:	2b20      	cmp	r3, #32
 80033d2:	d813      	bhi.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d016      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 80033d8:	2b10      	cmp	r3, #16
 80033da:	d10f      	bne.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033dc:	4b11      	ldr	r3, [pc, #68]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e0:	4a10      	ldr	r2, [pc, #64]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80033e8:	e00e      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	3304      	adds	r3, #4
 80033ee:	2102      	movs	r1, #2
 80033f0:	4618      	mov	r0, r3
 80033f2:	f001 f855 	bl	80044a0 <RCCEx_PLL2_Config>
 80033f6:	4603      	mov	r3, r0
 80033f8:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80033fa:	e005      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	75fb      	strb	r3, [r7, #23]
      break;
 8003400:	e002      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8003402:	bf00      	nop
 8003404:	e000      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8003406:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003408:	7dfb      	ldrb	r3, [r7, #23]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d10c      	bne.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800340e:	4b05      	ldr	r3, [pc, #20]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003412:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800341a:	4902      	ldr	r1, [pc, #8]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800341c:	4313      	orrs	r3, r2
 800341e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003420:	e004      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003422:	bf00      	nop
 8003424:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003428:	7dfb      	ldrb	r3, [r7, #23]
 800342a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d047      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800343c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003440:	d030      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8003442:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003446:	d82a      	bhi.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003448:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800344c:	d02c      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800344e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003452:	d824      	bhi.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003454:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003458:	d018      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800345a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800345e:	d81e      	bhi.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003460:	2b00      	cmp	r3, #0
 8003462:	d003      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003464:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003468:	d007      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800346a:	e018      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800346c:	4bac      	ldr	r3, [pc, #688]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800346e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003470:	4aab      	ldr	r2, [pc, #684]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003472:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003476:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003478:	e017      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	3304      	adds	r3, #4
 800347e:	2100      	movs	r1, #0
 8003480:	4618      	mov	r0, r3
 8003482:	f001 f80d 	bl	80044a0 <RCCEx_PLL2_Config>
 8003486:	4603      	mov	r3, r0
 8003488:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800348a:	e00e      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3324      	adds	r3, #36	; 0x24
 8003490:	2100      	movs	r1, #0
 8003492:	4618      	mov	r0, r3
 8003494:	f001 f8b6 	bl	8004604 <RCCEx_PLL3_Config>
 8003498:	4603      	mov	r3, r0
 800349a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800349c:	e005      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	75fb      	strb	r3, [r7, #23]
      break;
 80034a2:	e002      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80034a4:	bf00      	nop
 80034a6:	e000      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80034a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034aa:	7dfb      	ldrb	r3, [r7, #23]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d109      	bne.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80034b0:	4b9b      	ldr	r3, [pc, #620]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80034b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034b4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034bc:	4998      	ldr	r1, [pc, #608]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	650b      	str	r3, [r1, #80]	; 0x50
 80034c2:	e001      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034c4:	7dfb      	ldrb	r3, [r7, #23]
 80034c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d049      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034dc:	d02e      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80034de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034e2:	d828      	bhi.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80034e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80034e8:	d02a      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80034ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80034ee:	d822      	bhi.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80034f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80034f4:	d026      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80034f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80034fa:	d81c      	bhi.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80034fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003500:	d010      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8003502:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003506:	d816      	bhi.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003508:	2b00      	cmp	r3, #0
 800350a:	d01d      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800350c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003510:	d111      	bne.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	3304      	adds	r3, #4
 8003516:	2101      	movs	r1, #1
 8003518:	4618      	mov	r0, r3
 800351a:	f000 ffc1 	bl	80044a0 <RCCEx_PLL2_Config>
 800351e:	4603      	mov	r3, r0
 8003520:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003522:	e012      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	3324      	adds	r3, #36	; 0x24
 8003528:	2101      	movs	r1, #1
 800352a:	4618      	mov	r0, r3
 800352c:	f001 f86a 	bl	8004604 <RCCEx_PLL3_Config>
 8003530:	4603      	mov	r3, r0
 8003532:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003534:	e009      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	75fb      	strb	r3, [r7, #23]
      break;
 800353a:	e006      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800353c:	bf00      	nop
 800353e:	e004      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003540:	bf00      	nop
 8003542:	e002      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003544:	bf00      	nop
 8003546:	e000      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003548:	bf00      	nop
    }

    if(ret == HAL_OK)
 800354a:	7dfb      	ldrb	r3, [r7, #23]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d109      	bne.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003550:	4b73      	ldr	r3, [pc, #460]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003554:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800355c:	4970      	ldr	r1, [pc, #448]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800355e:	4313      	orrs	r3, r2
 8003560:	650b      	str	r3, [r1, #80]	; 0x50
 8003562:	e001      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003564:	7dfb      	ldrb	r3, [r7, #23]
 8003566:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d04b      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800357a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800357e:	d02e      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003580:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003584:	d828      	bhi.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800358a:	d02a      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800358c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003590:	d822      	bhi.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003592:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003596:	d026      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8003598:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800359c:	d81c      	bhi.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800359e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035a2:	d010      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x496>
 80035a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035a8:	d816      	bhi.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d01d      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80035ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035b2:	d111      	bne.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	3304      	adds	r3, #4
 80035b8:	2101      	movs	r1, #1
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 ff70 	bl	80044a0 <RCCEx_PLL2_Config>
 80035c0:	4603      	mov	r3, r0
 80035c2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80035c4:	e012      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	3324      	adds	r3, #36	; 0x24
 80035ca:	2101      	movs	r1, #1
 80035cc:	4618      	mov	r0, r3
 80035ce:	f001 f819 	bl	8004604 <RCCEx_PLL3_Config>
 80035d2:	4603      	mov	r3, r0
 80035d4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80035d6:	e009      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	75fb      	strb	r3, [r7, #23]
      break;
 80035dc:	e006      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80035de:	bf00      	nop
 80035e0:	e004      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80035e2:	bf00      	nop
 80035e4:	e002      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80035e6:	bf00      	nop
 80035e8:	e000      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80035ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035ec:	7dfb      	ldrb	r3, [r7, #23]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10a      	bne.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80035f2:	4b4b      	ldr	r3, [pc, #300]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80035f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003600:	4947      	ldr	r1, [pc, #284]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003602:	4313      	orrs	r3, r2
 8003604:	658b      	str	r3, [r1, #88]	; 0x58
 8003606:	e001      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003608:	7dfb      	ldrb	r3, [r7, #23]
 800360a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d02f      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800361c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003620:	d00e      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8003622:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003626:	d814      	bhi.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003628:	2b00      	cmp	r3, #0
 800362a:	d015      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800362c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003630:	d10f      	bne.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003632:	4b3b      	ldr	r3, [pc, #236]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003636:	4a3a      	ldr	r2, [pc, #232]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800363c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800363e:	e00c      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	3304      	adds	r3, #4
 8003644:	2101      	movs	r1, #1
 8003646:	4618      	mov	r0, r3
 8003648:	f000 ff2a 	bl	80044a0 <RCCEx_PLL2_Config>
 800364c:	4603      	mov	r3, r0
 800364e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003650:	e003      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	75fb      	strb	r3, [r7, #23]
      break;
 8003656:	e000      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8003658:	bf00      	nop
    }

    if(ret == HAL_OK)
 800365a:	7dfb      	ldrb	r3, [r7, #23]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d109      	bne.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003660:	4b2f      	ldr	r3, [pc, #188]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003664:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800366c:	492c      	ldr	r1, [pc, #176]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800366e:	4313      	orrs	r3, r2
 8003670:	650b      	str	r3, [r1, #80]	; 0x50
 8003672:	e001      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003674:	7dfb      	ldrb	r3, [r7, #23]
 8003676:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d032      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003688:	2b03      	cmp	r3, #3
 800368a:	d81b      	bhi.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800368c:	a201      	add	r2, pc, #4	; (adr r2, 8003694 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800368e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003692:	bf00      	nop
 8003694:	080036cb 	.word	0x080036cb
 8003698:	080036a5 	.word	0x080036a5
 800369c:	080036b3 	.word	0x080036b3
 80036a0:	080036cb 	.word	0x080036cb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036a4:	4b1e      	ldr	r3, [pc, #120]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80036a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a8:	4a1d      	ldr	r2, [pc, #116]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80036aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80036b0:	e00c      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	3304      	adds	r3, #4
 80036b6:	2102      	movs	r1, #2
 80036b8:	4618      	mov	r0, r3
 80036ba:	f000 fef1 	bl	80044a0 <RCCEx_PLL2_Config>
 80036be:	4603      	mov	r3, r0
 80036c0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80036c2:	e003      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	75fb      	strb	r3, [r7, #23]
      break;
 80036c8:	e000      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80036ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036cc:	7dfb      	ldrb	r3, [r7, #23]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d109      	bne.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80036d2:	4b13      	ldr	r3, [pc, #76]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80036d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036d6:	f023 0203 	bic.w	r2, r3, #3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036de:	4910      	ldr	r1, [pc, #64]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80036e4:	e001      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036e6:	7dfb      	ldrb	r3, [r7, #23]
 80036e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f000 808a 	beq.w	800380c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036f8:	4b0a      	ldr	r3, [pc, #40]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a09      	ldr	r2, [pc, #36]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80036fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003702:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003704:	f7fd fe4a 	bl	800139c <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800370a:	e00d      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800370c:	f7fd fe46 	bl	800139c <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b64      	cmp	r3, #100	; 0x64
 8003718:	d906      	bls.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	75fb      	strb	r3, [r7, #23]
        break;
 800371e:	e009      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003720:	58024400 	.word	0x58024400
 8003724:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003728:	4bb9      	ldr	r3, [pc, #740]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003730:	2b00      	cmp	r3, #0
 8003732:	d0eb      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8003734:	7dfb      	ldrb	r3, [r7, #23]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d166      	bne.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800373a:	4bb6      	ldr	r3, [pc, #728]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800373c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003744:	4053      	eors	r3, r2
 8003746:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800374a:	2b00      	cmp	r3, #0
 800374c:	d013      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800374e:	4bb1      	ldr	r3, [pc, #708]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003752:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003756:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003758:	4bae      	ldr	r3, [pc, #696]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800375a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375c:	4aad      	ldr	r2, [pc, #692]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800375e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003762:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003764:	4bab      	ldr	r3, [pc, #684]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003768:	4aaa      	ldr	r2, [pc, #680]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800376a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800376e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003770:	4aa8      	ldr	r2, [pc, #672]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800377c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003780:	d115      	bne.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003782:	f7fd fe0b 	bl	800139c <HAL_GetTick>
 8003786:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003788:	e00b      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800378a:	f7fd fe07 	bl	800139c <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	f241 3288 	movw	r2, #5000	; 0x1388
 8003798:	4293      	cmp	r3, r2
 800379a:	d902      	bls.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	75fb      	strb	r3, [r7, #23]
            break;
 80037a0:	e005      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037a2:	4b9c      	ldr	r3, [pc, #624]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80037a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d0ed      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 80037ae:	7dfb      	ldrb	r3, [r7, #23]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d126      	bne.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80037ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037c2:	d10d      	bne.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 80037c4:	4b93      	ldr	r3, [pc, #588]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80037d2:	0919      	lsrs	r1, r3, #4
 80037d4:	4b90      	ldr	r3, [pc, #576]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80037d6:	400b      	ands	r3, r1
 80037d8:	498e      	ldr	r1, [pc, #568]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	610b      	str	r3, [r1, #16]
 80037de:	e005      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 80037e0:	4b8c      	ldr	r3, [pc, #560]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	4a8b      	ldr	r2, [pc, #556]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80037e6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80037ea:	6113      	str	r3, [r2, #16]
 80037ec:	4b89      	ldr	r3, [pc, #548]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80037ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80037f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037fa:	4986      	ldr	r1, [pc, #536]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	670b      	str	r3, [r1, #112]	; 0x70
 8003800:	e004      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003802:	7dfb      	ldrb	r3, [r7, #23]
 8003804:	75bb      	strb	r3, [r7, #22]
 8003806:	e001      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003808:	7dfb      	ldrb	r3, [r7, #23]
 800380a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	2b00      	cmp	r3, #0
 8003816:	d07e      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800381c:	2b28      	cmp	r3, #40	; 0x28
 800381e:	d867      	bhi.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8003820:	a201      	add	r2, pc, #4	; (adr r2, 8003828 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8003822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003826:	bf00      	nop
 8003828:	080038f7 	.word	0x080038f7
 800382c:	080038f1 	.word	0x080038f1
 8003830:	080038f1 	.word	0x080038f1
 8003834:	080038f1 	.word	0x080038f1
 8003838:	080038f1 	.word	0x080038f1
 800383c:	080038f1 	.word	0x080038f1
 8003840:	080038f1 	.word	0x080038f1
 8003844:	080038f1 	.word	0x080038f1
 8003848:	080038cd 	.word	0x080038cd
 800384c:	080038f1 	.word	0x080038f1
 8003850:	080038f1 	.word	0x080038f1
 8003854:	080038f1 	.word	0x080038f1
 8003858:	080038f1 	.word	0x080038f1
 800385c:	080038f1 	.word	0x080038f1
 8003860:	080038f1 	.word	0x080038f1
 8003864:	080038f1 	.word	0x080038f1
 8003868:	080038df 	.word	0x080038df
 800386c:	080038f1 	.word	0x080038f1
 8003870:	080038f1 	.word	0x080038f1
 8003874:	080038f1 	.word	0x080038f1
 8003878:	080038f1 	.word	0x080038f1
 800387c:	080038f1 	.word	0x080038f1
 8003880:	080038f1 	.word	0x080038f1
 8003884:	080038f1 	.word	0x080038f1
 8003888:	080038f7 	.word	0x080038f7
 800388c:	080038f1 	.word	0x080038f1
 8003890:	080038f1 	.word	0x080038f1
 8003894:	080038f1 	.word	0x080038f1
 8003898:	080038f1 	.word	0x080038f1
 800389c:	080038f1 	.word	0x080038f1
 80038a0:	080038f1 	.word	0x080038f1
 80038a4:	080038f1 	.word	0x080038f1
 80038a8:	080038f7 	.word	0x080038f7
 80038ac:	080038f1 	.word	0x080038f1
 80038b0:	080038f1 	.word	0x080038f1
 80038b4:	080038f1 	.word	0x080038f1
 80038b8:	080038f1 	.word	0x080038f1
 80038bc:	080038f1 	.word	0x080038f1
 80038c0:	080038f1 	.word	0x080038f1
 80038c4:	080038f1 	.word	0x080038f1
 80038c8:	080038f7 	.word	0x080038f7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	3304      	adds	r3, #4
 80038d0:	2101      	movs	r1, #1
 80038d2:	4618      	mov	r0, r3
 80038d4:	f000 fde4 	bl	80044a0 <RCCEx_PLL2_Config>
 80038d8:	4603      	mov	r3, r0
 80038da:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80038dc:	e00c      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	3324      	adds	r3, #36	; 0x24
 80038e2:	2101      	movs	r1, #1
 80038e4:	4618      	mov	r0, r3
 80038e6:	f000 fe8d 	bl	8004604 <RCCEx_PLL3_Config>
 80038ea:	4603      	mov	r3, r0
 80038ec:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80038ee:	e003      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	75fb      	strb	r3, [r7, #23]
      break;
 80038f4:	e000      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 80038f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038f8:	7dfb      	ldrb	r3, [r7, #23]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d109      	bne.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80038fe:	4b45      	ldr	r3, [pc, #276]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003902:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800390a:	4942      	ldr	r1, [pc, #264]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800390c:	4313      	orrs	r3, r2
 800390e:	654b      	str	r3, [r1, #84]	; 0x54
 8003910:	e001      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003912:	7dfb      	ldrb	r3, [r7, #23]
 8003914:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d037      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003926:	2b05      	cmp	r3, #5
 8003928:	d820      	bhi.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800392a:	a201      	add	r2, pc, #4	; (adr r2, 8003930 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 800392c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003930:	08003973 	.word	0x08003973
 8003934:	08003949 	.word	0x08003949
 8003938:	0800395b 	.word	0x0800395b
 800393c:	08003973 	.word	0x08003973
 8003940:	08003973 	.word	0x08003973
 8003944:	08003973 	.word	0x08003973
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	3304      	adds	r3, #4
 800394c:	2101      	movs	r1, #1
 800394e:	4618      	mov	r0, r3
 8003950:	f000 fda6 	bl	80044a0 <RCCEx_PLL2_Config>
 8003954:	4603      	mov	r3, r0
 8003956:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003958:	e00c      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	3324      	adds	r3, #36	; 0x24
 800395e:	2101      	movs	r1, #1
 8003960:	4618      	mov	r0, r3
 8003962:	f000 fe4f 	bl	8004604 <RCCEx_PLL3_Config>
 8003966:	4603      	mov	r3, r0
 8003968:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800396a:	e003      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	75fb      	strb	r3, [r7, #23]
      break;
 8003970:	e000      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8003972:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003974:	7dfb      	ldrb	r3, [r7, #23]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d109      	bne.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800397a:	4b26      	ldr	r3, [pc, #152]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800397c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800397e:	f023 0207 	bic.w	r2, r3, #7
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003986:	4923      	ldr	r1, [pc, #140]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003988:	4313      	orrs	r3, r2
 800398a:	654b      	str	r3, [r1, #84]	; 0x54
 800398c:	e001      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800398e:	7dfb      	ldrb	r3, [r7, #23]
 8003990:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0304 	and.w	r3, r3, #4
 800399a:	2b00      	cmp	r3, #0
 800399c:	d040      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039a4:	2b05      	cmp	r3, #5
 80039a6:	d821      	bhi.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80039a8:	a201      	add	r2, pc, #4	; (adr r2, 80039b0 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80039aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ae:	bf00      	nop
 80039b0:	080039f3 	.word	0x080039f3
 80039b4:	080039c9 	.word	0x080039c9
 80039b8:	080039db 	.word	0x080039db
 80039bc:	080039f3 	.word	0x080039f3
 80039c0:	080039f3 	.word	0x080039f3
 80039c4:	080039f3 	.word	0x080039f3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	3304      	adds	r3, #4
 80039cc:	2101      	movs	r1, #1
 80039ce:	4618      	mov	r0, r3
 80039d0:	f000 fd66 	bl	80044a0 <RCCEx_PLL2_Config>
 80039d4:	4603      	mov	r3, r0
 80039d6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80039d8:	e00c      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	3324      	adds	r3, #36	; 0x24
 80039de:	2101      	movs	r1, #1
 80039e0:	4618      	mov	r0, r3
 80039e2:	f000 fe0f 	bl	8004604 <RCCEx_PLL3_Config>
 80039e6:	4603      	mov	r3, r0
 80039e8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80039ea:	e003      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	75fb      	strb	r3, [r7, #23]
      break;
 80039f0:	e000      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 80039f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039f4:	7dfb      	ldrb	r3, [r7, #23]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d110      	bne.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039fa:	4b06      	ldr	r3, [pc, #24]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80039fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fe:	f023 0207 	bic.w	r2, r3, #7
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a08:	4902      	ldr	r1, [pc, #8]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	658b      	str	r3, [r1, #88]	; 0x58
 8003a0e:	e007      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8003a10:	58024800 	.word	0x58024800
 8003a14:	58024400 	.word	0x58024400
 8003a18:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a1c:	7dfb      	ldrb	r3, [r7, #23]
 8003a1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0320 	and.w	r3, r3, #32
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d04b      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a36:	d02e      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8003a38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a3c:	d828      	bhi.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a42:	d02a      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8003a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a48:	d822      	bhi.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003a4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a4e:	d026      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003a50:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a54:	d81c      	bhi.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003a56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a5a:	d010      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8003a5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a60:	d816      	bhi.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d01d      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8003a66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a6a:	d111      	bne.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3304      	adds	r3, #4
 8003a70:	2100      	movs	r1, #0
 8003a72:	4618      	mov	r0, r3
 8003a74:	f000 fd14 	bl	80044a0 <RCCEx_PLL2_Config>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003a7c:	e012      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	3324      	adds	r3, #36	; 0x24
 8003a82:	2102      	movs	r1, #2
 8003a84:	4618      	mov	r0, r3
 8003a86:	f000 fdbd 	bl	8004604 <RCCEx_PLL3_Config>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003a8e:	e009      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	75fb      	strb	r3, [r7, #23]
      break;
 8003a94:	e006      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003a96:	bf00      	nop
 8003a98:	e004      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003a9a:	bf00      	nop
 8003a9c:	e002      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003a9e:	bf00      	nop
 8003aa0:	e000      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003aa2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003aa4:	7dfb      	ldrb	r3, [r7, #23]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10a      	bne.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003aaa:	4bb2      	ldr	r3, [pc, #712]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aae:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab8:	49ae      	ldr	r1, [pc, #696]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	654b      	str	r3, [r1, #84]	; 0x54
 8003abe:	e001      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac0:	7dfb      	ldrb	r3, [r7, #23]
 8003ac2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d04b      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ad6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003ada:	d02e      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8003adc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003ae0:	d828      	bhi.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003ae2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ae6:	d02a      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8003ae8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aec:	d822      	bhi.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003aee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003af2:	d026      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003af4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003af8:	d81c      	bhi.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003afa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003afe:	d010      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8003b00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b04:	d816      	bhi.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d01d      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8003b0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b0e:	d111      	bne.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	3304      	adds	r3, #4
 8003b14:	2100      	movs	r1, #0
 8003b16:	4618      	mov	r0, r3
 8003b18:	f000 fcc2 	bl	80044a0 <RCCEx_PLL2_Config>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003b20:	e012      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	3324      	adds	r3, #36	; 0x24
 8003b26:	2102      	movs	r1, #2
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f000 fd6b 	bl	8004604 <RCCEx_PLL3_Config>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003b32:	e009      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	75fb      	strb	r3, [r7, #23]
      break;
 8003b38:	e006      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003b3a:	bf00      	nop
 8003b3c:	e004      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003b3e:	bf00      	nop
 8003b40:	e002      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003b42:	bf00      	nop
 8003b44:	e000      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003b46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b48:	7dfb      	ldrb	r3, [r7, #23]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10a      	bne.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b4e:	4b89      	ldr	r3, [pc, #548]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b52:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b5c:	4985      	ldr	r1, [pc, #532]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	658b      	str	r3, [r1, #88]	; 0x58
 8003b62:	e001      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b64:	7dfb      	ldrb	r3, [r7, #23]
 8003b66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d04b      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b7a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003b7e:	d02e      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8003b80:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003b84:	d828      	bhi.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003b86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b8a:	d02a      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8003b8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b90:	d822      	bhi.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003b92:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003b96:	d026      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8003b98:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003b9c:	d81c      	bhi.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003b9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ba2:	d010      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8003ba4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ba8:	d816      	bhi.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d01d      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8003bae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bb2:	d111      	bne.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	3304      	adds	r3, #4
 8003bb8:	2100      	movs	r1, #0
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f000 fc70 	bl	80044a0 <RCCEx_PLL2_Config>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003bc4:	e012      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	3324      	adds	r3, #36	; 0x24
 8003bca:	2102      	movs	r1, #2
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f000 fd19 	bl	8004604 <RCCEx_PLL3_Config>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003bd6:	e009      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	75fb      	strb	r3, [r7, #23]
      break;
 8003bdc:	e006      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003bde:	bf00      	nop
 8003be0:	e004      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003be2:	bf00      	nop
 8003be4:	e002      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003be6:	bf00      	nop
 8003be8:	e000      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003bea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bec:	7dfb      	ldrb	r3, [r7, #23]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10a      	bne.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003bf2:	4b60      	ldr	r3, [pc, #384]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c00:	495c      	ldr	r1, [pc, #368]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	658b      	str	r3, [r1, #88]	; 0x58
 8003c06:	e001      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c08:	7dfb      	ldrb	r3, [r7, #23]
 8003c0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0308 	and.w	r3, r3, #8
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d018      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c20:	d10a      	bne.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	3324      	adds	r3, #36	; 0x24
 8003c26:	2102      	movs	r1, #2
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f000 fceb 	bl	8004604 <RCCEx_PLL3_Config>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d001      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003c38:	4b4e      	ldr	r3, [pc, #312]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c3c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c44:	494b      	ldr	r1, [pc, #300]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0310 	and.w	r3, r3, #16
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d01a      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c60:	d10a      	bne.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	3324      	adds	r3, #36	; 0x24
 8003c66:	2102      	movs	r1, #2
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f000 fccb 	bl	8004604 <RCCEx_PLL3_Config>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d001      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c78:	4b3e      	ldr	r3, [pc, #248]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c86:	493b      	ldr	r1, [pc, #236]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d034      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ca2:	d01d      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8003ca4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ca8:	d817      	bhi.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d003      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8003cae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cb2:	d009      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003cb4:	e011      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	3304      	adds	r3, #4
 8003cba:	2100      	movs	r1, #0
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f000 fbef 	bl	80044a0 <RCCEx_PLL2_Config>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003cc6:	e00c      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	3324      	adds	r3, #36	; 0x24
 8003ccc:	2102      	movs	r1, #2
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f000 fc98 	bl	8004604 <RCCEx_PLL3_Config>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003cd8:	e003      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	75fb      	strb	r3, [r7, #23]
      break;
 8003cde:	e000      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8003ce0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ce2:	7dfb      	ldrb	r3, [r7, #23]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d10a      	bne.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ce8:	4b22      	ldr	r3, [pc, #136]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003cf6:	491f      	ldr	r1, [pc, #124]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	658b      	str	r3, [r1, #88]	; 0x58
 8003cfc:	e001      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cfe:	7dfb      	ldrb	r3, [r7, #23]
 8003d00:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d036      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d14:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d18:	d01c      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003d1a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d1e:	d816      	bhi.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003d20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d24:	d003      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003d26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d2a:	d007      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8003d2c:	e00f      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d2e:	4b11      	ldr	r3, [pc, #68]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d32:	4a10      	ldr	r2, [pc, #64]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d38:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003d3a:	e00c      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	3324      	adds	r3, #36	; 0x24
 8003d40:	2101      	movs	r1, #1
 8003d42:	4618      	mov	r0, r3
 8003d44:	f000 fc5e 	bl	8004604 <RCCEx_PLL3_Config>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003d4c:	e003      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	75fb      	strb	r3, [r7, #23]
      break;
 8003d52:	e000      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8003d54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d56:	7dfb      	ldrb	r3, [r7, #23]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d10d      	bne.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d5c:	4b05      	ldr	r3, [pc, #20]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d6a:	4902      	ldr	r1, [pc, #8]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	654b      	str	r3, [r1, #84]	; 0x54
 8003d70:	e004      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8003d72:	bf00      	nop
 8003d74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d78:	7dfb      	ldrb	r3, [r7, #23]
 8003d7a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d029      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d003      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d94:	d007      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8003d96:	e00f      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d98:	4b61      	ldr	r3, [pc, #388]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9c:	4a60      	ldr	r2, [pc, #384]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003d9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003da2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003da4:	e00b      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	3304      	adds	r3, #4
 8003daa:	2102      	movs	r1, #2
 8003dac:	4618      	mov	r0, r3
 8003dae:	f000 fb77 	bl	80044a0 <RCCEx_PLL2_Config>
 8003db2:	4603      	mov	r3, r0
 8003db4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003db6:	e002      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	75fb      	strb	r3, [r7, #23]
      break;
 8003dbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dbe:	7dfb      	ldrb	r3, [r7, #23]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d109      	bne.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003dc4:	4b56      	ldr	r3, [pc, #344]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dc8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dd0:	4953      	ldr	r1, [pc, #332]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003dd6:	e001      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd8:	7dfb      	ldrb	r3, [r7, #23]
 8003dda:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d00a      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	3324      	adds	r3, #36	; 0x24
 8003dec:	2102      	movs	r1, #2
 8003dee:	4618      	mov	r0, r3
 8003df0:	f000 fc08 	bl	8004604 <RCCEx_PLL3_Config>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d030      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e12:	d017      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003e14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e18:	d811      	bhi.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8003e1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e1e:	d013      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8003e20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e24:	d80b      	bhi.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d010      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8003e2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e2e:	d106      	bne.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e30:	4b3b      	ldr	r3, [pc, #236]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e34:	4a3a      	ldr	r2, [pc, #232]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003e36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e3a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003e3c:	e007      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	75fb      	strb	r3, [r7, #23]
      break;
 8003e42:	e004      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8003e44:	bf00      	nop
 8003e46:	e002      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8003e48:	bf00      	nop
 8003e4a:	e000      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8003e4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e4e:	7dfb      	ldrb	r3, [r7, #23]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d109      	bne.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e54:	4b32      	ldr	r3, [pc, #200]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e60:	492f      	ldr	r1, [pc, #188]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	654b      	str	r3, [r1, #84]	; 0x54
 8003e66:	e001      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e68:	7dfb      	ldrb	r3, [r7, #23]
 8003e6a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d008      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e78:	4b29      	ldr	r3, [pc, #164]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e7c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e84:	4926      	ldr	r1, [pc, #152]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d008      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e96:	4b22      	ldr	r3, [pc, #136]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e9a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ea2:	491f      	ldr	r1, [pc, #124]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00d      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003eb4:	4b1a      	ldr	r3, [pc, #104]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	4a19      	ldr	r2, [pc, #100]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003eba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003ebe:	6113      	str	r3, [r2, #16]
 8003ec0:	4b17      	ldr	r3, [pc, #92]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003ec2:	691a      	ldr	r2, [r3, #16]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003eca:	4915      	ldr	r1, [pc, #84]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	da08      	bge.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003ed8:	4b11      	ldr	r3, [pc, #68]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003edc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee4:	490e      	ldr	r1, [pc, #56]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d009      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ef6:	4b0a      	ldr	r3, [pc, #40]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003efa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f04:	4906      	ldr	r1, [pc, #24]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003f0a:	7dbb      	ldrb	r3, [r7, #22]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d101      	bne.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8003f10:	2300      	movs	r3, #0
 8003f12:	e000      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3718      	adds	r7, #24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	58024400 	.word	0x58024400

08003f24 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003f28:	f7ff f864 	bl	8002ff4 <HAL_RCC_GetHCLKFreq>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	4b06      	ldr	r3, [pc, #24]	; (8003f48 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	091b      	lsrs	r3, r3, #4
 8003f34:	f003 0307 	and.w	r3, r3, #7
 8003f38:	4904      	ldr	r1, [pc, #16]	; (8003f4c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003f3a:	5ccb      	ldrb	r3, [r1, r3]
 8003f3c:	f003 031f 	and.w	r3, r3, #31
 8003f40:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	58024400 	.word	0x58024400
 8003f4c:	08008570 	.word	0x08008570

08003f50 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b089      	sub	sp, #36	; 0x24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003f58:	4ba1      	ldr	r3, [pc, #644]	; (80041e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5c:	f003 0303 	and.w	r3, r3, #3
 8003f60:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003f62:	4b9f      	ldr	r3, [pc, #636]	; (80041e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f66:	0b1b      	lsrs	r3, r3, #12
 8003f68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f6c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003f6e:	4b9c      	ldr	r3, [pc, #624]	; (80041e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f72:	091b      	lsrs	r3, r3, #4
 8003f74:	f003 0301 	and.w	r3, r3, #1
 8003f78:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003f7a:	4b99      	ldr	r3, [pc, #612]	; (80041e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f7e:	08db      	lsrs	r3, r3, #3
 8003f80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	fb02 f303 	mul.w	r3, r2, r3
 8003f8a:	ee07 3a90 	vmov	s15, r3
 8003f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f92:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f000 8111 	beq.w	80041c0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	f000 8083 	beq.w	80040ac <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	f200 80a1 	bhi.w	80040f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d003      	beq.n	8003fbc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d056      	beq.n	8004068 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003fba:	e099      	b.n	80040f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003fbc:	4b88      	ldr	r3, [pc, #544]	; (80041e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0320 	and.w	r3, r3, #32
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d02d      	beq.n	8004024 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003fc8:	4b85      	ldr	r3, [pc, #532]	; (80041e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	08db      	lsrs	r3, r3, #3
 8003fce:	f003 0303 	and.w	r3, r3, #3
 8003fd2:	4a84      	ldr	r2, [pc, #528]	; (80041e4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8003fd8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	ee07 3a90 	vmov	s15, r3
 8003fe0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	ee07 3a90 	vmov	s15, r3
 8003fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ff2:	4b7b      	ldr	r3, [pc, #492]	; (80041e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ffa:	ee07 3a90 	vmov	s15, r3
 8003ffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004002:	ed97 6a03 	vldr	s12, [r7, #12]
 8004006:	eddf 5a78 	vldr	s11, [pc, #480]	; 80041e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800400a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800400e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004012:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800401a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800401e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004022:	e087      	b.n	8004134 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	ee07 3a90 	vmov	s15, r3
 800402a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800402e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80041ec <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004036:	4b6a      	ldr	r3, [pc, #424]	; (80041e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800403e:	ee07 3a90 	vmov	s15, r3
 8004042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004046:	ed97 6a03 	vldr	s12, [r7, #12]
 800404a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80041e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800404e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004056:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800405a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800405e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004062:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004066:	e065      	b.n	8004134 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	ee07 3a90 	vmov	s15, r3
 800406e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004072:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80041f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800407a:	4b59      	ldr	r3, [pc, #356]	; (80041e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800407c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004082:	ee07 3a90 	vmov	s15, r3
 8004086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800408a:	ed97 6a03 	vldr	s12, [r7, #12]
 800408e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80041e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004092:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004096:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800409a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800409e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80040aa:	e043      	b.n	8004134 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	ee07 3a90 	vmov	s15, r3
 80040b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040b6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80041f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80040ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040be:	4b48      	ldr	r3, [pc, #288]	; (80041e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040c6:	ee07 3a90 	vmov	s15, r3
 80040ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80040d2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80041e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80040d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80040ee:	e021      	b.n	8004134 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	ee07 3a90 	vmov	s15, r3
 80040f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040fa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80041f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80040fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004102:	4b37      	ldr	r3, [pc, #220]	; (80041e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800410a:	ee07 3a90 	vmov	s15, r3
 800410e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004112:	ed97 6a03 	vldr	s12, [r7, #12]
 8004116:	eddf 5a34 	vldr	s11, [pc, #208]	; 80041e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800411a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800411e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004122:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800412a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800412e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004132:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004134:	4b2a      	ldr	r3, [pc, #168]	; (80041e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004138:	0a5b      	lsrs	r3, r3, #9
 800413a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800413e:	ee07 3a90 	vmov	s15, r3
 8004142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004146:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800414a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800414e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004152:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004156:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800415a:	ee17 2a90 	vmov	r2, s15
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004162:	4b1f      	ldr	r3, [pc, #124]	; (80041e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004166:	0c1b      	lsrs	r3, r3, #16
 8004168:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800416c:	ee07 3a90 	vmov	s15, r3
 8004170:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004174:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004178:	ee37 7a87 	vadd.f32	s14, s15, s14
 800417c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004180:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004184:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004188:	ee17 2a90 	vmov	r2, s15
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004190:	4b13      	ldr	r3, [pc, #76]	; (80041e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004194:	0e1b      	lsrs	r3, r3, #24
 8004196:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800419a:	ee07 3a90 	vmov	s15, r3
 800419e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80041a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80041aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80041ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041b6:	ee17 2a90 	vmov	r2, s15
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80041be:	e008      	b.n	80041d2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	609a      	str	r2, [r3, #8]
}
 80041d2:	bf00      	nop
 80041d4:	3724      	adds	r7, #36	; 0x24
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	58024400 	.word	0x58024400
 80041e4:	03d09000 	.word	0x03d09000
 80041e8:	46000000 	.word	0x46000000
 80041ec:	4c742400 	.word	0x4c742400
 80041f0:	4a742400 	.word	0x4a742400
 80041f4:	4af42400 	.word	0x4af42400

080041f8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b089      	sub	sp, #36	; 0x24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004200:	4ba1      	ldr	r3, [pc, #644]	; (8004488 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004204:	f003 0303 	and.w	r3, r3, #3
 8004208:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800420a:	4b9f      	ldr	r3, [pc, #636]	; (8004488 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800420c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420e:	0d1b      	lsrs	r3, r3, #20
 8004210:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004214:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004216:	4b9c      	ldr	r3, [pc, #624]	; (8004488 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421a:	0a1b      	lsrs	r3, r3, #8
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004222:	4b99      	ldr	r3, [pc, #612]	; (8004488 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004226:	08db      	lsrs	r3, r3, #3
 8004228:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	fb02 f303 	mul.w	r3, r2, r3
 8004232:	ee07 3a90 	vmov	s15, r3
 8004236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800423a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 8111 	beq.w	8004468 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	2b02      	cmp	r3, #2
 800424a:	f000 8083 	beq.w	8004354 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	2b02      	cmp	r3, #2
 8004252:	f200 80a1 	bhi.w	8004398 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d003      	beq.n	8004264 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d056      	beq.n	8004310 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004262:	e099      	b.n	8004398 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004264:	4b88      	ldr	r3, [pc, #544]	; (8004488 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0320 	and.w	r3, r3, #32
 800426c:	2b00      	cmp	r3, #0
 800426e:	d02d      	beq.n	80042cc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004270:	4b85      	ldr	r3, [pc, #532]	; (8004488 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	08db      	lsrs	r3, r3, #3
 8004276:	f003 0303 	and.w	r3, r3, #3
 800427a:	4a84      	ldr	r2, [pc, #528]	; (800448c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800427c:	fa22 f303 	lsr.w	r3, r2, r3
 8004280:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	ee07 3a90 	vmov	s15, r3
 8004288:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	ee07 3a90 	vmov	s15, r3
 8004292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004296:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800429a:	4b7b      	ldr	r3, [pc, #492]	; (8004488 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800429c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042a2:	ee07 3a90 	vmov	s15, r3
 80042a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80042ae:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004490 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80042b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042c6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80042ca:	e087      	b.n	80043dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	ee07 3a90 	vmov	s15, r3
 80042d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042d6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004494 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80042da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042de:	4b6a      	ldr	r3, [pc, #424]	; (8004488 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042e6:	ee07 3a90 	vmov	s15, r3
 80042ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80042f2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004490 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80042f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004302:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800430a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800430e:	e065      	b.n	80043dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	ee07 3a90 	vmov	s15, r3
 8004316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800431a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004498 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800431e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004322:	4b59      	ldr	r3, [pc, #356]	; (8004488 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800432a:	ee07 3a90 	vmov	s15, r3
 800432e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004332:	ed97 6a03 	vldr	s12, [r7, #12]
 8004336:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004490 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800433a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800433e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004342:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800434a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800434e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004352:	e043      	b.n	80043dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	ee07 3a90 	vmov	s15, r3
 800435a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800435e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800449c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004366:	4b48      	ldr	r3, [pc, #288]	; (8004488 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800436e:	ee07 3a90 	vmov	s15, r3
 8004372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004376:	ed97 6a03 	vldr	s12, [r7, #12]
 800437a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004490 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800437e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004386:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800438a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800438e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004392:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004396:	e021      	b.n	80043dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	ee07 3a90 	vmov	s15, r3
 800439e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043a2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004498 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80043a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043aa:	4b37      	ldr	r3, [pc, #220]	; (8004488 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043b2:	ee07 3a90 	vmov	s15, r3
 80043b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80043be:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004490 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80043c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80043da:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80043dc:	4b2a      	ldr	r3, [pc, #168]	; (8004488 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e0:	0a5b      	lsrs	r3, r3, #9
 80043e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043e6:	ee07 3a90 	vmov	s15, r3
 80043ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80043f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80043fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004402:	ee17 2a90 	vmov	r2, s15
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800440a:	4b1f      	ldr	r3, [pc, #124]	; (8004488 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	0c1b      	lsrs	r3, r3, #16
 8004410:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004414:	ee07 3a90 	vmov	s15, r3
 8004418:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800441c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004420:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004424:	edd7 6a07 	vldr	s13, [r7, #28]
 8004428:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800442c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004430:	ee17 2a90 	vmov	r2, s15
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004438:	4b13      	ldr	r3, [pc, #76]	; (8004488 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800443a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443c:	0e1b      	lsrs	r3, r3, #24
 800443e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004442:	ee07 3a90 	vmov	s15, r3
 8004446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800444a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800444e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004452:	edd7 6a07 	vldr	s13, [r7, #28]
 8004456:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800445a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800445e:	ee17 2a90 	vmov	r2, s15
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004466:	e008      	b.n	800447a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	609a      	str	r2, [r3, #8]
}
 800447a:	bf00      	nop
 800447c:	3724      	adds	r7, #36	; 0x24
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	58024400 	.word	0x58024400
 800448c:	03d09000 	.word	0x03d09000
 8004490:	46000000 	.word	0x46000000
 8004494:	4c742400 	.word	0x4c742400
 8004498:	4a742400 	.word	0x4a742400
 800449c:	4af42400 	.word	0x4af42400

080044a0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044aa:	2300      	movs	r3, #0
 80044ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80044ae:	4b53      	ldr	r3, [pc, #332]	; (80045fc <RCCEx_PLL2_Config+0x15c>)
 80044b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b2:	f003 0303 	and.w	r3, r3, #3
 80044b6:	2b03      	cmp	r3, #3
 80044b8:	d101      	bne.n	80044be <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e099      	b.n	80045f2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80044be:	4b4f      	ldr	r3, [pc, #316]	; (80045fc <RCCEx_PLL2_Config+0x15c>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a4e      	ldr	r2, [pc, #312]	; (80045fc <RCCEx_PLL2_Config+0x15c>)
 80044c4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044ca:	f7fc ff67 	bl	800139c <HAL_GetTick>
 80044ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80044d0:	e008      	b.n	80044e4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80044d2:	f7fc ff63 	bl	800139c <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d901      	bls.n	80044e4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e086      	b.n	80045f2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80044e4:	4b45      	ldr	r3, [pc, #276]	; (80045fc <RCCEx_PLL2_Config+0x15c>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1f0      	bne.n	80044d2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80044f0:	4b42      	ldr	r3, [pc, #264]	; (80045fc <RCCEx_PLL2_Config+0x15c>)
 80044f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	031b      	lsls	r3, r3, #12
 80044fe:	493f      	ldr	r1, [pc, #252]	; (80045fc <RCCEx_PLL2_Config+0x15c>)
 8004500:	4313      	orrs	r3, r2
 8004502:	628b      	str	r3, [r1, #40]	; 0x28
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	3b01      	subs	r3, #1
 800450a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	3b01      	subs	r3, #1
 8004514:	025b      	lsls	r3, r3, #9
 8004516:	b29b      	uxth	r3, r3
 8004518:	431a      	orrs	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	3b01      	subs	r3, #1
 8004520:	041b      	lsls	r3, r3, #16
 8004522:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004526:	431a      	orrs	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	3b01      	subs	r3, #1
 800452e:	061b      	lsls	r3, r3, #24
 8004530:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004534:	4931      	ldr	r1, [pc, #196]	; (80045fc <RCCEx_PLL2_Config+0x15c>)
 8004536:	4313      	orrs	r3, r2
 8004538:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800453a:	4b30      	ldr	r3, [pc, #192]	; (80045fc <RCCEx_PLL2_Config+0x15c>)
 800453c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	492d      	ldr	r1, [pc, #180]	; (80045fc <RCCEx_PLL2_Config+0x15c>)
 8004548:	4313      	orrs	r3, r2
 800454a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800454c:	4b2b      	ldr	r3, [pc, #172]	; (80045fc <RCCEx_PLL2_Config+0x15c>)
 800454e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004550:	f023 0220 	bic.w	r2, r3, #32
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	4928      	ldr	r1, [pc, #160]	; (80045fc <RCCEx_PLL2_Config+0x15c>)
 800455a:	4313      	orrs	r3, r2
 800455c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800455e:	4b27      	ldr	r3, [pc, #156]	; (80045fc <RCCEx_PLL2_Config+0x15c>)
 8004560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004562:	4a26      	ldr	r2, [pc, #152]	; (80045fc <RCCEx_PLL2_Config+0x15c>)
 8004564:	f023 0310 	bic.w	r3, r3, #16
 8004568:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800456a:	4b24      	ldr	r3, [pc, #144]	; (80045fc <RCCEx_PLL2_Config+0x15c>)
 800456c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800456e:	4b24      	ldr	r3, [pc, #144]	; (8004600 <RCCEx_PLL2_Config+0x160>)
 8004570:	4013      	ands	r3, r2
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	69d2      	ldr	r2, [r2, #28]
 8004576:	00d2      	lsls	r2, r2, #3
 8004578:	4920      	ldr	r1, [pc, #128]	; (80045fc <RCCEx_PLL2_Config+0x15c>)
 800457a:	4313      	orrs	r3, r2
 800457c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800457e:	4b1f      	ldr	r3, [pc, #124]	; (80045fc <RCCEx_PLL2_Config+0x15c>)
 8004580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004582:	4a1e      	ldr	r2, [pc, #120]	; (80045fc <RCCEx_PLL2_Config+0x15c>)
 8004584:	f043 0310 	orr.w	r3, r3, #16
 8004588:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d106      	bne.n	800459e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004590:	4b1a      	ldr	r3, [pc, #104]	; (80045fc <RCCEx_PLL2_Config+0x15c>)
 8004592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004594:	4a19      	ldr	r2, [pc, #100]	; (80045fc <RCCEx_PLL2_Config+0x15c>)
 8004596:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800459a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800459c:	e00f      	b.n	80045be <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d106      	bne.n	80045b2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80045a4:	4b15      	ldr	r3, [pc, #84]	; (80045fc <RCCEx_PLL2_Config+0x15c>)
 80045a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a8:	4a14      	ldr	r2, [pc, #80]	; (80045fc <RCCEx_PLL2_Config+0x15c>)
 80045aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80045b0:	e005      	b.n	80045be <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80045b2:	4b12      	ldr	r3, [pc, #72]	; (80045fc <RCCEx_PLL2_Config+0x15c>)
 80045b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b6:	4a11      	ldr	r2, [pc, #68]	; (80045fc <RCCEx_PLL2_Config+0x15c>)
 80045b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80045bc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80045be:	4b0f      	ldr	r3, [pc, #60]	; (80045fc <RCCEx_PLL2_Config+0x15c>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a0e      	ldr	r2, [pc, #56]	; (80045fc <RCCEx_PLL2_Config+0x15c>)
 80045c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045ca:	f7fc fee7 	bl	800139c <HAL_GetTick>
 80045ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80045d0:	e008      	b.n	80045e4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80045d2:	f7fc fee3 	bl	800139c <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d901      	bls.n	80045e4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	e006      	b.n	80045f2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80045e4:	4b05      	ldr	r3, [pc, #20]	; (80045fc <RCCEx_PLL2_Config+0x15c>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d0f0      	beq.n	80045d2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80045f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	58024400 	.word	0x58024400
 8004600:	ffff0007 	.word	0xffff0007

08004604 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800460e:	2300      	movs	r3, #0
 8004610:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004612:	4b53      	ldr	r3, [pc, #332]	; (8004760 <RCCEx_PLL3_Config+0x15c>)
 8004614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004616:	f003 0303 	and.w	r3, r3, #3
 800461a:	2b03      	cmp	r3, #3
 800461c:	d101      	bne.n	8004622 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e099      	b.n	8004756 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004622:	4b4f      	ldr	r3, [pc, #316]	; (8004760 <RCCEx_PLL3_Config+0x15c>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a4e      	ldr	r2, [pc, #312]	; (8004760 <RCCEx_PLL3_Config+0x15c>)
 8004628:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800462c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800462e:	f7fc feb5 	bl	800139c <HAL_GetTick>
 8004632:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004634:	e008      	b.n	8004648 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004636:	f7fc feb1 	bl	800139c <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	2b02      	cmp	r3, #2
 8004642:	d901      	bls.n	8004648 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e086      	b.n	8004756 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004648:	4b45      	ldr	r3, [pc, #276]	; (8004760 <RCCEx_PLL3_Config+0x15c>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1f0      	bne.n	8004636 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004654:	4b42      	ldr	r3, [pc, #264]	; (8004760 <RCCEx_PLL3_Config+0x15c>)
 8004656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004658:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	051b      	lsls	r3, r3, #20
 8004662:	493f      	ldr	r1, [pc, #252]	; (8004760 <RCCEx_PLL3_Config+0x15c>)
 8004664:	4313      	orrs	r3, r2
 8004666:	628b      	str	r3, [r1, #40]	; 0x28
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	3b01      	subs	r3, #1
 800466e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	3b01      	subs	r3, #1
 8004678:	025b      	lsls	r3, r3, #9
 800467a:	b29b      	uxth	r3, r3
 800467c:	431a      	orrs	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	3b01      	subs	r3, #1
 8004684:	041b      	lsls	r3, r3, #16
 8004686:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800468a:	431a      	orrs	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	3b01      	subs	r3, #1
 8004692:	061b      	lsls	r3, r3, #24
 8004694:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004698:	4931      	ldr	r1, [pc, #196]	; (8004760 <RCCEx_PLL3_Config+0x15c>)
 800469a:	4313      	orrs	r3, r2
 800469c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800469e:	4b30      	ldr	r3, [pc, #192]	; (8004760 <RCCEx_PLL3_Config+0x15c>)
 80046a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	492d      	ldr	r1, [pc, #180]	; (8004760 <RCCEx_PLL3_Config+0x15c>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80046b0:	4b2b      	ldr	r3, [pc, #172]	; (8004760 <RCCEx_PLL3_Config+0x15c>)
 80046b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	4928      	ldr	r1, [pc, #160]	; (8004760 <RCCEx_PLL3_Config+0x15c>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80046c2:	4b27      	ldr	r3, [pc, #156]	; (8004760 <RCCEx_PLL3_Config+0x15c>)
 80046c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c6:	4a26      	ldr	r2, [pc, #152]	; (8004760 <RCCEx_PLL3_Config+0x15c>)
 80046c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80046ce:	4b24      	ldr	r3, [pc, #144]	; (8004760 <RCCEx_PLL3_Config+0x15c>)
 80046d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046d2:	4b24      	ldr	r3, [pc, #144]	; (8004764 <RCCEx_PLL3_Config+0x160>)
 80046d4:	4013      	ands	r3, r2
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	69d2      	ldr	r2, [r2, #28]
 80046da:	00d2      	lsls	r2, r2, #3
 80046dc:	4920      	ldr	r1, [pc, #128]	; (8004760 <RCCEx_PLL3_Config+0x15c>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80046e2:	4b1f      	ldr	r3, [pc, #124]	; (8004760 <RCCEx_PLL3_Config+0x15c>)
 80046e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e6:	4a1e      	ldr	r2, [pc, #120]	; (8004760 <RCCEx_PLL3_Config+0x15c>)
 80046e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d106      	bne.n	8004702 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80046f4:	4b1a      	ldr	r3, [pc, #104]	; (8004760 <RCCEx_PLL3_Config+0x15c>)
 80046f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f8:	4a19      	ldr	r2, [pc, #100]	; (8004760 <RCCEx_PLL3_Config+0x15c>)
 80046fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80046fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004700:	e00f      	b.n	8004722 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d106      	bne.n	8004716 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004708:	4b15      	ldr	r3, [pc, #84]	; (8004760 <RCCEx_PLL3_Config+0x15c>)
 800470a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470c:	4a14      	ldr	r2, [pc, #80]	; (8004760 <RCCEx_PLL3_Config+0x15c>)
 800470e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004712:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004714:	e005      	b.n	8004722 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004716:	4b12      	ldr	r3, [pc, #72]	; (8004760 <RCCEx_PLL3_Config+0x15c>)
 8004718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471a:	4a11      	ldr	r2, [pc, #68]	; (8004760 <RCCEx_PLL3_Config+0x15c>)
 800471c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004720:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004722:	4b0f      	ldr	r3, [pc, #60]	; (8004760 <RCCEx_PLL3_Config+0x15c>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a0e      	ldr	r2, [pc, #56]	; (8004760 <RCCEx_PLL3_Config+0x15c>)
 8004728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800472c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800472e:	f7fc fe35 	bl	800139c <HAL_GetTick>
 8004732:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004734:	e008      	b.n	8004748 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004736:	f7fc fe31 	bl	800139c <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	2b02      	cmp	r3, #2
 8004742:	d901      	bls.n	8004748 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e006      	b.n	8004756 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004748:	4b05      	ldr	r3, [pc, #20]	; (8004760 <RCCEx_PLL3_Config+0x15c>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d0f0      	beq.n	8004736 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004754:	7bfb      	ldrb	r3, [r7, #15]
}
 8004756:	4618      	mov	r0, r3
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	58024400 	.word	0x58024400
 8004764:	ffff0007 	.word	0xffff0007

08004768 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e049      	b.n	800480e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004780:	b2db      	uxtb	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d106      	bne.n	8004794 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f841 	bl	8004816 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2202      	movs	r2, #2
 8004798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	3304      	adds	r3, #4
 80047a4:	4619      	mov	r1, r3
 80047a6:	4610      	mov	r0, r2
 80047a8:	f000 fa0e 	bl	8004bc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3708      	adds	r7, #8
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004816:	b480      	push	{r7}
 8004818:	b083      	sub	sp, #12
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800481e:	bf00      	nop
 8004820:	370c      	adds	r7, #12
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
	...

0800482c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b01      	cmp	r3, #1
 800483e:	d001      	beq.n	8004844 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e05e      	b.n	8004902 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2202      	movs	r2, #2
 8004848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68da      	ldr	r2, [r3, #12]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f042 0201 	orr.w	r2, r2, #1
 800485a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a2b      	ldr	r2, [pc, #172]	; (8004910 <HAL_TIM_Base_Start_IT+0xe4>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d02c      	beq.n	80048c0 <HAL_TIM_Base_Start_IT+0x94>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800486e:	d027      	beq.n	80048c0 <HAL_TIM_Base_Start_IT+0x94>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a27      	ldr	r2, [pc, #156]	; (8004914 <HAL_TIM_Base_Start_IT+0xe8>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d022      	beq.n	80048c0 <HAL_TIM_Base_Start_IT+0x94>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a26      	ldr	r2, [pc, #152]	; (8004918 <HAL_TIM_Base_Start_IT+0xec>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d01d      	beq.n	80048c0 <HAL_TIM_Base_Start_IT+0x94>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a24      	ldr	r2, [pc, #144]	; (800491c <HAL_TIM_Base_Start_IT+0xf0>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d018      	beq.n	80048c0 <HAL_TIM_Base_Start_IT+0x94>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a23      	ldr	r2, [pc, #140]	; (8004920 <HAL_TIM_Base_Start_IT+0xf4>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d013      	beq.n	80048c0 <HAL_TIM_Base_Start_IT+0x94>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a21      	ldr	r2, [pc, #132]	; (8004924 <HAL_TIM_Base_Start_IT+0xf8>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d00e      	beq.n	80048c0 <HAL_TIM_Base_Start_IT+0x94>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a20      	ldr	r2, [pc, #128]	; (8004928 <HAL_TIM_Base_Start_IT+0xfc>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d009      	beq.n	80048c0 <HAL_TIM_Base_Start_IT+0x94>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a1e      	ldr	r2, [pc, #120]	; (800492c <HAL_TIM_Base_Start_IT+0x100>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d004      	beq.n	80048c0 <HAL_TIM_Base_Start_IT+0x94>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a1d      	ldr	r2, [pc, #116]	; (8004930 <HAL_TIM_Base_Start_IT+0x104>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d115      	bne.n	80048ec <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	689a      	ldr	r2, [r3, #8]
 80048c6:	4b1b      	ldr	r3, [pc, #108]	; (8004934 <HAL_TIM_Base_Start_IT+0x108>)
 80048c8:	4013      	ands	r3, r2
 80048ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2b06      	cmp	r3, #6
 80048d0:	d015      	beq.n	80048fe <HAL_TIM_Base_Start_IT+0xd2>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048d8:	d011      	beq.n	80048fe <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f042 0201 	orr.w	r2, r2, #1
 80048e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ea:	e008      	b.n	80048fe <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f042 0201 	orr.w	r2, r2, #1
 80048fa:	601a      	str	r2, [r3, #0]
 80048fc:	e000      	b.n	8004900 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3714      	adds	r7, #20
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	40010000 	.word	0x40010000
 8004914:	40000400 	.word	0x40000400
 8004918:	40000800 	.word	0x40000800
 800491c:	40000c00 	.word	0x40000c00
 8004920:	40010400 	.word	0x40010400
 8004924:	40001800 	.word	0x40001800
 8004928:	40014000 	.word	0x40014000
 800492c:	4000e000 	.word	0x4000e000
 8004930:	4000e400 	.word	0x4000e400
 8004934:	00010007 	.word	0x00010007

08004938 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b02      	cmp	r3, #2
 800494c:	d122      	bne.n	8004994 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	f003 0302 	and.w	r3, r3, #2
 8004958:	2b02      	cmp	r3, #2
 800495a:	d11b      	bne.n	8004994 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f06f 0202 	mvn.w	r2, #2
 8004964:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	f003 0303 	and.w	r3, r3, #3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d003      	beq.n	8004982 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f905 	bl	8004b8a <HAL_TIM_IC_CaptureCallback>
 8004980:	e005      	b.n	800498e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f8f7 	bl	8004b76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 f908 	bl	8004b9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	f003 0304 	and.w	r3, r3, #4
 800499e:	2b04      	cmp	r3, #4
 80049a0:	d122      	bne.n	80049e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	f003 0304 	and.w	r3, r3, #4
 80049ac:	2b04      	cmp	r3, #4
 80049ae:	d11b      	bne.n	80049e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f06f 0204 	mvn.w	r2, #4
 80049b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2202      	movs	r2, #2
 80049be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d003      	beq.n	80049d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f8db 	bl	8004b8a <HAL_TIM_IC_CaptureCallback>
 80049d4:	e005      	b.n	80049e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f8cd 	bl	8004b76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 f8de 	bl	8004b9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	f003 0308 	and.w	r3, r3, #8
 80049f2:	2b08      	cmp	r3, #8
 80049f4:	d122      	bne.n	8004a3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	f003 0308 	and.w	r3, r3, #8
 8004a00:	2b08      	cmp	r3, #8
 8004a02:	d11b      	bne.n	8004a3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f06f 0208 	mvn.w	r2, #8
 8004a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2204      	movs	r2, #4
 8004a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	69db      	ldr	r3, [r3, #28]
 8004a1a:	f003 0303 	and.w	r3, r3, #3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d003      	beq.n	8004a2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 f8b1 	bl	8004b8a <HAL_TIM_IC_CaptureCallback>
 8004a28:	e005      	b.n	8004a36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f8a3 	bl	8004b76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 f8b4 	bl	8004b9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	f003 0310 	and.w	r3, r3, #16
 8004a46:	2b10      	cmp	r3, #16
 8004a48:	d122      	bne.n	8004a90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	f003 0310 	and.w	r3, r3, #16
 8004a54:	2b10      	cmp	r3, #16
 8004a56:	d11b      	bne.n	8004a90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f06f 0210 	mvn.w	r2, #16
 8004a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2208      	movs	r2, #8
 8004a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	69db      	ldr	r3, [r3, #28]
 8004a6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d003      	beq.n	8004a7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 f887 	bl	8004b8a <HAL_TIM_IC_CaptureCallback>
 8004a7c:	e005      	b.n	8004a8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 f879 	bl	8004b76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 f88a 	bl	8004b9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d10e      	bne.n	8004abc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	f003 0301 	and.w	r3, r3, #1
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d107      	bne.n	8004abc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f06f 0201 	mvn.w	r2, #1
 8004ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f7fc f98c 	bl	8000dd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ac6:	2b80      	cmp	r3, #128	; 0x80
 8004ac8:	d10e      	bne.n	8004ae8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ad4:	2b80      	cmp	r3, #128	; 0x80
 8004ad6:	d107      	bne.n	8004ae8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 f920 	bl	8004d28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004af6:	d10e      	bne.n	8004b16 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b02:	2b80      	cmp	r3, #128	; 0x80
 8004b04:	d107      	bne.n	8004b16 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004b0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 f913 	bl	8004d3c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b20:	2b40      	cmp	r3, #64	; 0x40
 8004b22:	d10e      	bne.n	8004b42 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b2e:	2b40      	cmp	r3, #64	; 0x40
 8004b30:	d107      	bne.n	8004b42 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f838 	bl	8004bb2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	f003 0320 	and.w	r3, r3, #32
 8004b4c:	2b20      	cmp	r3, #32
 8004b4e:	d10e      	bne.n	8004b6e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	f003 0320 	and.w	r3, r3, #32
 8004b5a:	2b20      	cmp	r3, #32
 8004b5c:	d107      	bne.n	8004b6e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f06f 0220 	mvn.w	r2, #32
 8004b66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 f8d3 	bl	8004d14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b6e:	bf00      	nop
 8004b70:	3708      	adds	r7, #8
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b76:	b480      	push	{r7}
 8004b78:	b083      	sub	sp, #12
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b7e:	bf00      	nop
 8004b80:	370c      	adds	r7, #12
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr

08004b8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b8a:	b480      	push	{r7}
 8004b8c:	b083      	sub	sp, #12
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b92:	bf00      	nop
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr

08004b9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	b083      	sub	sp, #12
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ba6:	bf00      	nop
 8004ba8:	370c      	adds	r7, #12
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr

08004bb2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	b083      	sub	sp, #12
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bba:	bf00      	nop
 8004bbc:	370c      	adds	r7, #12
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
	...

08004bc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a44      	ldr	r2, [pc, #272]	; (8004cec <TIM_Base_SetConfig+0x124>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d013      	beq.n	8004c08 <TIM_Base_SetConfig+0x40>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004be6:	d00f      	beq.n	8004c08 <TIM_Base_SetConfig+0x40>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a41      	ldr	r2, [pc, #260]	; (8004cf0 <TIM_Base_SetConfig+0x128>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d00b      	beq.n	8004c08 <TIM_Base_SetConfig+0x40>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a40      	ldr	r2, [pc, #256]	; (8004cf4 <TIM_Base_SetConfig+0x12c>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d007      	beq.n	8004c08 <TIM_Base_SetConfig+0x40>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a3f      	ldr	r2, [pc, #252]	; (8004cf8 <TIM_Base_SetConfig+0x130>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d003      	beq.n	8004c08 <TIM_Base_SetConfig+0x40>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a3e      	ldr	r2, [pc, #248]	; (8004cfc <TIM_Base_SetConfig+0x134>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d108      	bne.n	8004c1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a33      	ldr	r2, [pc, #204]	; (8004cec <TIM_Base_SetConfig+0x124>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d027      	beq.n	8004c72 <TIM_Base_SetConfig+0xaa>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c28:	d023      	beq.n	8004c72 <TIM_Base_SetConfig+0xaa>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a30      	ldr	r2, [pc, #192]	; (8004cf0 <TIM_Base_SetConfig+0x128>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d01f      	beq.n	8004c72 <TIM_Base_SetConfig+0xaa>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a2f      	ldr	r2, [pc, #188]	; (8004cf4 <TIM_Base_SetConfig+0x12c>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d01b      	beq.n	8004c72 <TIM_Base_SetConfig+0xaa>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a2e      	ldr	r2, [pc, #184]	; (8004cf8 <TIM_Base_SetConfig+0x130>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d017      	beq.n	8004c72 <TIM_Base_SetConfig+0xaa>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a2d      	ldr	r2, [pc, #180]	; (8004cfc <TIM_Base_SetConfig+0x134>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d013      	beq.n	8004c72 <TIM_Base_SetConfig+0xaa>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a2c      	ldr	r2, [pc, #176]	; (8004d00 <TIM_Base_SetConfig+0x138>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d00f      	beq.n	8004c72 <TIM_Base_SetConfig+0xaa>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a2b      	ldr	r2, [pc, #172]	; (8004d04 <TIM_Base_SetConfig+0x13c>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d00b      	beq.n	8004c72 <TIM_Base_SetConfig+0xaa>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a2a      	ldr	r2, [pc, #168]	; (8004d08 <TIM_Base_SetConfig+0x140>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d007      	beq.n	8004c72 <TIM_Base_SetConfig+0xaa>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a29      	ldr	r2, [pc, #164]	; (8004d0c <TIM_Base_SetConfig+0x144>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d003      	beq.n	8004c72 <TIM_Base_SetConfig+0xaa>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a28      	ldr	r2, [pc, #160]	; (8004d10 <TIM_Base_SetConfig+0x148>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d108      	bne.n	8004c84 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	689a      	ldr	r2, [r3, #8]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a10      	ldr	r2, [pc, #64]	; (8004cec <TIM_Base_SetConfig+0x124>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d00f      	beq.n	8004cd0 <TIM_Base_SetConfig+0x108>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a12      	ldr	r2, [pc, #72]	; (8004cfc <TIM_Base_SetConfig+0x134>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d00b      	beq.n	8004cd0 <TIM_Base_SetConfig+0x108>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4a11      	ldr	r2, [pc, #68]	; (8004d00 <TIM_Base_SetConfig+0x138>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d007      	beq.n	8004cd0 <TIM_Base_SetConfig+0x108>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a10      	ldr	r2, [pc, #64]	; (8004d04 <TIM_Base_SetConfig+0x13c>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d003      	beq.n	8004cd0 <TIM_Base_SetConfig+0x108>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a0f      	ldr	r2, [pc, #60]	; (8004d08 <TIM_Base_SetConfig+0x140>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d103      	bne.n	8004cd8 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	691a      	ldr	r2, [r3, #16]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	615a      	str	r2, [r3, #20]
}
 8004cde:	bf00      	nop
 8004ce0:	3714      	adds	r7, #20
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	40010000 	.word	0x40010000
 8004cf0:	40000400 	.word	0x40000400
 8004cf4:	40000800 	.word	0x40000800
 8004cf8:	40000c00 	.word	0x40000c00
 8004cfc:	40010400 	.word	0x40010400
 8004d00:	40014000 	.word	0x40014000
 8004d04:	40014400 	.word	0x40014400
 8004d08:	40014800 	.word	0x40014800
 8004d0c:	4000e000 	.word	0x4000e000
 8004d10:	4000e400 	.word	0x4000e400

08004d14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d1c:	bf00      	nop
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e042      	b.n	8004de8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d106      	bne.n	8004d7a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f7fc f92d 	bl	8000fd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2224      	movs	r2, #36	; 0x24
 8004d7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f022 0201 	bic.w	r2, r2, #1
 8004d90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 f82c 	bl	8004df0 <UART_SetConfig>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d101      	bne.n	8004da2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e022      	b.n	8004de8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d002      	beq.n	8004db0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 fe7e 	bl	8005aac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	685a      	ldr	r2, [r3, #4]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004dbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	689a      	ldr	r2, [r3, #8]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004dce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f042 0201 	orr.w	r2, r2, #1
 8004dde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 ff05 	bl	8005bf0 <UART_CheckIdleState>
 8004de6:	4603      	mov	r3, r0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3708      	adds	r7, #8
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004df0:	b5b0      	push	{r4, r5, r7, lr}
 8004df2:	b08e      	sub	sp, #56	; 0x38
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	689a      	ldr	r2, [r3, #8]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	431a      	orrs	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	431a      	orrs	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	69db      	ldr	r3, [r3, #28]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	4bbf      	ldr	r3, [pc, #764]	; (800511c <UART_SetConfig+0x32c>)
 8004e1e:	4013      	ands	r3, r2
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	6812      	ldr	r2, [r2, #0]
 8004e24:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004e26:	430b      	orrs	r3, r1
 8004e28:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	68da      	ldr	r2, [r3, #12]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4ab5      	ldr	r2, [pc, #724]	; (8005120 <UART_SetConfig+0x330>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d004      	beq.n	8004e5a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a1b      	ldr	r3, [r3, #32]
 8004e54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e56:	4313      	orrs	r3, r2
 8004e58:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	689a      	ldr	r2, [r3, #8]
 8004e60:	4bb0      	ldr	r3, [pc, #704]	; (8005124 <UART_SetConfig+0x334>)
 8004e62:	4013      	ands	r3, r2
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	6812      	ldr	r2, [r2, #0]
 8004e68:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004e6a:	430b      	orrs	r3, r1
 8004e6c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e74:	f023 010f 	bic.w	r1, r3, #15
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	430a      	orrs	r2, r1
 8004e82:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4aa7      	ldr	r2, [pc, #668]	; (8005128 <UART_SetConfig+0x338>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d176      	bne.n	8004f7c <UART_SetConfig+0x18c>
 8004e8e:	4ba7      	ldr	r3, [pc, #668]	; (800512c <UART_SetConfig+0x33c>)
 8004e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e96:	2b28      	cmp	r3, #40	; 0x28
 8004e98:	d86c      	bhi.n	8004f74 <UART_SetConfig+0x184>
 8004e9a:	a201      	add	r2, pc, #4	; (adr r2, 8004ea0 <UART_SetConfig+0xb0>)
 8004e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea0:	08004f45 	.word	0x08004f45
 8004ea4:	08004f75 	.word	0x08004f75
 8004ea8:	08004f75 	.word	0x08004f75
 8004eac:	08004f75 	.word	0x08004f75
 8004eb0:	08004f75 	.word	0x08004f75
 8004eb4:	08004f75 	.word	0x08004f75
 8004eb8:	08004f75 	.word	0x08004f75
 8004ebc:	08004f75 	.word	0x08004f75
 8004ec0:	08004f4d 	.word	0x08004f4d
 8004ec4:	08004f75 	.word	0x08004f75
 8004ec8:	08004f75 	.word	0x08004f75
 8004ecc:	08004f75 	.word	0x08004f75
 8004ed0:	08004f75 	.word	0x08004f75
 8004ed4:	08004f75 	.word	0x08004f75
 8004ed8:	08004f75 	.word	0x08004f75
 8004edc:	08004f75 	.word	0x08004f75
 8004ee0:	08004f55 	.word	0x08004f55
 8004ee4:	08004f75 	.word	0x08004f75
 8004ee8:	08004f75 	.word	0x08004f75
 8004eec:	08004f75 	.word	0x08004f75
 8004ef0:	08004f75 	.word	0x08004f75
 8004ef4:	08004f75 	.word	0x08004f75
 8004ef8:	08004f75 	.word	0x08004f75
 8004efc:	08004f75 	.word	0x08004f75
 8004f00:	08004f5d 	.word	0x08004f5d
 8004f04:	08004f75 	.word	0x08004f75
 8004f08:	08004f75 	.word	0x08004f75
 8004f0c:	08004f75 	.word	0x08004f75
 8004f10:	08004f75 	.word	0x08004f75
 8004f14:	08004f75 	.word	0x08004f75
 8004f18:	08004f75 	.word	0x08004f75
 8004f1c:	08004f75 	.word	0x08004f75
 8004f20:	08004f65 	.word	0x08004f65
 8004f24:	08004f75 	.word	0x08004f75
 8004f28:	08004f75 	.word	0x08004f75
 8004f2c:	08004f75 	.word	0x08004f75
 8004f30:	08004f75 	.word	0x08004f75
 8004f34:	08004f75 	.word	0x08004f75
 8004f38:	08004f75 	.word	0x08004f75
 8004f3c:	08004f75 	.word	0x08004f75
 8004f40:	08004f6d 	.word	0x08004f6d
 8004f44:	2301      	movs	r3, #1
 8004f46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f4a:	e326      	b.n	800559a <UART_SetConfig+0x7aa>
 8004f4c:	2304      	movs	r3, #4
 8004f4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f52:	e322      	b.n	800559a <UART_SetConfig+0x7aa>
 8004f54:	2308      	movs	r3, #8
 8004f56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f5a:	e31e      	b.n	800559a <UART_SetConfig+0x7aa>
 8004f5c:	2310      	movs	r3, #16
 8004f5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f62:	e31a      	b.n	800559a <UART_SetConfig+0x7aa>
 8004f64:	2320      	movs	r3, #32
 8004f66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f6a:	e316      	b.n	800559a <UART_SetConfig+0x7aa>
 8004f6c:	2340      	movs	r3, #64	; 0x40
 8004f6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f72:	e312      	b.n	800559a <UART_SetConfig+0x7aa>
 8004f74:	2380      	movs	r3, #128	; 0x80
 8004f76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f7a:	e30e      	b.n	800559a <UART_SetConfig+0x7aa>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a6b      	ldr	r2, [pc, #428]	; (8005130 <UART_SetConfig+0x340>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d130      	bne.n	8004fe8 <UART_SetConfig+0x1f8>
 8004f86:	4b69      	ldr	r3, [pc, #420]	; (800512c <UART_SetConfig+0x33c>)
 8004f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f8a:	f003 0307 	and.w	r3, r3, #7
 8004f8e:	2b05      	cmp	r3, #5
 8004f90:	d826      	bhi.n	8004fe0 <UART_SetConfig+0x1f0>
 8004f92:	a201      	add	r2, pc, #4	; (adr r2, 8004f98 <UART_SetConfig+0x1a8>)
 8004f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f98:	08004fb1 	.word	0x08004fb1
 8004f9c:	08004fb9 	.word	0x08004fb9
 8004fa0:	08004fc1 	.word	0x08004fc1
 8004fa4:	08004fc9 	.word	0x08004fc9
 8004fa8:	08004fd1 	.word	0x08004fd1
 8004fac:	08004fd9 	.word	0x08004fd9
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fb6:	e2f0      	b.n	800559a <UART_SetConfig+0x7aa>
 8004fb8:	2304      	movs	r3, #4
 8004fba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fbe:	e2ec      	b.n	800559a <UART_SetConfig+0x7aa>
 8004fc0:	2308      	movs	r3, #8
 8004fc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fc6:	e2e8      	b.n	800559a <UART_SetConfig+0x7aa>
 8004fc8:	2310      	movs	r3, #16
 8004fca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fce:	e2e4      	b.n	800559a <UART_SetConfig+0x7aa>
 8004fd0:	2320      	movs	r3, #32
 8004fd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fd6:	e2e0      	b.n	800559a <UART_SetConfig+0x7aa>
 8004fd8:	2340      	movs	r3, #64	; 0x40
 8004fda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fde:	e2dc      	b.n	800559a <UART_SetConfig+0x7aa>
 8004fe0:	2380      	movs	r3, #128	; 0x80
 8004fe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fe6:	e2d8      	b.n	800559a <UART_SetConfig+0x7aa>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a51      	ldr	r2, [pc, #324]	; (8005134 <UART_SetConfig+0x344>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d130      	bne.n	8005054 <UART_SetConfig+0x264>
 8004ff2:	4b4e      	ldr	r3, [pc, #312]	; (800512c <UART_SetConfig+0x33c>)
 8004ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ff6:	f003 0307 	and.w	r3, r3, #7
 8004ffa:	2b05      	cmp	r3, #5
 8004ffc:	d826      	bhi.n	800504c <UART_SetConfig+0x25c>
 8004ffe:	a201      	add	r2, pc, #4	; (adr r2, 8005004 <UART_SetConfig+0x214>)
 8005000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005004:	0800501d 	.word	0x0800501d
 8005008:	08005025 	.word	0x08005025
 800500c:	0800502d 	.word	0x0800502d
 8005010:	08005035 	.word	0x08005035
 8005014:	0800503d 	.word	0x0800503d
 8005018:	08005045 	.word	0x08005045
 800501c:	2300      	movs	r3, #0
 800501e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005022:	e2ba      	b.n	800559a <UART_SetConfig+0x7aa>
 8005024:	2304      	movs	r3, #4
 8005026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800502a:	e2b6      	b.n	800559a <UART_SetConfig+0x7aa>
 800502c:	2308      	movs	r3, #8
 800502e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005032:	e2b2      	b.n	800559a <UART_SetConfig+0x7aa>
 8005034:	2310      	movs	r3, #16
 8005036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800503a:	e2ae      	b.n	800559a <UART_SetConfig+0x7aa>
 800503c:	2320      	movs	r3, #32
 800503e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005042:	e2aa      	b.n	800559a <UART_SetConfig+0x7aa>
 8005044:	2340      	movs	r3, #64	; 0x40
 8005046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800504a:	e2a6      	b.n	800559a <UART_SetConfig+0x7aa>
 800504c:	2380      	movs	r3, #128	; 0x80
 800504e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005052:	e2a2      	b.n	800559a <UART_SetConfig+0x7aa>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a37      	ldr	r2, [pc, #220]	; (8005138 <UART_SetConfig+0x348>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d130      	bne.n	80050c0 <UART_SetConfig+0x2d0>
 800505e:	4b33      	ldr	r3, [pc, #204]	; (800512c <UART_SetConfig+0x33c>)
 8005060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005062:	f003 0307 	and.w	r3, r3, #7
 8005066:	2b05      	cmp	r3, #5
 8005068:	d826      	bhi.n	80050b8 <UART_SetConfig+0x2c8>
 800506a:	a201      	add	r2, pc, #4	; (adr r2, 8005070 <UART_SetConfig+0x280>)
 800506c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005070:	08005089 	.word	0x08005089
 8005074:	08005091 	.word	0x08005091
 8005078:	08005099 	.word	0x08005099
 800507c:	080050a1 	.word	0x080050a1
 8005080:	080050a9 	.word	0x080050a9
 8005084:	080050b1 	.word	0x080050b1
 8005088:	2300      	movs	r3, #0
 800508a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800508e:	e284      	b.n	800559a <UART_SetConfig+0x7aa>
 8005090:	2304      	movs	r3, #4
 8005092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005096:	e280      	b.n	800559a <UART_SetConfig+0x7aa>
 8005098:	2308      	movs	r3, #8
 800509a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800509e:	e27c      	b.n	800559a <UART_SetConfig+0x7aa>
 80050a0:	2310      	movs	r3, #16
 80050a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050a6:	e278      	b.n	800559a <UART_SetConfig+0x7aa>
 80050a8:	2320      	movs	r3, #32
 80050aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050ae:	e274      	b.n	800559a <UART_SetConfig+0x7aa>
 80050b0:	2340      	movs	r3, #64	; 0x40
 80050b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050b6:	e270      	b.n	800559a <UART_SetConfig+0x7aa>
 80050b8:	2380      	movs	r3, #128	; 0x80
 80050ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050be:	e26c      	b.n	800559a <UART_SetConfig+0x7aa>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a1d      	ldr	r2, [pc, #116]	; (800513c <UART_SetConfig+0x34c>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d142      	bne.n	8005150 <UART_SetConfig+0x360>
 80050ca:	4b18      	ldr	r3, [pc, #96]	; (800512c <UART_SetConfig+0x33c>)
 80050cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ce:	f003 0307 	and.w	r3, r3, #7
 80050d2:	2b05      	cmp	r3, #5
 80050d4:	d838      	bhi.n	8005148 <UART_SetConfig+0x358>
 80050d6:	a201      	add	r2, pc, #4	; (adr r2, 80050dc <UART_SetConfig+0x2ec>)
 80050d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050dc:	080050f5 	.word	0x080050f5
 80050e0:	080050fd 	.word	0x080050fd
 80050e4:	08005105 	.word	0x08005105
 80050e8:	0800510d 	.word	0x0800510d
 80050ec:	08005115 	.word	0x08005115
 80050f0:	08005141 	.word	0x08005141
 80050f4:	2300      	movs	r3, #0
 80050f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050fa:	e24e      	b.n	800559a <UART_SetConfig+0x7aa>
 80050fc:	2304      	movs	r3, #4
 80050fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005102:	e24a      	b.n	800559a <UART_SetConfig+0x7aa>
 8005104:	2308      	movs	r3, #8
 8005106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800510a:	e246      	b.n	800559a <UART_SetConfig+0x7aa>
 800510c:	2310      	movs	r3, #16
 800510e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005112:	e242      	b.n	800559a <UART_SetConfig+0x7aa>
 8005114:	2320      	movs	r3, #32
 8005116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800511a:	e23e      	b.n	800559a <UART_SetConfig+0x7aa>
 800511c:	cfff69f3 	.word	0xcfff69f3
 8005120:	58000c00 	.word	0x58000c00
 8005124:	11fff4ff 	.word	0x11fff4ff
 8005128:	40011000 	.word	0x40011000
 800512c:	58024400 	.word	0x58024400
 8005130:	40004400 	.word	0x40004400
 8005134:	40004800 	.word	0x40004800
 8005138:	40004c00 	.word	0x40004c00
 800513c:	40005000 	.word	0x40005000
 8005140:	2340      	movs	r3, #64	; 0x40
 8005142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005146:	e228      	b.n	800559a <UART_SetConfig+0x7aa>
 8005148:	2380      	movs	r3, #128	; 0x80
 800514a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800514e:	e224      	b.n	800559a <UART_SetConfig+0x7aa>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4ab1      	ldr	r2, [pc, #708]	; (800541c <UART_SetConfig+0x62c>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d176      	bne.n	8005248 <UART_SetConfig+0x458>
 800515a:	4bb1      	ldr	r3, [pc, #708]	; (8005420 <UART_SetConfig+0x630>)
 800515c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800515e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005162:	2b28      	cmp	r3, #40	; 0x28
 8005164:	d86c      	bhi.n	8005240 <UART_SetConfig+0x450>
 8005166:	a201      	add	r2, pc, #4	; (adr r2, 800516c <UART_SetConfig+0x37c>)
 8005168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800516c:	08005211 	.word	0x08005211
 8005170:	08005241 	.word	0x08005241
 8005174:	08005241 	.word	0x08005241
 8005178:	08005241 	.word	0x08005241
 800517c:	08005241 	.word	0x08005241
 8005180:	08005241 	.word	0x08005241
 8005184:	08005241 	.word	0x08005241
 8005188:	08005241 	.word	0x08005241
 800518c:	08005219 	.word	0x08005219
 8005190:	08005241 	.word	0x08005241
 8005194:	08005241 	.word	0x08005241
 8005198:	08005241 	.word	0x08005241
 800519c:	08005241 	.word	0x08005241
 80051a0:	08005241 	.word	0x08005241
 80051a4:	08005241 	.word	0x08005241
 80051a8:	08005241 	.word	0x08005241
 80051ac:	08005221 	.word	0x08005221
 80051b0:	08005241 	.word	0x08005241
 80051b4:	08005241 	.word	0x08005241
 80051b8:	08005241 	.word	0x08005241
 80051bc:	08005241 	.word	0x08005241
 80051c0:	08005241 	.word	0x08005241
 80051c4:	08005241 	.word	0x08005241
 80051c8:	08005241 	.word	0x08005241
 80051cc:	08005229 	.word	0x08005229
 80051d0:	08005241 	.word	0x08005241
 80051d4:	08005241 	.word	0x08005241
 80051d8:	08005241 	.word	0x08005241
 80051dc:	08005241 	.word	0x08005241
 80051e0:	08005241 	.word	0x08005241
 80051e4:	08005241 	.word	0x08005241
 80051e8:	08005241 	.word	0x08005241
 80051ec:	08005231 	.word	0x08005231
 80051f0:	08005241 	.word	0x08005241
 80051f4:	08005241 	.word	0x08005241
 80051f8:	08005241 	.word	0x08005241
 80051fc:	08005241 	.word	0x08005241
 8005200:	08005241 	.word	0x08005241
 8005204:	08005241 	.word	0x08005241
 8005208:	08005241 	.word	0x08005241
 800520c:	08005239 	.word	0x08005239
 8005210:	2301      	movs	r3, #1
 8005212:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005216:	e1c0      	b.n	800559a <UART_SetConfig+0x7aa>
 8005218:	2304      	movs	r3, #4
 800521a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800521e:	e1bc      	b.n	800559a <UART_SetConfig+0x7aa>
 8005220:	2308      	movs	r3, #8
 8005222:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005226:	e1b8      	b.n	800559a <UART_SetConfig+0x7aa>
 8005228:	2310      	movs	r3, #16
 800522a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800522e:	e1b4      	b.n	800559a <UART_SetConfig+0x7aa>
 8005230:	2320      	movs	r3, #32
 8005232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005236:	e1b0      	b.n	800559a <UART_SetConfig+0x7aa>
 8005238:	2340      	movs	r3, #64	; 0x40
 800523a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800523e:	e1ac      	b.n	800559a <UART_SetConfig+0x7aa>
 8005240:	2380      	movs	r3, #128	; 0x80
 8005242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005246:	e1a8      	b.n	800559a <UART_SetConfig+0x7aa>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a75      	ldr	r2, [pc, #468]	; (8005424 <UART_SetConfig+0x634>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d130      	bne.n	80052b4 <UART_SetConfig+0x4c4>
 8005252:	4b73      	ldr	r3, [pc, #460]	; (8005420 <UART_SetConfig+0x630>)
 8005254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005256:	f003 0307 	and.w	r3, r3, #7
 800525a:	2b05      	cmp	r3, #5
 800525c:	d826      	bhi.n	80052ac <UART_SetConfig+0x4bc>
 800525e:	a201      	add	r2, pc, #4	; (adr r2, 8005264 <UART_SetConfig+0x474>)
 8005260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005264:	0800527d 	.word	0x0800527d
 8005268:	08005285 	.word	0x08005285
 800526c:	0800528d 	.word	0x0800528d
 8005270:	08005295 	.word	0x08005295
 8005274:	0800529d 	.word	0x0800529d
 8005278:	080052a5 	.word	0x080052a5
 800527c:	2300      	movs	r3, #0
 800527e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005282:	e18a      	b.n	800559a <UART_SetConfig+0x7aa>
 8005284:	2304      	movs	r3, #4
 8005286:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800528a:	e186      	b.n	800559a <UART_SetConfig+0x7aa>
 800528c:	2308      	movs	r3, #8
 800528e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005292:	e182      	b.n	800559a <UART_SetConfig+0x7aa>
 8005294:	2310      	movs	r3, #16
 8005296:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800529a:	e17e      	b.n	800559a <UART_SetConfig+0x7aa>
 800529c:	2320      	movs	r3, #32
 800529e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052a2:	e17a      	b.n	800559a <UART_SetConfig+0x7aa>
 80052a4:	2340      	movs	r3, #64	; 0x40
 80052a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052aa:	e176      	b.n	800559a <UART_SetConfig+0x7aa>
 80052ac:	2380      	movs	r3, #128	; 0x80
 80052ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052b2:	e172      	b.n	800559a <UART_SetConfig+0x7aa>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a5b      	ldr	r2, [pc, #364]	; (8005428 <UART_SetConfig+0x638>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d130      	bne.n	8005320 <UART_SetConfig+0x530>
 80052be:	4b58      	ldr	r3, [pc, #352]	; (8005420 <UART_SetConfig+0x630>)
 80052c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c2:	f003 0307 	and.w	r3, r3, #7
 80052c6:	2b05      	cmp	r3, #5
 80052c8:	d826      	bhi.n	8005318 <UART_SetConfig+0x528>
 80052ca:	a201      	add	r2, pc, #4	; (adr r2, 80052d0 <UART_SetConfig+0x4e0>)
 80052cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d0:	080052e9 	.word	0x080052e9
 80052d4:	080052f1 	.word	0x080052f1
 80052d8:	080052f9 	.word	0x080052f9
 80052dc:	08005301 	.word	0x08005301
 80052e0:	08005309 	.word	0x08005309
 80052e4:	08005311 	.word	0x08005311
 80052e8:	2300      	movs	r3, #0
 80052ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052ee:	e154      	b.n	800559a <UART_SetConfig+0x7aa>
 80052f0:	2304      	movs	r3, #4
 80052f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052f6:	e150      	b.n	800559a <UART_SetConfig+0x7aa>
 80052f8:	2308      	movs	r3, #8
 80052fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052fe:	e14c      	b.n	800559a <UART_SetConfig+0x7aa>
 8005300:	2310      	movs	r3, #16
 8005302:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005306:	e148      	b.n	800559a <UART_SetConfig+0x7aa>
 8005308:	2320      	movs	r3, #32
 800530a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800530e:	e144      	b.n	800559a <UART_SetConfig+0x7aa>
 8005310:	2340      	movs	r3, #64	; 0x40
 8005312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005316:	e140      	b.n	800559a <UART_SetConfig+0x7aa>
 8005318:	2380      	movs	r3, #128	; 0x80
 800531a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800531e:	e13c      	b.n	800559a <UART_SetConfig+0x7aa>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a41      	ldr	r2, [pc, #260]	; (800542c <UART_SetConfig+0x63c>)
 8005326:	4293      	cmp	r3, r2
 8005328:	f040 8082 	bne.w	8005430 <UART_SetConfig+0x640>
 800532c:	4b3c      	ldr	r3, [pc, #240]	; (8005420 <UART_SetConfig+0x630>)
 800532e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005330:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005334:	2b28      	cmp	r3, #40	; 0x28
 8005336:	d86d      	bhi.n	8005414 <UART_SetConfig+0x624>
 8005338:	a201      	add	r2, pc, #4	; (adr r2, 8005340 <UART_SetConfig+0x550>)
 800533a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533e:	bf00      	nop
 8005340:	080053e5 	.word	0x080053e5
 8005344:	08005415 	.word	0x08005415
 8005348:	08005415 	.word	0x08005415
 800534c:	08005415 	.word	0x08005415
 8005350:	08005415 	.word	0x08005415
 8005354:	08005415 	.word	0x08005415
 8005358:	08005415 	.word	0x08005415
 800535c:	08005415 	.word	0x08005415
 8005360:	080053ed 	.word	0x080053ed
 8005364:	08005415 	.word	0x08005415
 8005368:	08005415 	.word	0x08005415
 800536c:	08005415 	.word	0x08005415
 8005370:	08005415 	.word	0x08005415
 8005374:	08005415 	.word	0x08005415
 8005378:	08005415 	.word	0x08005415
 800537c:	08005415 	.word	0x08005415
 8005380:	080053f5 	.word	0x080053f5
 8005384:	08005415 	.word	0x08005415
 8005388:	08005415 	.word	0x08005415
 800538c:	08005415 	.word	0x08005415
 8005390:	08005415 	.word	0x08005415
 8005394:	08005415 	.word	0x08005415
 8005398:	08005415 	.word	0x08005415
 800539c:	08005415 	.word	0x08005415
 80053a0:	080053fd 	.word	0x080053fd
 80053a4:	08005415 	.word	0x08005415
 80053a8:	08005415 	.word	0x08005415
 80053ac:	08005415 	.word	0x08005415
 80053b0:	08005415 	.word	0x08005415
 80053b4:	08005415 	.word	0x08005415
 80053b8:	08005415 	.word	0x08005415
 80053bc:	08005415 	.word	0x08005415
 80053c0:	08005405 	.word	0x08005405
 80053c4:	08005415 	.word	0x08005415
 80053c8:	08005415 	.word	0x08005415
 80053cc:	08005415 	.word	0x08005415
 80053d0:	08005415 	.word	0x08005415
 80053d4:	08005415 	.word	0x08005415
 80053d8:	08005415 	.word	0x08005415
 80053dc:	08005415 	.word	0x08005415
 80053e0:	0800540d 	.word	0x0800540d
 80053e4:	2301      	movs	r3, #1
 80053e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053ea:	e0d6      	b.n	800559a <UART_SetConfig+0x7aa>
 80053ec:	2304      	movs	r3, #4
 80053ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053f2:	e0d2      	b.n	800559a <UART_SetConfig+0x7aa>
 80053f4:	2308      	movs	r3, #8
 80053f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053fa:	e0ce      	b.n	800559a <UART_SetConfig+0x7aa>
 80053fc:	2310      	movs	r3, #16
 80053fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005402:	e0ca      	b.n	800559a <UART_SetConfig+0x7aa>
 8005404:	2320      	movs	r3, #32
 8005406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800540a:	e0c6      	b.n	800559a <UART_SetConfig+0x7aa>
 800540c:	2340      	movs	r3, #64	; 0x40
 800540e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005412:	e0c2      	b.n	800559a <UART_SetConfig+0x7aa>
 8005414:	2380      	movs	r3, #128	; 0x80
 8005416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800541a:	e0be      	b.n	800559a <UART_SetConfig+0x7aa>
 800541c:	40011400 	.word	0x40011400
 8005420:	58024400 	.word	0x58024400
 8005424:	40007800 	.word	0x40007800
 8005428:	40007c00 	.word	0x40007c00
 800542c:	40011800 	.word	0x40011800
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4aad      	ldr	r2, [pc, #692]	; (80056ec <UART_SetConfig+0x8fc>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d176      	bne.n	8005528 <UART_SetConfig+0x738>
 800543a:	4bad      	ldr	r3, [pc, #692]	; (80056f0 <UART_SetConfig+0x900>)
 800543c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800543e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005442:	2b28      	cmp	r3, #40	; 0x28
 8005444:	d86c      	bhi.n	8005520 <UART_SetConfig+0x730>
 8005446:	a201      	add	r2, pc, #4	; (adr r2, 800544c <UART_SetConfig+0x65c>)
 8005448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800544c:	080054f1 	.word	0x080054f1
 8005450:	08005521 	.word	0x08005521
 8005454:	08005521 	.word	0x08005521
 8005458:	08005521 	.word	0x08005521
 800545c:	08005521 	.word	0x08005521
 8005460:	08005521 	.word	0x08005521
 8005464:	08005521 	.word	0x08005521
 8005468:	08005521 	.word	0x08005521
 800546c:	080054f9 	.word	0x080054f9
 8005470:	08005521 	.word	0x08005521
 8005474:	08005521 	.word	0x08005521
 8005478:	08005521 	.word	0x08005521
 800547c:	08005521 	.word	0x08005521
 8005480:	08005521 	.word	0x08005521
 8005484:	08005521 	.word	0x08005521
 8005488:	08005521 	.word	0x08005521
 800548c:	08005501 	.word	0x08005501
 8005490:	08005521 	.word	0x08005521
 8005494:	08005521 	.word	0x08005521
 8005498:	08005521 	.word	0x08005521
 800549c:	08005521 	.word	0x08005521
 80054a0:	08005521 	.word	0x08005521
 80054a4:	08005521 	.word	0x08005521
 80054a8:	08005521 	.word	0x08005521
 80054ac:	08005509 	.word	0x08005509
 80054b0:	08005521 	.word	0x08005521
 80054b4:	08005521 	.word	0x08005521
 80054b8:	08005521 	.word	0x08005521
 80054bc:	08005521 	.word	0x08005521
 80054c0:	08005521 	.word	0x08005521
 80054c4:	08005521 	.word	0x08005521
 80054c8:	08005521 	.word	0x08005521
 80054cc:	08005511 	.word	0x08005511
 80054d0:	08005521 	.word	0x08005521
 80054d4:	08005521 	.word	0x08005521
 80054d8:	08005521 	.word	0x08005521
 80054dc:	08005521 	.word	0x08005521
 80054e0:	08005521 	.word	0x08005521
 80054e4:	08005521 	.word	0x08005521
 80054e8:	08005521 	.word	0x08005521
 80054ec:	08005519 	.word	0x08005519
 80054f0:	2301      	movs	r3, #1
 80054f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054f6:	e050      	b.n	800559a <UART_SetConfig+0x7aa>
 80054f8:	2304      	movs	r3, #4
 80054fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054fe:	e04c      	b.n	800559a <UART_SetConfig+0x7aa>
 8005500:	2308      	movs	r3, #8
 8005502:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005506:	e048      	b.n	800559a <UART_SetConfig+0x7aa>
 8005508:	2310      	movs	r3, #16
 800550a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800550e:	e044      	b.n	800559a <UART_SetConfig+0x7aa>
 8005510:	2320      	movs	r3, #32
 8005512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005516:	e040      	b.n	800559a <UART_SetConfig+0x7aa>
 8005518:	2340      	movs	r3, #64	; 0x40
 800551a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800551e:	e03c      	b.n	800559a <UART_SetConfig+0x7aa>
 8005520:	2380      	movs	r3, #128	; 0x80
 8005522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005526:	e038      	b.n	800559a <UART_SetConfig+0x7aa>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a71      	ldr	r2, [pc, #452]	; (80056f4 <UART_SetConfig+0x904>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d130      	bne.n	8005594 <UART_SetConfig+0x7a4>
 8005532:	4b6f      	ldr	r3, [pc, #444]	; (80056f0 <UART_SetConfig+0x900>)
 8005534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005536:	f003 0307 	and.w	r3, r3, #7
 800553a:	2b05      	cmp	r3, #5
 800553c:	d826      	bhi.n	800558c <UART_SetConfig+0x79c>
 800553e:	a201      	add	r2, pc, #4	; (adr r2, 8005544 <UART_SetConfig+0x754>)
 8005540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005544:	0800555d 	.word	0x0800555d
 8005548:	08005565 	.word	0x08005565
 800554c:	0800556d 	.word	0x0800556d
 8005550:	08005575 	.word	0x08005575
 8005554:	0800557d 	.word	0x0800557d
 8005558:	08005585 	.word	0x08005585
 800555c:	2302      	movs	r3, #2
 800555e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005562:	e01a      	b.n	800559a <UART_SetConfig+0x7aa>
 8005564:	2304      	movs	r3, #4
 8005566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800556a:	e016      	b.n	800559a <UART_SetConfig+0x7aa>
 800556c:	2308      	movs	r3, #8
 800556e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005572:	e012      	b.n	800559a <UART_SetConfig+0x7aa>
 8005574:	2310      	movs	r3, #16
 8005576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800557a:	e00e      	b.n	800559a <UART_SetConfig+0x7aa>
 800557c:	2320      	movs	r3, #32
 800557e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005582:	e00a      	b.n	800559a <UART_SetConfig+0x7aa>
 8005584:	2340      	movs	r3, #64	; 0x40
 8005586:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800558a:	e006      	b.n	800559a <UART_SetConfig+0x7aa>
 800558c:	2380      	movs	r3, #128	; 0x80
 800558e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005592:	e002      	b.n	800559a <UART_SetConfig+0x7aa>
 8005594:	2380      	movs	r3, #128	; 0x80
 8005596:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a55      	ldr	r2, [pc, #340]	; (80056f4 <UART_SetConfig+0x904>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	f040 80f0 	bne.w	8005786 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80055a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80055aa:	2b20      	cmp	r3, #32
 80055ac:	dc46      	bgt.n	800563c <UART_SetConfig+0x84c>
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	db75      	blt.n	800569e <UART_SetConfig+0x8ae>
 80055b2:	3b02      	subs	r3, #2
 80055b4:	2b1e      	cmp	r3, #30
 80055b6:	d872      	bhi.n	800569e <UART_SetConfig+0x8ae>
 80055b8:	a201      	add	r2, pc, #4	; (adr r2, 80055c0 <UART_SetConfig+0x7d0>)
 80055ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055be:	bf00      	nop
 80055c0:	08005643 	.word	0x08005643
 80055c4:	0800569f 	.word	0x0800569f
 80055c8:	0800564b 	.word	0x0800564b
 80055cc:	0800569f 	.word	0x0800569f
 80055d0:	0800569f 	.word	0x0800569f
 80055d4:	0800569f 	.word	0x0800569f
 80055d8:	0800565b 	.word	0x0800565b
 80055dc:	0800569f 	.word	0x0800569f
 80055e0:	0800569f 	.word	0x0800569f
 80055e4:	0800569f 	.word	0x0800569f
 80055e8:	0800569f 	.word	0x0800569f
 80055ec:	0800569f 	.word	0x0800569f
 80055f0:	0800569f 	.word	0x0800569f
 80055f4:	0800569f 	.word	0x0800569f
 80055f8:	0800566b 	.word	0x0800566b
 80055fc:	0800569f 	.word	0x0800569f
 8005600:	0800569f 	.word	0x0800569f
 8005604:	0800569f 	.word	0x0800569f
 8005608:	0800569f 	.word	0x0800569f
 800560c:	0800569f 	.word	0x0800569f
 8005610:	0800569f 	.word	0x0800569f
 8005614:	0800569f 	.word	0x0800569f
 8005618:	0800569f 	.word	0x0800569f
 800561c:	0800569f 	.word	0x0800569f
 8005620:	0800569f 	.word	0x0800569f
 8005624:	0800569f 	.word	0x0800569f
 8005628:	0800569f 	.word	0x0800569f
 800562c:	0800569f 	.word	0x0800569f
 8005630:	0800569f 	.word	0x0800569f
 8005634:	0800569f 	.word	0x0800569f
 8005638:	08005691 	.word	0x08005691
 800563c:	2b40      	cmp	r3, #64	; 0x40
 800563e:	d02a      	beq.n	8005696 <UART_SetConfig+0x8a6>
 8005640:	e02d      	b.n	800569e <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005642:	f7fe fc6f 	bl	8003f24 <HAL_RCCEx_GetD3PCLK1Freq>
 8005646:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005648:	e02f      	b.n	80056aa <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800564a:	f107 0314 	add.w	r3, r7, #20
 800564e:	4618      	mov	r0, r3
 8005650:	f7fe fc7e 	bl	8003f50 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005658:	e027      	b.n	80056aa <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800565a:	f107 0308 	add.w	r3, r7, #8
 800565e:	4618      	mov	r0, r3
 8005660:	f7fe fdca 	bl	80041f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005668:	e01f      	b.n	80056aa <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800566a:	4b21      	ldr	r3, [pc, #132]	; (80056f0 <UART_SetConfig+0x900>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0320 	and.w	r3, r3, #32
 8005672:	2b00      	cmp	r3, #0
 8005674:	d009      	beq.n	800568a <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005676:	4b1e      	ldr	r3, [pc, #120]	; (80056f0 <UART_SetConfig+0x900>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	08db      	lsrs	r3, r3, #3
 800567c:	f003 0303 	and.w	r3, r3, #3
 8005680:	4a1d      	ldr	r2, [pc, #116]	; (80056f8 <UART_SetConfig+0x908>)
 8005682:	fa22 f303 	lsr.w	r3, r2, r3
 8005686:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005688:	e00f      	b.n	80056aa <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800568a:	4b1b      	ldr	r3, [pc, #108]	; (80056f8 <UART_SetConfig+0x908>)
 800568c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800568e:	e00c      	b.n	80056aa <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005690:	4b1a      	ldr	r3, [pc, #104]	; (80056fc <UART_SetConfig+0x90c>)
 8005692:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005694:	e009      	b.n	80056aa <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005696:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800569a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800569c:	e005      	b.n	80056aa <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800569e:	2300      	movs	r3, #0
 80056a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80056a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80056aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f000 81e6 	beq.w	8005a7e <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b6:	4a12      	ldr	r2, [pc, #72]	; (8005700 <UART_SetConfig+0x910>)
 80056b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056bc:	461a      	mov	r2, r3
 80056be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80056c4:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	685a      	ldr	r2, [r3, #4]
 80056ca:	4613      	mov	r3, r2
 80056cc:	005b      	lsls	r3, r3, #1
 80056ce:	4413      	add	r3, r2
 80056d0:	6a3a      	ldr	r2, [r7, #32]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d305      	bcc.n	80056e2 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056dc:	6a3a      	ldr	r2, [r7, #32]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d910      	bls.n	8005704 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80056e8:	e1c9      	b.n	8005a7e <UART_SetConfig+0xc8e>
 80056ea:	bf00      	nop
 80056ec:	40011c00 	.word	0x40011c00
 80056f0:	58024400 	.word	0x58024400
 80056f4:	58000c00 	.word	0x58000c00
 80056f8:	03d09000 	.word	0x03d09000
 80056fc:	003d0900 	.word	0x003d0900
 8005700:	08008580 	.word	0x08008580
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005706:	4618      	mov	r0, r3
 8005708:	f04f 0100 	mov.w	r1, #0
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005710:	4ac1      	ldr	r2, [pc, #772]	; (8005a18 <UART_SetConfig+0xc28>)
 8005712:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005716:	b29a      	uxth	r2, r3
 8005718:	f04f 0300 	mov.w	r3, #0
 800571c:	f7fa ff14 	bl	8000548 <__aeabi_uldivmod>
 8005720:	4602      	mov	r2, r0
 8005722:	460b      	mov	r3, r1
 8005724:	4610      	mov	r0, r2
 8005726:	4619      	mov	r1, r3
 8005728:	f04f 0200 	mov.w	r2, #0
 800572c:	f04f 0300 	mov.w	r3, #0
 8005730:	020b      	lsls	r3, r1, #8
 8005732:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005736:	0202      	lsls	r2, r0, #8
 8005738:	6879      	ldr	r1, [r7, #4]
 800573a:	6849      	ldr	r1, [r1, #4]
 800573c:	0849      	lsrs	r1, r1, #1
 800573e:	4608      	mov	r0, r1
 8005740:	f04f 0100 	mov.w	r1, #0
 8005744:	1814      	adds	r4, r2, r0
 8005746:	eb43 0501 	adc.w	r5, r3, r1
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	461a      	mov	r2, r3
 8005750:	f04f 0300 	mov.w	r3, #0
 8005754:	4620      	mov	r0, r4
 8005756:	4629      	mov	r1, r5
 8005758:	f7fa fef6 	bl	8000548 <__aeabi_uldivmod>
 800575c:	4602      	mov	r2, r0
 800575e:	460b      	mov	r3, r1
 8005760:	4613      	mov	r3, r2
 8005762:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005766:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800576a:	d308      	bcc.n	800577e <UART_SetConfig+0x98e>
 800576c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005772:	d204      	bcs.n	800577e <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800577a:	60da      	str	r2, [r3, #12]
 800577c:	e17f      	b.n	8005a7e <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005784:	e17b      	b.n	8005a7e <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	69db      	ldr	r3, [r3, #28]
 800578a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800578e:	f040 80bd 	bne.w	800590c <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 8005792:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005796:	2b20      	cmp	r3, #32
 8005798:	dc48      	bgt.n	800582c <UART_SetConfig+0xa3c>
 800579a:	2b00      	cmp	r3, #0
 800579c:	db7b      	blt.n	8005896 <UART_SetConfig+0xaa6>
 800579e:	2b20      	cmp	r3, #32
 80057a0:	d879      	bhi.n	8005896 <UART_SetConfig+0xaa6>
 80057a2:	a201      	add	r2, pc, #4	; (adr r2, 80057a8 <UART_SetConfig+0x9b8>)
 80057a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a8:	08005833 	.word	0x08005833
 80057ac:	0800583b 	.word	0x0800583b
 80057b0:	08005897 	.word	0x08005897
 80057b4:	08005897 	.word	0x08005897
 80057b8:	08005843 	.word	0x08005843
 80057bc:	08005897 	.word	0x08005897
 80057c0:	08005897 	.word	0x08005897
 80057c4:	08005897 	.word	0x08005897
 80057c8:	08005853 	.word	0x08005853
 80057cc:	08005897 	.word	0x08005897
 80057d0:	08005897 	.word	0x08005897
 80057d4:	08005897 	.word	0x08005897
 80057d8:	08005897 	.word	0x08005897
 80057dc:	08005897 	.word	0x08005897
 80057e0:	08005897 	.word	0x08005897
 80057e4:	08005897 	.word	0x08005897
 80057e8:	08005863 	.word	0x08005863
 80057ec:	08005897 	.word	0x08005897
 80057f0:	08005897 	.word	0x08005897
 80057f4:	08005897 	.word	0x08005897
 80057f8:	08005897 	.word	0x08005897
 80057fc:	08005897 	.word	0x08005897
 8005800:	08005897 	.word	0x08005897
 8005804:	08005897 	.word	0x08005897
 8005808:	08005897 	.word	0x08005897
 800580c:	08005897 	.word	0x08005897
 8005810:	08005897 	.word	0x08005897
 8005814:	08005897 	.word	0x08005897
 8005818:	08005897 	.word	0x08005897
 800581c:	08005897 	.word	0x08005897
 8005820:	08005897 	.word	0x08005897
 8005824:	08005897 	.word	0x08005897
 8005828:	08005889 	.word	0x08005889
 800582c:	2b40      	cmp	r3, #64	; 0x40
 800582e:	d02e      	beq.n	800588e <UART_SetConfig+0xa9e>
 8005830:	e031      	b.n	8005896 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005832:	f7fd fc0f 	bl	8003054 <HAL_RCC_GetPCLK1Freq>
 8005836:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005838:	e033      	b.n	80058a2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800583a:	f7fd fc21 	bl	8003080 <HAL_RCC_GetPCLK2Freq>
 800583e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005840:	e02f      	b.n	80058a2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005842:	f107 0314 	add.w	r3, r7, #20
 8005846:	4618      	mov	r0, r3
 8005848:	f7fe fb82 	bl	8003f50 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005850:	e027      	b.n	80058a2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005852:	f107 0308 	add.w	r3, r7, #8
 8005856:	4618      	mov	r0, r3
 8005858:	f7fe fcce 	bl	80041f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005860:	e01f      	b.n	80058a2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005862:	4b6e      	ldr	r3, [pc, #440]	; (8005a1c <UART_SetConfig+0xc2c>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 0320 	and.w	r3, r3, #32
 800586a:	2b00      	cmp	r3, #0
 800586c:	d009      	beq.n	8005882 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800586e:	4b6b      	ldr	r3, [pc, #428]	; (8005a1c <UART_SetConfig+0xc2c>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	08db      	lsrs	r3, r3, #3
 8005874:	f003 0303 	and.w	r3, r3, #3
 8005878:	4a69      	ldr	r2, [pc, #420]	; (8005a20 <UART_SetConfig+0xc30>)
 800587a:	fa22 f303 	lsr.w	r3, r2, r3
 800587e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005880:	e00f      	b.n	80058a2 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8005882:	4b67      	ldr	r3, [pc, #412]	; (8005a20 <UART_SetConfig+0xc30>)
 8005884:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005886:	e00c      	b.n	80058a2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005888:	4b66      	ldr	r3, [pc, #408]	; (8005a24 <UART_SetConfig+0xc34>)
 800588a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800588c:	e009      	b.n	80058a2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800588e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005892:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005894:	e005      	b.n	80058a2 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8005896:	2300      	movs	r3, #0
 8005898:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80058a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80058a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	f000 80ea 	beq.w	8005a7e <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ae:	4a5a      	ldr	r2, [pc, #360]	; (8005a18 <UART_SetConfig+0xc28>)
 80058b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058b4:	461a      	mov	r2, r3
 80058b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80058bc:	005a      	lsls	r2, r3, #1
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	085b      	lsrs	r3, r3, #1
 80058c4:	441a      	add	r2, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ce:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d2:	2b0f      	cmp	r3, #15
 80058d4:	d916      	bls.n	8005904 <UART_SetConfig+0xb14>
 80058d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058dc:	d212      	bcs.n	8005904 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	f023 030f 	bic.w	r3, r3, #15
 80058e6:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ea:	085b      	lsrs	r3, r3, #1
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	f003 0307 	and.w	r3, r3, #7
 80058f2:	b29a      	uxth	r2, r3
 80058f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058f6:	4313      	orrs	r3, r2
 80058f8:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005900:	60da      	str	r2, [r3, #12]
 8005902:	e0bc      	b.n	8005a7e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800590a:	e0b8      	b.n	8005a7e <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800590c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005910:	2b20      	cmp	r3, #32
 8005912:	dc4b      	bgt.n	80059ac <UART_SetConfig+0xbbc>
 8005914:	2b00      	cmp	r3, #0
 8005916:	f2c0 8087 	blt.w	8005a28 <UART_SetConfig+0xc38>
 800591a:	2b20      	cmp	r3, #32
 800591c:	f200 8084 	bhi.w	8005a28 <UART_SetConfig+0xc38>
 8005920:	a201      	add	r2, pc, #4	; (adr r2, 8005928 <UART_SetConfig+0xb38>)
 8005922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005926:	bf00      	nop
 8005928:	080059b3 	.word	0x080059b3
 800592c:	080059bb 	.word	0x080059bb
 8005930:	08005a29 	.word	0x08005a29
 8005934:	08005a29 	.word	0x08005a29
 8005938:	080059c3 	.word	0x080059c3
 800593c:	08005a29 	.word	0x08005a29
 8005940:	08005a29 	.word	0x08005a29
 8005944:	08005a29 	.word	0x08005a29
 8005948:	080059d3 	.word	0x080059d3
 800594c:	08005a29 	.word	0x08005a29
 8005950:	08005a29 	.word	0x08005a29
 8005954:	08005a29 	.word	0x08005a29
 8005958:	08005a29 	.word	0x08005a29
 800595c:	08005a29 	.word	0x08005a29
 8005960:	08005a29 	.word	0x08005a29
 8005964:	08005a29 	.word	0x08005a29
 8005968:	080059e3 	.word	0x080059e3
 800596c:	08005a29 	.word	0x08005a29
 8005970:	08005a29 	.word	0x08005a29
 8005974:	08005a29 	.word	0x08005a29
 8005978:	08005a29 	.word	0x08005a29
 800597c:	08005a29 	.word	0x08005a29
 8005980:	08005a29 	.word	0x08005a29
 8005984:	08005a29 	.word	0x08005a29
 8005988:	08005a29 	.word	0x08005a29
 800598c:	08005a29 	.word	0x08005a29
 8005990:	08005a29 	.word	0x08005a29
 8005994:	08005a29 	.word	0x08005a29
 8005998:	08005a29 	.word	0x08005a29
 800599c:	08005a29 	.word	0x08005a29
 80059a0:	08005a29 	.word	0x08005a29
 80059a4:	08005a29 	.word	0x08005a29
 80059a8:	08005a09 	.word	0x08005a09
 80059ac:	2b40      	cmp	r3, #64	; 0x40
 80059ae:	d02e      	beq.n	8005a0e <UART_SetConfig+0xc1e>
 80059b0:	e03a      	b.n	8005a28 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059b2:	f7fd fb4f 	bl	8003054 <HAL_RCC_GetPCLK1Freq>
 80059b6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80059b8:	e03c      	b.n	8005a34 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059ba:	f7fd fb61 	bl	8003080 <HAL_RCC_GetPCLK2Freq>
 80059be:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80059c0:	e038      	b.n	8005a34 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059c2:	f107 0314 	add.w	r3, r7, #20
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7fe fac2 	bl	8003f50 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80059d0:	e030      	b.n	8005a34 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059d2:	f107 0308 	add.w	r3, r7, #8
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7fe fc0e 	bl	80041f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80059e0:	e028      	b.n	8005a34 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059e2:	4b0e      	ldr	r3, [pc, #56]	; (8005a1c <UART_SetConfig+0xc2c>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0320 	and.w	r3, r3, #32
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d009      	beq.n	8005a02 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80059ee:	4b0b      	ldr	r3, [pc, #44]	; (8005a1c <UART_SetConfig+0xc2c>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	08db      	lsrs	r3, r3, #3
 80059f4:	f003 0303 	and.w	r3, r3, #3
 80059f8:	4a09      	ldr	r2, [pc, #36]	; (8005a20 <UART_SetConfig+0xc30>)
 80059fa:	fa22 f303 	lsr.w	r3, r2, r3
 80059fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005a00:	e018      	b.n	8005a34 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 8005a02:	4b07      	ldr	r3, [pc, #28]	; (8005a20 <UART_SetConfig+0xc30>)
 8005a04:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a06:	e015      	b.n	8005a34 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005a08:	4b06      	ldr	r3, [pc, #24]	; (8005a24 <UART_SetConfig+0xc34>)
 8005a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a0c:	e012      	b.n	8005a34 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a14:	e00e      	b.n	8005a34 <UART_SetConfig+0xc44>
 8005a16:	bf00      	nop
 8005a18:	08008580 	.word	0x08008580
 8005a1c:	58024400 	.word	0x58024400
 8005a20:	03d09000 	.word	0x03d09000
 8005a24:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005a32:	bf00      	nop
    }

    if (pclk != 0U)
 8005a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d021      	beq.n	8005a7e <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3e:	4a1a      	ldr	r2, [pc, #104]	; (8005aa8 <UART_SetConfig+0xcb8>)
 8005a40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a44:	461a      	mov	r2, r3
 8005a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a48:	fbb3 f2f2 	udiv	r2, r3, r2
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	085b      	lsrs	r3, r3, #1
 8005a52:	441a      	add	r2, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a5c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a60:	2b0f      	cmp	r3, #15
 8005a62:	d909      	bls.n	8005a78 <UART_SetConfig+0xc88>
 8005a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a6a:	d205      	bcs.n	8005a78 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	60da      	str	r2, [r3, #12]
 8005a76:	e002      	b.n	8005a7e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2201      	movs	r2, #1
 8005a82:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005a9a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3738      	adds	r7, #56	; 0x38
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bdb0      	pop	{r4, r5, r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	08008580 	.word	0x08008580

08005aac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab8:	f003 0301 	and.w	r3, r3, #1
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00a      	beq.n	8005ad6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ada:	f003 0302 	and.w	r3, r3, #2
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00a      	beq.n	8005af8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	430a      	orrs	r2, r1
 8005af6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005afc:	f003 0304 	and.w	r3, r3, #4
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d00a      	beq.n	8005b1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	430a      	orrs	r2, r1
 8005b18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b1e:	f003 0308 	and.w	r3, r3, #8
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00a      	beq.n	8005b3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	430a      	orrs	r2, r1
 8005b3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b40:	f003 0310 	and.w	r3, r3, #16
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d00a      	beq.n	8005b5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b62:	f003 0320 	and.w	r3, r3, #32
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00a      	beq.n	8005b80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	430a      	orrs	r2, r1
 8005b7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d01a      	beq.n	8005bc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ba6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005baa:	d10a      	bne.n	8005bc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	430a      	orrs	r2, r1
 8005bc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00a      	beq.n	8005be4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	430a      	orrs	r2, r1
 8005be2:	605a      	str	r2, [r3, #4]
  }
}
 8005be4:	bf00      	nop
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b086      	sub	sp, #24
 8005bf4:	af02      	add	r7, sp, #8
 8005bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c00:	f7fb fbcc 	bl	800139c <HAL_GetTick>
 8005c04:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 0308 	and.w	r3, r3, #8
 8005c10:	2b08      	cmp	r3, #8
 8005c12:	d10e      	bne.n	8005c32 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c18:	9300      	str	r3, [sp, #0]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 f82f 	bl	8005c86 <UART_WaitOnFlagUntilTimeout>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d001      	beq.n	8005c32 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e025      	b.n	8005c7e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 0304 	and.w	r3, r3, #4
 8005c3c:	2b04      	cmp	r3, #4
 8005c3e:	d10e      	bne.n	8005c5e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c44:	9300      	str	r3, [sp, #0]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 f819 	bl	8005c86 <UART_WaitOnFlagUntilTimeout>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d001      	beq.n	8005c5e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e00f      	b.n	8005c7e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2220      	movs	r2, #32
 8005c62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2220      	movs	r2, #32
 8005c6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3710      	adds	r7, #16
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}

08005c86 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b09c      	sub	sp, #112	; 0x70
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	60f8      	str	r0, [r7, #12]
 8005c8e:	60b9      	str	r1, [r7, #8]
 8005c90:	603b      	str	r3, [r7, #0]
 8005c92:	4613      	mov	r3, r2
 8005c94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c96:	e0a9      	b.n	8005dec <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c9e:	f000 80a5 	beq.w	8005dec <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ca2:	f7fb fb7b 	bl	800139c <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d302      	bcc.n	8005cb8 <UART_WaitOnFlagUntilTimeout+0x32>
 8005cb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d140      	bne.n	8005d3a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cc0:	e853 3f00 	ldrex	r3, [r3]
 8005cc4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005cc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cc8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ccc:	667b      	str	r3, [r7, #100]	; 0x64
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cd8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cda:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005cdc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005cde:	e841 2300 	strex	r3, r2, [r1]
 8005ce2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005ce4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d1e6      	bne.n	8005cb8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	3308      	adds	r3, #8
 8005cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cf4:	e853 3f00 	ldrex	r3, [r3]
 8005cf8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cfc:	f023 0301 	bic.w	r3, r3, #1
 8005d00:	663b      	str	r3, [r7, #96]	; 0x60
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	3308      	adds	r3, #8
 8005d08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005d0a:	64ba      	str	r2, [r7, #72]	; 0x48
 8005d0c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005d10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d12:	e841 2300 	strex	r3, r2, [r1]
 8005d16:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005d18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1e5      	bne.n	8005cea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2220      	movs	r2, #32
 8005d22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2220      	movs	r2, #32
 8005d2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e069      	b.n	8005e0e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0304 	and.w	r3, r3, #4
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d051      	beq.n	8005dec <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	69db      	ldr	r3, [r3, #28]
 8005d4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d56:	d149      	bne.n	8005dec <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d60:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6a:	e853 3f00 	ldrex	r3, [r3]
 8005d6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d72:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d76:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d80:	637b      	str	r3, [r7, #52]	; 0x34
 8005d82:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d88:	e841 2300 	strex	r3, r2, [r1]
 8005d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d1e6      	bne.n	8005d62 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	3308      	adds	r3, #8
 8005d9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	e853 3f00 	ldrex	r3, [r3]
 8005da2:	613b      	str	r3, [r7, #16]
   return(result);
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	f023 0301 	bic.w	r3, r3, #1
 8005daa:	66bb      	str	r3, [r7, #104]	; 0x68
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	3308      	adds	r3, #8
 8005db2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005db4:	623a      	str	r2, [r7, #32]
 8005db6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db8:	69f9      	ldr	r1, [r7, #28]
 8005dba:	6a3a      	ldr	r2, [r7, #32]
 8005dbc:	e841 2300 	strex	r3, r2, [r1]
 8005dc0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d1e5      	bne.n	8005d94 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2220      	movs	r2, #32
 8005dcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2220      	movs	r2, #32
 8005dd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2220      	movs	r2, #32
 8005ddc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005de8:	2303      	movs	r3, #3
 8005dea:	e010      	b.n	8005e0e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	69da      	ldr	r2, [r3, #28]
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	4013      	ands	r3, r2
 8005df6:	68ba      	ldr	r2, [r7, #8]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	bf0c      	ite	eq
 8005dfc:	2301      	moveq	r3, #1
 8005dfe:	2300      	movne	r3, #0
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	461a      	mov	r2, r3
 8005e04:	79fb      	ldrb	r3, [r7, #7]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	f43f af46 	beq.w	8005c98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3770      	adds	r7, #112	; 0x70
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}

08005e16 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005e16:	b480      	push	{r7}
 8005e18:	b085      	sub	sp, #20
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d101      	bne.n	8005e2c <HAL_UARTEx_DisableFifoMode+0x16>
 8005e28:	2302      	movs	r3, #2
 8005e2a:	e027      	b.n	8005e7c <HAL_UARTEx_DisableFifoMode+0x66>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2224      	movs	r2, #36	; 0x24
 8005e38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f022 0201 	bic.w	r2, r2, #1
 8005e52:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005e5a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2220      	movs	r2, #32
 8005e6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005e7a:	2300      	movs	r3, #0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3714      	adds	r7, #20
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d101      	bne.n	8005ea0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	e02d      	b.n	8005efc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2224      	movs	r2, #36	; 0x24
 8005eac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f022 0201 	bic.w	r2, r2, #1
 8005ec6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	683a      	ldr	r2, [r7, #0]
 8005ed8:	430a      	orrs	r2, r1
 8005eda:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f000 f84f 	bl	8005f80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2220      	movs	r2, #32
 8005eee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3710      	adds	r7, #16
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d101      	bne.n	8005f1c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005f18:	2302      	movs	r3, #2
 8005f1a:	e02d      	b.n	8005f78 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2224      	movs	r2, #36	; 0x24
 8005f28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f022 0201 	bic.w	r2, r2, #1
 8005f42:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	683a      	ldr	r2, [r7, #0]
 8005f54:	430a      	orrs	r2, r1
 8005f56:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 f811 	bl	8005f80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2220      	movs	r2, #32
 8005f6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3710      	adds	r7, #16
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d108      	bne.n	8005fa2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005fa0:	e031      	b.n	8006006 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005fa2:	2310      	movs	r3, #16
 8005fa4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005fa6:	2310      	movs	r3, #16
 8005fa8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	0e5b      	lsrs	r3, r3, #25
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	f003 0307 	and.w	r3, r3, #7
 8005fb8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	0f5b      	lsrs	r3, r3, #29
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	f003 0307 	and.w	r3, r3, #7
 8005fc8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fca:	7bbb      	ldrb	r3, [r7, #14]
 8005fcc:	7b3a      	ldrb	r2, [r7, #12]
 8005fce:	4911      	ldr	r1, [pc, #68]	; (8006014 <UARTEx_SetNbDataToProcess+0x94>)
 8005fd0:	5c8a      	ldrb	r2, [r1, r2]
 8005fd2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005fd6:	7b3a      	ldrb	r2, [r7, #12]
 8005fd8:	490f      	ldr	r1, [pc, #60]	; (8006018 <UARTEx_SetNbDataToProcess+0x98>)
 8005fda:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fdc:	fb93 f3f2 	sdiv	r3, r3, r2
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005fe8:	7bfb      	ldrb	r3, [r7, #15]
 8005fea:	7b7a      	ldrb	r2, [r7, #13]
 8005fec:	4909      	ldr	r1, [pc, #36]	; (8006014 <UARTEx_SetNbDataToProcess+0x94>)
 8005fee:	5c8a      	ldrb	r2, [r1, r2]
 8005ff0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005ff4:	7b7a      	ldrb	r2, [r7, #13]
 8005ff6:	4908      	ldr	r1, [pc, #32]	; (8006018 <UARTEx_SetNbDataToProcess+0x98>)
 8005ff8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ffa:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006006:	bf00      	nop
 8006008:	3714      	adds	r7, #20
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop
 8006014:	08008598 	.word	0x08008598
 8006018:	080085a0 	.word	0x080085a0

0800601c <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b096      	sub	sp, #88	; 0x58
 8006020:	af02      	add	r7, sp, #8
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	607a      	str	r2, [r7, #4]
 8006028:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800602a:	2234      	movs	r2, #52	; 0x34
 800602c:	2100      	movs	r1, #0
 800602e:	68f8      	ldr	r0, [r7, #12]
 8006030:	f002 fa6a 	bl	8008508 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	f023 0303 	bic.w	r3, r3, #3
 800603a:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	68ba      	ldr	r2, [r7, #8]
 8006040:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	683a      	ldr	r2, [r7, #0]
 800604c:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	f1a3 0208 	sub.w	r2, r3, #8
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2202      	movs	r2, #2
 8006068:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	617b      	str	r3, [r7, #20]
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800606e:	697a      	ldr	r2, [r7, #20]
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	4413      	add	r3, r2
 8006074:	617b      	str	r3, [r7, #20]

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	3b04      	subs	r3, #4
 800607a:	617b      	str	r3, [r7, #20]

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	647b      	str	r3, [r7, #68]	; 0x44
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  temp_ptr;
 8006084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006086:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006088:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	3b04      	subs	r3, #4
 800608e:	617b      	str	r3, [r7, #20]
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	647b      	str	r3, [r7, #68]	; 0x44
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800609e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060a0:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  block_ptr;
 80060a2:	697a      	ldr	r2, [r7, #20]
 80060a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060a6:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	617b      	str	r3, [r7, #20]
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	3304      	adds	r3, #4
 80060b0:	617b      	str	r3, [r7, #20]
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 80060b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060b8:	4a5d      	ldr	r2, [pc, #372]	; (8006230 <_tx_byte_pool_create+0x214>)
 80060ba:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2200      	movs	r2, #0
 80060c0:	621a      	str	r2, [r3, #32]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80060c2:	f3ef 8310 	mrs	r3, PRIMASK
 80060c6:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    return(posture);
 80060c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 80060ca:	623b      	str	r3, [r7, #32]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 80060cc:	b672      	cpsid	i
#endif
    return(int_posture);
 80060ce:	6a3b      	ldr	r3, [r7, #32]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 80060d0:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	4a57      	ldr	r2, [pc, #348]	; (8006234 <_tx_byte_pool_create+0x218>)
 80060d6:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 80060d8:	4b57      	ldr	r3, [pc, #348]	; (8006238 <_tx_byte_pool_create+0x21c>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d109      	bne.n	80060f4 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 80060e0:	4a56      	ldr	r2, [pc, #344]	; (800623c <_tx_byte_pool_create+0x220>)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	631a      	str	r2, [r3, #48]	; 0x30
 80060f2:	e011      	b.n	8006118 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 80060f4:	4b51      	ldr	r3, [pc, #324]	; (800623c <_tx_byte_pool_create+0x220>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	637b      	str	r3, [r7, #52]	; 0x34
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 80060fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060fe:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8006100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 8006106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006110:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006116:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8006118:	4b47      	ldr	r3, [pc, #284]	; (8006238 <_tx_byte_pool_create+0x21c>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	3301      	adds	r3, #1
 800611e:	4a46      	ldr	r2, [pc, #280]	; (8006238 <_tx_byte_pool_create+0x21c>)
 8006120:	6013      	str	r3, [r2, #0]

    /* Optional byte pool create extended processing.  */
    TX_BYTE_POOL_CREATE_EXTENSION(pool_ptr)

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_BYTE_POOL, pool_ptr, name_ptr, pool_size, 0)
 8006122:	2300      	movs	r3, #0
 8006124:	9300      	str	r3, [sp, #0]
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	68ba      	ldr	r2, [r7, #8]
 800612a:	68f9      	ldr	r1, [r7, #12]
 800612c:	2008      	movs	r0, #8
 800612e:	f001 ff45 	bl	8007fbc <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_BYTE_POOL_CREATE, pool_ptr, TX_POINTER_TO_ULONG_CONVERT(pool_start), pool_size, TX_POINTER_TO_ULONG_CONVERT(&block_ptr), TX_TRACE_BYTE_POOL_EVENTS)
 8006132:	4b43      	ldr	r3, [pc, #268]	; (8006240 <_tx_byte_pool_create+0x224>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800613a:	2b00      	cmp	r3, #0
 800613c:	d06c      	beq.n	8006218 <_tx_byte_pool_create+0x1fc>
 800613e:	4b41      	ldr	r3, [pc, #260]	; (8006244 <_tx_byte_pool_create+0x228>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 0304 	and.w	r3, r3, #4
 8006146:	2b00      	cmp	r3, #0
 8006148:	d066      	beq.n	8006218 <_tx_byte_pool_create+0x1fc>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800614a:	f3ef 8305 	mrs	r3, IPSR
 800614e:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8006150:	69fa      	ldr	r2, [r7, #28]
 8006152:	4b3d      	ldr	r3, [pc, #244]	; (8006248 <_tx_byte_pool_create+0x22c>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4313      	orrs	r3, r2
 8006158:	62bb      	str	r3, [r7, #40]	; 0x28
 800615a:	4b3c      	ldr	r3, [pc, #240]	; (800624c <_tx_byte_pool_create+0x230>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006162:	2b00      	cmp	r3, #0
 8006164:	d10b      	bne.n	800617e <_tx_byte_pool_create+0x162>
 8006166:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800616c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800616e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006170:	041a      	lsls	r2, r3, #16
 8006172:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006174:	4313      	orrs	r3, r2
 8006176:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800617a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800617c:	e00e      	b.n	800619c <_tx_byte_pool_create+0x180>
 800617e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006180:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8006184:	d205      	bcs.n	8006192 <_tx_byte_pool_create+0x176>
 8006186:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006188:	64fb      	str	r3, [r7, #76]	; 0x4c
 800618a:	f04f 33ff 	mov.w	r3, #4294967295
 800618e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006190:	e004      	b.n	800619c <_tx_byte_pool_create+0x180>
 8006192:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8006196:	64bb      	str	r3, [r7, #72]	; 0x48
 8006198:	2300      	movs	r3, #0
 800619a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800619c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800619e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a0:	601a      	str	r2, [r3, #0]
 80061a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80061a6:	605a      	str	r2, [r3, #4]
 80061a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061aa:	2215      	movs	r2, #21
 80061ac:	609a      	str	r2, [r3, #8]
 80061ae:	4b28      	ldr	r3, [pc, #160]	; (8006250 <_tx_byte_pool_create+0x234>)
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b4:	60da      	str	r2, [r3, #12]
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ba:	611a      	str	r2, [r3, #16]
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c0:	615a      	str	r2, [r3, #20]
 80061c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c4:	683a      	ldr	r2, [r7, #0]
 80061c6:	619a      	str	r2, [r3, #24]
 80061c8:	f107 0214 	add.w	r2, r7, #20
 80061cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ce:	61da      	str	r2, [r3, #28]
 80061d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d2:	3320      	adds	r3, #32
 80061d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061d6:	4b1f      	ldr	r3, [pc, #124]	; (8006254 <_tx_byte_pool_create+0x238>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061dc:	429a      	cmp	r2, r3
 80061de:	d314      	bcc.n	800620a <_tx_byte_pool_create+0x1ee>
 80061e0:	4b1d      	ldr	r3, [pc, #116]	; (8006258 <_tx_byte_pool_create+0x23c>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061e6:	4a16      	ldr	r2, [pc, #88]	; (8006240 <_tx_byte_pool_create+0x224>)
 80061e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ea:	6013      	str	r3, [r2, #0]
 80061ec:	4b1b      	ldr	r3, [pc, #108]	; (800625c <_tx_byte_pool_create+0x240>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061f2:	621a      	str	r2, [r3, #32]
 80061f4:	4b1a      	ldr	r3, [pc, #104]	; (8006260 <_tx_byte_pool_create+0x244>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d00d      	beq.n	8006218 <_tx_byte_pool_create+0x1fc>
 80061fc:	4b18      	ldr	r3, [pc, #96]	; (8006260 <_tx_byte_pool_create+0x244>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a16      	ldr	r2, [pc, #88]	; (800625c <_tx_byte_pool_create+0x240>)
 8006202:	6812      	ldr	r2, [r2, #0]
 8006204:	4610      	mov	r0, r2
 8006206:	4798      	blx	r3
 8006208:	e006      	b.n	8006218 <_tx_byte_pool_create+0x1fc>
 800620a:	4a0d      	ldr	r2, [pc, #52]	; (8006240 <_tx_byte_pool_create+0x224>)
 800620c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800620e:	6013      	str	r3, [r2, #0]
 8006210:	4b12      	ldr	r3, [pc, #72]	; (800625c <_tx_byte_pool_create+0x240>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006216:	621a      	str	r2, [r3, #32]
 8006218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800621a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	f383 8810 	msr	PRIMASK, r3
}
 8006222:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	3750      	adds	r7, #80	; 0x50
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	ffffeeee 	.word	0xffffeeee
 8006234:	42595445 	.word	0x42595445
 8006238:	24010a58 	.word	0x24010a58
 800623c:	24010a3c 	.word	0x24010a3c
 8006240:	2401107c 	.word	0x2401107c
 8006244:	24011088 	.word	0x24011088
 8006248:	2400fa10 	.word	0x2400fa10
 800624c:	24010af8 	.word	0x24010af8
 8006250:	e0001004 	.word	0xe0001004
 8006254:	24011074 	.word	0x24011074
 8006258:	24011090 	.word	0x24011090
 800625c:	24011084 	.word	0x24011084
 8006260:	24011080 	.word	0x24011080

08006264 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	af00      	add	r7, sp, #0

    /* Initialize event tracing, if enabled.  */
    TX_TRACE_INITIALIZE
 8006268:	f001 fe82 	bl	8007f70 <_tx_trace_initialize>

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 800626c:	f000 f9e0 	bl	8006630 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 8006270:	f001 f936 	bl	80074e0 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8006274:	4b12      	ldr	r3, [pc, #72]	; (80062c0 <_tx_initialize_high_level+0x5c>)
 8006276:	2200      	movs	r2, #0
 8006278:	601a      	str	r2, [r3, #0]
 800627a:	4b12      	ldr	r3, [pc, #72]	; (80062c4 <_tx_initialize_high_level+0x60>)
 800627c:	2200      	movs	r2, #0
 800627e:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 8006280:	4b11      	ldr	r3, [pc, #68]	; (80062c8 <_tx_initialize_high_level+0x64>)
 8006282:	2200      	movs	r2, #0
 8006284:	601a      	str	r2, [r3, #0]
 8006286:	4b11      	ldr	r3, [pc, #68]	; (80062cc <_tx_initialize_high_level+0x68>)
 8006288:	2200      	movs	r2, #0
 800628a:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800628c:	4b10      	ldr	r3, [pc, #64]	; (80062d0 <_tx_initialize_high_level+0x6c>)
 800628e:	2200      	movs	r2, #0
 8006290:	601a      	str	r2, [r3, #0]
 8006292:	4b10      	ldr	r3, [pc, #64]	; (80062d4 <_tx_initialize_high_level+0x70>)
 8006294:	2200      	movs	r2, #0
 8006296:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8006298:	4b0f      	ldr	r3, [pc, #60]	; (80062d8 <_tx_initialize_high_level+0x74>)
 800629a:	2200      	movs	r2, #0
 800629c:	601a      	str	r2, [r3, #0]
 800629e:	4b0f      	ldr	r3, [pc, #60]	; (80062dc <_tx_initialize_high_level+0x78>)
 80062a0:	2200      	movs	r2, #0
 80062a2:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 80062a4:	4b0e      	ldr	r3, [pc, #56]	; (80062e0 <_tx_initialize_high_level+0x7c>)
 80062a6:	2200      	movs	r2, #0
 80062a8:	601a      	str	r2, [r3, #0]
 80062aa:	4b0e      	ldr	r3, [pc, #56]	; (80062e4 <_tx_initialize_high_level+0x80>)
 80062ac:	2200      	movs	r2, #0
 80062ae:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 80062b0:	4b0d      	ldr	r3, [pc, #52]	; (80062e8 <_tx_initialize_high_level+0x84>)
 80062b2:	2200      	movs	r2, #0
 80062b4:	601a      	str	r2, [r3, #0]
 80062b6:	4b0d      	ldr	r3, [pc, #52]	; (80062ec <_tx_initialize_high_level+0x88>)
 80062b8:	2200      	movs	r2, #0
 80062ba:	601a      	str	r2, [r3, #0]
#endif
}
 80062bc:	bf00      	nop
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	24010a38 	.word	0x24010a38
 80062c4:	24010a48 	.word	0x24010a48
 80062c8:	24010a54 	.word	0x24010a54
 80062cc:	24010a34 	.word	0x24010a34
 80062d0:	24010a28 	.word	0x24010a28
 80062d4:	24010a4c 	.word	0x24010a4c
 80062d8:	24010a50 	.word	0x24010a50
 80062dc:	24010a44 	.word	0x24010a44
 80062e0:	24010a3c 	.word	0x24010a3c
 80062e4:	24010a58 	.word	0x24010a58
 80062e8:	24010a30 	.word	0x24010a30
 80062ec:	24010a2c 	.word	0x24010a2c

080062f0 <_tx_initialize_kernel_enter>:
/*                                            initialization,             */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 80062f4:	4b10      	ldr	r3, [pc, #64]	; (8006338 <_tx_initialize_kernel_enter+0x48>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 80062fc:	d00c      	beq.n	8006318 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 80062fe:	4b0e      	ldr	r3, [pc, #56]	; (8006338 <_tx_initialize_kernel_enter+0x48>)
 8006300:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8006304:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 8006306:	f7fa f803 	bl	8000310 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800630a:	f7ff ffab 	bl	8006264 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800630e:	4b0b      	ldr	r3, [pc, #44]	; (800633c <_tx_initialize_kernel_enter+0x4c>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	3301      	adds	r3, #1
 8006314:	4a09      	ldr	r2, [pc, #36]	; (800633c <_tx_initialize_kernel_enter+0x4c>)
 8006316:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8006318:	4b07      	ldr	r3, [pc, #28]	; (8006338 <_tx_initialize_kernel_enter+0x48>)
 800631a:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800631e:	601a      	str	r2, [r3, #0]
    /* Optional random number generator initialization.  */
    TX_INITIALIZE_RANDOM_GENERATOR_INITIALIZATION

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8006320:	4b07      	ldr	r3, [pc, #28]	; (8006340 <_tx_initialize_kernel_enter+0x50>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4618      	mov	r0, r3
 8006326:	f7fa fa8b 	bl	8000840 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800632a:	4b03      	ldr	r3, [pc, #12]	; (8006338 <_tx_initialize_kernel_enter+0x48>)
 800632c:	2200      	movs	r2, #0
 800632e:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 8006330:	f7fa f82e 	bl	8000390 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8006334:	bf00      	nop
 8006336:	bd80      	pop	{r7, pc}
 8006338:	2400fa10 	.word	0x2400fa10
 800633c:	24010af4 	.word	0x24010af4
 8006340:	24010a40 	.word	0x24010a40

08006344 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b09a      	sub	sp, #104	; 0x68
 8006348:	af02      	add	r7, sp, #8
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	60b9      	str	r1, [r7, #8]
 800634e:	607a      	str	r2, [r7, #4]
 8006350:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8006352:	2300      	movs	r3, #0
 8006354:	65bb      	str	r3, [r7, #88]	; 0x58
#endif

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8006356:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006358:	21ef      	movs	r1, #239	; 0xef
 800635a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800635c:	f002 f8d4 	bl	8008508 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8006360:	22b0      	movs	r2, #176	; 0xb0
 8006362:	2100      	movs	r1, #0
 8006364:	68f8      	ldr	r0, [r7, #12]
 8006366:	f002 f8cf 	bl	8008508 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	68ba      	ldr	r2, [r7, #8]
 800636e:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	683a      	ldr	r2, [r7, #0]
 800637a:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006380:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006386:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800638c:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006392:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800639a:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80063a0:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2220      	movs	r2, #32
 80063a6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 80063aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063ac:	64fb      	str	r3, [r7, #76]	; 0x4c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 80063ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063b0:	3b01      	subs	r3, #1
 80063b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80063b4:	4413      	add	r3, r2
 80063b6:	64fb      	str	r3, [r7, #76]	; 0x4c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80063bc:	611a      	str	r2, [r3, #16]

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

    /* Preemption-threshold is enabled, setup accordingly.  */
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80063c2:	63da      	str	r2, [r3, #60]	; 0x3c
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80063c8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2203      	movs	r2, #3
 80063d0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	4a86      	ldr	r2, [pc, #536]	; (80065f0 <_tx_thread_create+0x2ac>)
 80063d6:	655a      	str	r2, [r3, #84]	; 0x54
 80063d8:	68fa      	ldr	r2, [r7, #12]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 80063de:	4985      	ldr	r1, [pc, #532]	; (80065f4 <_tx_thread_create+0x2b0>)
 80063e0:	68f8      	ldr	r0, [r7, #12]
 80063e2:	f7fa f835 	bl	8000450 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80063e6:	f3ef 8310 	mrs	r3, PRIMASK
 80063ea:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 80063ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 80063ee:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 80063f0:	b672      	cpsid	i
    return(int_posture);
 80063f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 80063f4:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	4a7f      	ldr	r2, [pc, #508]	; (80065f8 <_tx_thread_create+0x2b4>)
 80063fa:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 80063fc:	4b7f      	ldr	r3, [pc, #508]	; (80065fc <_tx_thread_create+0x2b8>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d10b      	bne.n	800641c <_tx_thread_create+0xd8>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8006404:	4a7e      	ldr	r2, [pc, #504]	; (8006600 <_tx_thread_create+0x2bc>)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800641a:	e016      	b.n	800644a <_tx_thread_create+0x106>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 800641c:	4b78      	ldr	r3, [pc, #480]	; (8006600 <_tx_thread_create+0x2bc>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	647b      	str	r3, [r7, #68]	; 0x44
        previous_thread =  next_thread -> tx_thread_created_previous;
 8006422:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006424:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006428:	643b      	str	r3, [r7, #64]	; 0x40

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800642a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 8006432:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006434:	68fa      	ldr	r2, [r7, #12]
 8006436:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800643e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006446:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800644a:	4b6c      	ldr	r3, [pc, #432]	; (80065fc <_tx_thread_create+0x2b8>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	3301      	adds	r3, #1
 8006450:	4a6a      	ldr	r2, [pc, #424]	; (80065fc <_tx_thread_create+0x2b8>)
 8006452:	6013      	str	r3, [r2, #0]

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_THREAD, thread_ptr, name_ptr, TX_POINTER_TO_ULONG_CONVERT(stack_start), stack_size)
 8006454:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006458:	9300      	str	r3, [sp, #0]
 800645a:	4613      	mov	r3, r2
 800645c:	68ba      	ldr	r2, [r7, #8]
 800645e:	68f9      	ldr	r1, [r7, #12]
 8006460:	2001      	movs	r0, #1
 8006462:	f001 fdab 	bl	8007fbc <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_CREATE, thread_ptr, priority, TX_POINTER_TO_ULONG_CONVERT(stack_start), stack_size, TX_TRACE_THREAD_EVENTS)
 8006466:	4b67      	ldr	r3, [pc, #412]	; (8006604 <_tx_thread_create+0x2c0>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800646c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800646e:	2b00      	cmp	r3, #0
 8006470:	d06b      	beq.n	800654a <_tx_thread_create+0x206>
 8006472:	4b65      	ldr	r3, [pc, #404]	; (8006608 <_tx_thread_create+0x2c4>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800647a:	2b00      	cmp	r3, #0
 800647c:	d065      	beq.n	800654a <_tx_thread_create+0x206>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800647e:	f3ef 8305 	mrs	r3, IPSR
 8006482:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8006484:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006486:	4b61      	ldr	r3, [pc, #388]	; (800660c <_tx_thread_create+0x2c8>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4313      	orrs	r3, r2
 800648c:	63bb      	str	r3, [r7, #56]	; 0x38
 800648e:	4b60      	ldr	r3, [pc, #384]	; (8006610 <_tx_thread_create+0x2cc>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	653b      	str	r3, [r7, #80]	; 0x50
 8006494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006496:	2b00      	cmp	r3, #0
 8006498:	d10b      	bne.n	80064b2 <_tx_thread_create+0x16e>
 800649a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800649c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800649e:	657b      	str	r3, [r7, #84]	; 0x54
 80064a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064a4:	041a      	lsls	r2, r3, #16
 80064a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064a8:	4313      	orrs	r3, r2
 80064aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064ae:	657b      	str	r3, [r7, #84]	; 0x54
 80064b0:	e00e      	b.n	80064d0 <_tx_thread_create+0x18c>
 80064b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b4:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80064b8:	d205      	bcs.n	80064c6 <_tx_thread_create+0x182>
 80064ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064bc:	657b      	str	r3, [r7, #84]	; 0x54
 80064be:	f04f 33ff 	mov.w	r3, #4294967295
 80064c2:	653b      	str	r3, [r7, #80]	; 0x50
 80064c4:	e004      	b.n	80064d0 <_tx_thread_create+0x18c>
 80064c6:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 80064ca:	653b      	str	r3, [r7, #80]	; 0x50
 80064cc:	2300      	movs	r3, #0
 80064ce:	657b      	str	r3, [r7, #84]	; 0x54
 80064d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80064d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064d4:	601a      	str	r2, [r3, #0]
 80064d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80064da:	605a      	str	r2, [r3, #4]
 80064dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064de:	2264      	movs	r2, #100	; 0x64
 80064e0:	609a      	str	r2, [r3, #8]
 80064e2:	4b4c      	ldr	r3, [pc, #304]	; (8006614 <_tx_thread_create+0x2d0>)
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064e8:	60da      	str	r2, [r3, #12]
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064ee:	611a      	str	r2, [r3, #16]
 80064f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064f2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80064f4:	615a      	str	r2, [r3, #20]
 80064f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80064f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064fa:	619a      	str	r2, [r3, #24]
 80064fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064fe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006500:	61da      	str	r2, [r3, #28]
 8006502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006504:	3320      	adds	r3, #32
 8006506:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006508:	4b43      	ldr	r3, [pc, #268]	; (8006618 <_tx_thread_create+0x2d4>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800650e:	429a      	cmp	r2, r3
 8006510:	d314      	bcc.n	800653c <_tx_thread_create+0x1f8>
 8006512:	4b42      	ldr	r3, [pc, #264]	; (800661c <_tx_thread_create+0x2d8>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006518:	4a3a      	ldr	r2, [pc, #232]	; (8006604 <_tx_thread_create+0x2c0>)
 800651a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800651c:	6013      	str	r3, [r2, #0]
 800651e:	4b40      	ldr	r3, [pc, #256]	; (8006620 <_tx_thread_create+0x2dc>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006524:	621a      	str	r2, [r3, #32]
 8006526:	4b3f      	ldr	r3, [pc, #252]	; (8006624 <_tx_thread_create+0x2e0>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d00d      	beq.n	800654a <_tx_thread_create+0x206>
 800652e:	4b3d      	ldr	r3, [pc, #244]	; (8006624 <_tx_thread_create+0x2e0>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a3b      	ldr	r2, [pc, #236]	; (8006620 <_tx_thread_create+0x2dc>)
 8006534:	6812      	ldr	r2, [r2, #0]
 8006536:	4610      	mov	r0, r2
 8006538:	4798      	blx	r3
 800653a:	e006      	b.n	800654a <_tx_thread_create+0x206>
 800653c:	4a31      	ldr	r2, [pc, #196]	; (8006604 <_tx_thread_create+0x2c0>)
 800653e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006540:	6013      	str	r3, [r2, #0]
 8006542:	4b37      	ldr	r3, [pc, #220]	; (8006620 <_tx_thread_create+0x2dc>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006548:	621a      	str	r2, [r3, #32]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800654a:	4b37      	ldr	r3, [pc, #220]	; (8006628 <_tx_thread_create+0x2e4>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	3301      	adds	r3, #1
 8006550:	4a35      	ldr	r2, [pc, #212]	; (8006628 <_tx_thread_create+0x2e4>)
 8006552:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 8006554:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006556:	2b01      	cmp	r3, #1
 8006558:	d129      	bne.n	80065ae <_tx_thread_create+0x26a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800655a:	f3ef 8305 	mrs	r3, IPSR
 800655e:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8006560:	6aba      	ldr	r2, [r7, #40]	; 0x28
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8006562:	4b2a      	ldr	r3, [pc, #168]	; (800660c <_tx_thread_create+0x2c8>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4313      	orrs	r3, r2
 8006568:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800656c:	d30d      	bcc.n	800658a <_tx_thread_create+0x246>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800656e:	4b2f      	ldr	r3, [pc, #188]	; (800662c <_tx_thread_create+0x2e8>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8006574:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006576:	2b00      	cmp	r3, #0
 8006578:	d009      	beq.n	800658e <_tx_thread_create+0x24a>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800657a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800657c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800657e:	65bb      	str	r3, [r7, #88]	; 0x58

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8006580:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006584:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006586:	63da      	str	r2, [r3, #60]	; 0x3c
 8006588:	e001      	b.n	800658e <_tx_thread_create+0x24a>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800658a:	2300      	movs	r3, #0
 800658c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800658e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006590:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006594:	f383 8810 	msr	PRIMASK, r3
}
 8006598:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f000 fa12 	bl	80069c4 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 80065a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d01e      	beq.n	80065e4 <_tx_thread_create+0x2a0>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 80065a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80065aa:	63da      	str	r2, [r3, #60]	; 0x3c
 80065ac:	e01a      	b.n	80065e4 <_tx_thread_create+0x2a0>
 80065ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065b0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	f383 8810 	msr	PRIMASK, r3
}
 80065b8:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80065ba:	f3ef 8310 	mrs	r3, PRIMASK
 80065be:	61fb      	str	r3, [r7, #28]
    return(posture);
 80065c0:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80065c2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80065c4:	b672      	cpsid	i
    return(int_posture);
 80065c6:	69bb      	ldr	r3, [r7, #24]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 80065c8:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 80065ca:	4b17      	ldr	r3, [pc, #92]	; (8006628 <_tx_thread_create+0x2e4>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	3b01      	subs	r3, #1
 80065d0:	4a15      	ldr	r2, [pc, #84]	; (8006628 <_tx_thread_create+0x2e4>)
 80065d2:	6013      	str	r3, [r2, #0]
 80065d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065d6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80065d8:	6a3b      	ldr	r3, [r7, #32]
 80065da:	f383 8810 	msr	PRIMASK, r3
}
 80065de:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80065e0:	f000 f9b6 	bl	8006950 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3760      	adds	r7, #96	; 0x60
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	08007425 	.word	0x08007425
 80065f4:	080066b5 	.word	0x080066b5
 80065f8:	54485244 	.word	0x54485244
 80065fc:	24010aec 	.word	0x24010aec
 8006600:	24010ae4 	.word	0x24010ae4
 8006604:	2401107c 	.word	0x2401107c
 8006608:	24011088 	.word	0x24011088
 800660c:	2400fa10 	.word	0x2400fa10
 8006610:	24010af8 	.word	0x24010af8
 8006614:	e0001004 	.word	0xe0001004
 8006618:	24011074 	.word	0x24011074
 800661c:	24011090 	.word	0x24011090
 8006620:	24011084 	.word	0x24011084
 8006624:	24011080 	.word	0x24011080
 8006628:	24010af4 	.word	0x24010af4
 800662c:	24010afc 	.word	0x24010afc

08006630 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8006634:	4b13      	ldr	r3, [pc, #76]	; (8006684 <_tx_thread_initialize+0x54>)
 8006636:	2200      	movs	r2, #0
 8006638:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800663a:	4b13      	ldr	r3, [pc, #76]	; (8006688 <_tx_thread_initialize+0x58>)
 800663c:	2200      	movs	r2, #0
 800663e:	601a      	str	r2, [r3, #0]
 8006640:	4b12      	ldr	r3, [pc, #72]	; (800668c <_tx_thread_initialize+0x5c>)
 8006642:	2200      	movs	r2, #0
 8006644:	601a      	str	r2, [r3, #0]
 8006646:	4b12      	ldr	r3, [pc, #72]	; (8006690 <_tx_thread_initialize+0x60>)
 8006648:	2200      	movs	r2, #0
 800664a:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800664c:	4b11      	ldr	r3, [pc, #68]	; (8006694 <_tx_thread_initialize+0x64>)
 800664e:	2220      	movs	r2, #32
 8006650:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8006652:	2280      	movs	r2, #128	; 0x80
 8006654:	2100      	movs	r1, #0
 8006656:	4810      	ldr	r0, [pc, #64]	; (8006698 <_tx_thread_initialize+0x68>)
 8006658:	f001 ff56 	bl	8008508 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800665c:	4b0f      	ldr	r3, [pc, #60]	; (800669c <_tx_thread_initialize+0x6c>)
 800665e:	2200      	movs	r2, #0
 8006660:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8006662:	4b0f      	ldr	r3, [pc, #60]	; (80066a0 <_tx_thread_initialize+0x70>)
 8006664:	2200      	movs	r2, #0
 8006666:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 8006668:	4b0e      	ldr	r3, [pc, #56]	; (80066a4 <_tx_thread_initialize+0x74>)
 800666a:	2200      	movs	r2, #0
 800666c:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 800666e:	4b0e      	ldr	r3, [pc, #56]	; (80066a8 <_tx_thread_initialize+0x78>)
 8006670:	2200      	movs	r2, #0
 8006672:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_TIMER_ENABLE_PERFORMANCE_INFO
                            | (((ULONG) 1) << 9)
#endif
#ifdef TX_ENABLE_EVENT_TRACE
                            | (((ULONG) 1) << 8)
 8006674:	4b0d      	ldr	r3, [pc, #52]	; (80066ac <_tx_thread_initialize+0x7c>)
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	4b0d      	ldr	r3, [pc, #52]	; (80066b0 <_tx_thread_initialize+0x80>)
 800667a:	4313      	orrs	r3, r2
    _tx_build_options =  _tx_build_options 
 800667c:	4a0b      	ldr	r2, [pc, #44]	; (80066ac <_tx_thread_initialize+0x7c>)
 800667e:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 8006680:	bf00      	nop
 8006682:	bd80      	pop	{r7, pc}
 8006684:	24010af8 	.word	0x24010af8
 8006688:	24010afc 	.word	0x24010afc
 800668c:	24010ae0 	.word	0x24010ae0
 8006690:	24010b04 	.word	0x24010b04
 8006694:	24010b00 	.word	0x24010b00
 8006698:	24010a5c 	.word	0x24010a5c
 800669c:	24010ae4 	.word	0x24010ae4
 80066a0:	24010aec 	.word	0x24010aec
 80066a4:	24010af4 	.word	0x24010af4
 80066a8:	24010adc 	.word	0x24010adc
 80066ac:	24010ae8 	.word	0x24010ae8
 80066b0:	01020100 	.word	0x01020100

080066b4 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b088      	sub	sp, #32
 80066b8:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80066ba:	4b21      	ldr	r3, [pc, #132]	; (8006740 <_tx_thread_shell_entry+0x8c>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066c4:	69fa      	ldr	r2, [r7, #28]
 80066c6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80066c8:	4610      	mov	r0, r2
 80066ca:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 80066cc:	4b1d      	ldr	r3, [pc, #116]	; (8006744 <_tx_thread_shell_entry+0x90>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d003      	beq.n	80066dc <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 80066d4:	4b1b      	ldr	r3, [pc, #108]	; (8006744 <_tx_thread_shell_entry+0x90>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	69f8      	ldr	r0, [r7, #28]
 80066da:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80066dc:	f3ef 8310 	mrs	r3, PRIMASK
 80066e0:	607b      	str	r3, [r7, #4]
    return(posture);
 80066e2:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 80066e4:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 80066e6:	b672      	cpsid	i
    return(int_posture);
 80066e8:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 80066ea:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	2201      	movs	r2, #1
 80066f0:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	2201      	movs	r2, #1
 80066f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	2200      	movs	r2, #0
 80066fc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80066fe:	4b12      	ldr	r3, [pc, #72]	; (8006748 <_tx_thread_shell_entry+0x94>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	3301      	adds	r3, #1
 8006704:	4a10      	ldr	r2, [pc, #64]	; (8006748 <_tx_thread_shell_entry+0x94>)
 8006706:	6013      	str	r3, [r2, #0]
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	f383 8810 	msr	PRIMASK, r3
}
 8006712:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 8006714:	f3ef 8314 	mrs	r3, CONTROL
 8006718:	60fb      	str	r3, [r7, #12]
    return(control_value);
 800671a:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 800671c:	617b      	str	r3, [r7, #20]
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	f023 0304 	bic.w	r3, r3, #4
 8006724:	617b      	str	r3, [r7, #20]
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	f383 8814 	msr	CONTROL, r3
}
 8006730:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 8006732:	69f8      	ldr	r0, [r7, #28]
 8006734:	f000 fb14 	bl	8006d60 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8006738:	bf00      	nop
 800673a:	3720      	adds	r7, #32
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}
 8006740:	24010af8 	.word	0x24010af8
 8006744:	24010adc 	.word	0x24010adc
 8006748:	24010af4 	.word	0x24010af4

0800674c <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b094      	sub	sp, #80	; 0x50
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006754:	f3ef 8310 	mrs	r3, PRIMASK
 8006758:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800675a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800675c:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800675e:	b672      	cpsid	i
    return(int_posture);
 8006760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8006762:	647b      	str	r3, [r7, #68]	; 0x44

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8006764:	4b6f      	ldr	r3, [pc, #444]	; (8006924 <_tx_thread_sleep+0x1d8>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 800676a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800676c:	2b00      	cmp	r3, #0
 800676e:	d108      	bne.n	8006782 <_tx_thread_sleep+0x36>
 8006770:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006772:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006776:	f383 8810 	msr	PRIMASK, r3
}
 800677a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800677c:	2313      	movs	r3, #19
 800677e:	60fb      	str	r3, [r7, #12]
 8006780:	e0ca      	b.n	8006918 <_tx_thread_sleep+0x1cc>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006782:	f3ef 8305 	mrs	r3, IPSR
 8006786:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8006788:	6aba      	ldr	r2, [r7, #40]	; 0x28
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800678a:	4b67      	ldr	r3, [pc, #412]	; (8006928 <_tx_thread_sleep+0x1dc>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4313      	orrs	r3, r2
 8006790:	2b00      	cmp	r3, #0
 8006792:	d008      	beq.n	80067a6 <_tx_thread_sleep+0x5a>
 8006794:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006796:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679a:	f383 8810 	msr	PRIMASK, r3
}
 800679e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80067a0:	2313      	movs	r3, #19
 80067a2:	60fb      	str	r3, [r7, #12]
 80067a4:	e0b8      	b.n	8006918 <_tx_thread_sleep+0x1cc>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 80067a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067a8:	4a60      	ldr	r2, [pc, #384]	; (800692c <_tx_thread_sleep+0x1e0>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d108      	bne.n	80067c0 <_tx_thread_sleep+0x74>
 80067ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067b0:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80067b2:	6a3b      	ldr	r3, [r7, #32]
 80067b4:	f383 8810 	msr	PRIMASK, r3
}
 80067b8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80067ba:	2313      	movs	r3, #19
 80067bc:	60fb      	str	r3, [r7, #12]
 80067be:	e0ab      	b.n	8006918 <_tx_thread_sleep+0x1cc>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d108      	bne.n	80067d8 <_tx_thread_sleep+0x8c>
 80067c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067c8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	f383 8810 	msr	PRIMASK, r3
}
 80067d0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 80067d2:	2300      	movs	r3, #0
 80067d4:	60fb      	str	r3, [r7, #12]
 80067d6:	e09f      	b.n	8006918 <_tx_thread_sleep+0x1cc>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 80067d8:	4b55      	ldr	r3, [pc, #340]	; (8006930 <_tx_thread_sleep+0x1e4>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d008      	beq.n	80067f2 <_tx_thread_sleep+0xa6>
 80067e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067e2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	f383 8810 	msr	PRIMASK, r3
}
 80067ea:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 80067ec:	2313      	movs	r3, #19
 80067ee:	60fb      	str	r3, [r7, #12]
 80067f0:	e092      	b.n	8006918 <_tx_thread_sleep+0x1cc>
        }
        else
        {

            /* If trace is enabled, insert this event into the trace buffer.  */
            TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_SLEEP, TX_ULONG_TO_POINTER_CONVERT(timer_ticks), thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&status), 0, TX_TRACE_THREAD_EVENTS)
 80067f2:	4b50      	ldr	r3, [pc, #320]	; (8006934 <_tx_thread_sleep+0x1e8>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d06d      	beq.n	80068da <_tx_thread_sleep+0x18e>
 80067fe:	4b4e      	ldr	r3, [pc, #312]	; (8006938 <_tx_thread_sleep+0x1ec>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006806:	2b00      	cmp	r3, #0
 8006808:	d067      	beq.n	80068da <_tx_thread_sleep+0x18e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800680a:	f3ef 8305 	mrs	r3, IPSR
 800680e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8006810:	697a      	ldr	r2, [r7, #20]
 8006812:	4b45      	ldr	r3, [pc, #276]	; (8006928 <_tx_thread_sleep+0x1dc>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4313      	orrs	r3, r2
 8006818:	63bb      	str	r3, [r7, #56]	; 0x38
 800681a:	4b42      	ldr	r3, [pc, #264]	; (8006924 <_tx_thread_sleep+0x1d8>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006822:	2b00      	cmp	r3, #0
 8006824:	d10b      	bne.n	800683e <_tx_thread_sleep+0xf2>
 8006826:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800682a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800682c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800682e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006830:	041a      	lsls	r2, r3, #16
 8006832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006834:	4313      	orrs	r3, r2
 8006836:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800683a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800683c:	e00e      	b.n	800685c <_tx_thread_sleep+0x110>
 800683e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006840:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8006844:	d205      	bcs.n	8006852 <_tx_thread_sleep+0x106>
 8006846:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006848:	64fb      	str	r3, [r7, #76]	; 0x4c
 800684a:	f04f 33ff 	mov.w	r3, #4294967295
 800684e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006850:	e004      	b.n	800685c <_tx_thread_sleep+0x110>
 8006852:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8006856:	64bb      	str	r3, [r7, #72]	; 0x48
 8006858:	2300      	movs	r3, #0
 800685a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800685c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800685e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006860:	601a      	str	r2, [r3, #0]
 8006862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006864:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006866:	605a      	str	r2, [r3, #4]
 8006868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800686a:	2270      	movs	r2, #112	; 0x70
 800686c:	609a      	str	r2, [r3, #8]
 800686e:	4b33      	ldr	r3, [pc, #204]	; (800693c <_tx_thread_sleep+0x1f0>)
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006874:	60da      	str	r2, [r3, #12]
 8006876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	611a      	str	r2, [r3, #16]
 800687c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800687e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006882:	615a      	str	r2, [r3, #20]
 8006884:	f107 020c 	add.w	r2, r7, #12
 8006888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800688a:	619a      	str	r2, [r3, #24]
 800688c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800688e:	2200      	movs	r2, #0
 8006890:	61da      	str	r2, [r3, #28]
 8006892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006894:	3320      	adds	r3, #32
 8006896:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006898:	4b29      	ldr	r3, [pc, #164]	; (8006940 <_tx_thread_sleep+0x1f4>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800689e:	429a      	cmp	r2, r3
 80068a0:	d314      	bcc.n	80068cc <_tx_thread_sleep+0x180>
 80068a2:	4b28      	ldr	r3, [pc, #160]	; (8006944 <_tx_thread_sleep+0x1f8>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068a8:	4a22      	ldr	r2, [pc, #136]	; (8006934 <_tx_thread_sleep+0x1e8>)
 80068aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068ac:	6013      	str	r3, [r2, #0]
 80068ae:	4b26      	ldr	r3, [pc, #152]	; (8006948 <_tx_thread_sleep+0x1fc>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80068b4:	621a      	str	r2, [r3, #32]
 80068b6:	4b25      	ldr	r3, [pc, #148]	; (800694c <_tx_thread_sleep+0x200>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00d      	beq.n	80068da <_tx_thread_sleep+0x18e>
 80068be:	4b23      	ldr	r3, [pc, #140]	; (800694c <_tx_thread_sleep+0x200>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a21      	ldr	r2, [pc, #132]	; (8006948 <_tx_thread_sleep+0x1fc>)
 80068c4:	6812      	ldr	r2, [r2, #0]
 80068c6:	4610      	mov	r0, r2
 80068c8:	4798      	blx	r3
 80068ca:	e006      	b.n	80068da <_tx_thread_sleep+0x18e>
 80068cc:	4a19      	ldr	r2, [pc, #100]	; (8006934 <_tx_thread_sleep+0x1e8>)
 80068ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068d0:	6013      	str	r3, [r2, #0]
 80068d2:	4b1d      	ldr	r3, [pc, #116]	; (8006948 <_tx_thread_sleep+0x1fc>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80068d8:	621a      	str	r2, [r3, #32]
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 80068da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068dc:	2204      	movs	r2, #4
 80068de:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80068e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068e2:	2201      	movs	r2, #1
 80068e4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80068e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068e8:	2200      	movs	r2, #0
 80068ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 80068ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80068f4:	4b0e      	ldr	r3, [pc, #56]	; (8006930 <_tx_thread_sleep+0x1e4>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	3301      	adds	r3, #1
 80068fa:	4a0d      	ldr	r2, [pc, #52]	; (8006930 <_tx_thread_sleep+0x1e4>)
 80068fc:	6013      	str	r3, [r2, #0]
 80068fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006900:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	f383 8810 	msr	PRIMASK, r3
}
 8006908:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800690a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800690c:	f000 fa28 	bl	8006d60 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8006910:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006912:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006916:	60fb      	str	r3, [r7, #12]
        }
    }

    /* Return completion status.  */
    return(status);
 8006918:	68fb      	ldr	r3, [r7, #12]
}
 800691a:	4618      	mov	r0, r3
 800691c:	3750      	adds	r7, #80	; 0x50
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	24010af8 	.word	0x24010af8
 8006928:	2400fa10 	.word	0x2400fa10
 800692c:	24010b9c 	.word	0x24010b9c
 8006930:	24010af4 	.word	0x24010af4
 8006934:	2401107c 	.word	0x2401107c
 8006938:	24011088 	.word	0x24011088
 800693c:	e0001004 	.word	0xe0001004
 8006940:	24011074 	.word	0x24011074
 8006944:	24011090 	.word	0x24011090
 8006948:	24011084 	.word	0x24011084
 800694c:	24011080 	.word	0x24011080

08006950 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 8006950:	b480      	push	{r7}
 8006952:	b089      	sub	sp, #36	; 0x24
 8006954:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8006956:	4b17      	ldr	r3, [pc, #92]	; (80069b4 <_tx_thread_system_preempt_check+0x64>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 800695c:	69fb      	ldr	r3, [r7, #28]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d121      	bne.n	80069a6 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8006962:	4b15      	ldr	r3, [pc, #84]	; (80069b8 <_tx_thread_system_preempt_check+0x68>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8006968:	4b14      	ldr	r3, [pc, #80]	; (80069bc <_tx_thread_system_preempt_check+0x6c>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800696e:	69ba      	ldr	r2, [r7, #24]
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	429a      	cmp	r2, r3
 8006974:	d017      	beq.n	80069a6 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8006976:	4b12      	ldr	r3, [pc, #72]	; (80069c0 <_tx_thread_system_preempt_check+0x70>)
 8006978:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800697c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800697e:	f3ef 8305 	mrs	r3, IPSR
 8006982:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8006984:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 8006986:	2b00      	cmp	r3, #0
 8006988:	d10c      	bne.n	80069a4 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800698a:	f3ef 8310 	mrs	r3, PRIMASK
 800698e:	60fb      	str	r3, [r7, #12]
    return(posture);
 8006990:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 8006992:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8006994:	b662      	cpsie	i
}
 8006996:	bf00      	nop
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f383 8810 	msr	PRIMASK, r3
}
 80069a2:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 80069a4:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 80069a6:	bf00      	nop
 80069a8:	3724      	adds	r7, #36	; 0x24
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
 80069b2:	bf00      	nop
 80069b4:	24010af4 	.word	0x24010af4
 80069b8:	24010af8 	.word	0x24010af8
 80069bc:	24010afc 	.word	0x24010afc
 80069c0:	e000ed04 	.word	0xe000ed04

080069c4 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b09e      	sub	sp, #120	; 0x78
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
TX_THREAD       *current_thread;
ULONG           combined_flags;

#ifdef TX_ENABLE_EVENT_TRACE
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
 80069cc:	2300      	movs	r3, #0
 80069ce:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80069d0:	f3ef 8310 	mrs	r3, PRIMASK
 80069d4:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 80069d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 80069d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 80069da:	b672      	cpsid	i
    return(int_posture);
 80069dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 80069de:	66bb      	str	r3, [r7, #104]	; 0x68

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d005      	beq.n	80069f4 <_tx_thread_system_resume+0x30>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	334c      	adds	r3, #76	; 0x4c
 80069ec:	4618      	mov	r0, r3
 80069ee:	f000 fe55 	bl	800769c <_tx_timer_system_deactivate>
 80069f2:	e002      	b.n	80069fa <_tx_thread_system_resume+0x36>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

#ifdef TX_ENABLE_EVENT_TRACE

    /* If trace is enabled, save the current event pointer.  */
    entry_ptr =  _tx_trace_buffer_current_ptr;
 80069fa:	4b8c      	ldr	r3, [pc, #560]	; (8006c2c <_tx_thread_system_resume+0x268>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	667b      	str	r3, [r7, #100]	; 0x64
#endif

    /* Log the thread status change.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_RESUME, thread_ptr, thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&execute_ptr), TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr), TX_TRACE_INTERNAL_EVENTS)
 8006a00:	4b8a      	ldr	r3, [pc, #552]	; (8006c2c <_tx_thread_system_resume+0x268>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	663b      	str	r3, [r7, #96]	; 0x60
 8006a06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d06f      	beq.n	8006aec <_tx_thread_system_resume+0x128>
 8006a0c:	4b88      	ldr	r3, [pc, #544]	; (8006c30 <_tx_thread_system_resume+0x26c>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f003 0301 	and.w	r3, r3, #1
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d069      	beq.n	8006aec <_tx_thread_system_resume+0x128>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006a18:	f3ef 8305 	mrs	r3, IPSR
 8006a1c:	63bb      	str	r3, [r7, #56]	; 0x38
    return(ipsr_value);
 8006a1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a20:	4b84      	ldr	r3, [pc, #528]	; (8006c34 <_tx_thread_system_resume+0x270>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a28:	4b83      	ldr	r3, [pc, #524]	; (8006c38 <_tx_thread_system_resume+0x274>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d10b      	bne.n	8006a4c <_tx_thread_system_resume+0x88>
 8006a34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a38:	673b      	str	r3, [r7, #112]	; 0x70
 8006a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a3e:	041a      	lsls	r2, r3, #16
 8006a40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a42:	4313      	orrs	r3, r2
 8006a44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a48:	673b      	str	r3, [r7, #112]	; 0x70
 8006a4a:	e00e      	b.n	8006a6a <_tx_thread_system_resume+0xa6>
 8006a4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a4e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8006a52:	d205      	bcs.n	8006a60 <_tx_thread_system_resume+0x9c>
 8006a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a56:	673b      	str	r3, [r7, #112]	; 0x70
 8006a58:	f04f 33ff 	mov.w	r3, #4294967295
 8006a5c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a5e:	e004      	b.n	8006a6a <_tx_thread_system_resume+0xa6>
 8006a60:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8006a64:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a66:	2300      	movs	r3, #0
 8006a68:	673b      	str	r3, [r7, #112]	; 0x70
 8006a6a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006a6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a6e:	601a      	str	r2, [r3, #0]
 8006a70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a72:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006a74:	605a      	str	r2, [r3, #4]
 8006a76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a78:	2201      	movs	r2, #1
 8006a7a:	609a      	str	r2, [r3, #8]
 8006a7c:	4b6f      	ldr	r3, [pc, #444]	; (8006c3c <_tx_thread_system_resume+0x278>)
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a82:	60da      	str	r2, [r3, #12]
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a88:	611a      	str	r2, [r3, #16]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a90:	615a      	str	r2, [r3, #20]
 8006a92:	f107 020c 	add.w	r2, r7, #12
 8006a96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a98:	619a      	str	r2, [r3, #24]
 8006a9a:	4b69      	ldr	r3, [pc, #420]	; (8006c40 <_tx_thread_system_resume+0x27c>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006aa2:	61da      	str	r2, [r3, #28]
 8006aa4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006aa6:	3320      	adds	r3, #32
 8006aa8:	663b      	str	r3, [r7, #96]	; 0x60
 8006aaa:	4b66      	ldr	r3, [pc, #408]	; (8006c44 <_tx_thread_system_resume+0x280>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d314      	bcc.n	8006ade <_tx_thread_system_resume+0x11a>
 8006ab4:	4b64      	ldr	r3, [pc, #400]	; (8006c48 <_tx_thread_system_resume+0x284>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	663b      	str	r3, [r7, #96]	; 0x60
 8006aba:	4a5c      	ldr	r2, [pc, #368]	; (8006c2c <_tx_thread_system_resume+0x268>)
 8006abc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006abe:	6013      	str	r3, [r2, #0]
 8006ac0:	4b62      	ldr	r3, [pc, #392]	; (8006c4c <_tx_thread_system_resume+0x288>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006ac6:	621a      	str	r2, [r3, #32]
 8006ac8:	4b61      	ldr	r3, [pc, #388]	; (8006c50 <_tx_thread_system_resume+0x28c>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d00d      	beq.n	8006aec <_tx_thread_system_resume+0x128>
 8006ad0:	4b5f      	ldr	r3, [pc, #380]	; (8006c50 <_tx_thread_system_resume+0x28c>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a5d      	ldr	r2, [pc, #372]	; (8006c4c <_tx_thread_system_resume+0x288>)
 8006ad6:	6812      	ldr	r2, [r2, #0]
 8006ad8:	4610      	mov	r0, r2
 8006ada:	4798      	blx	r3
 8006adc:	e006      	b.n	8006aec <_tx_thread_system_resume+0x128>
 8006ade:	4a53      	ldr	r2, [pc, #332]	; (8006c2c <_tx_thread_system_resume+0x268>)
 8006ae0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ae2:	6013      	str	r3, [r2, #0]
 8006ae4:	4b59      	ldr	r3, [pc, #356]	; (8006c4c <_tx_thread_system_resume+0x288>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006aea:	621a      	str	r2, [r3, #32]
#ifdef TX_ENABLE_EVENT_TRACE

    /* Save the time stamp for later comparison to verify that
       the event hasn't been overwritten by the time we have
       computed the next thread to execute.  */
    if (entry_ptr != TX_NULL)
 8006aec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d002      	beq.n	8006af8 <_tx_thread_system_resume+0x134>
    {

        /* Save time stamp.  */
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
 8006af2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006af4:	68db      	ldr	r3, [r3, #12]
 8006af6:	677b      	str	r3, [r7, #116]	; 0x74
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8006af8:	4b56      	ldr	r3, [pc, #344]	; (8006c54 <_tx_thread_system_resume+0x290>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	3b01      	subs	r3, #1
 8006afe:	4a55      	ldr	r2, [pc, #340]	; (8006c54 <_tx_thread_system_resume+0x290>)
 8006b00:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f040 80c7 	bne.w	8006c9a <_tx_thread_system_resume+0x2d6>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	f000 80db 	beq.w	8006ccc <_tx_thread_system_resume+0x308>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	f040 80b6 	bne.w	8006c8c <_tx_thread_system_resume+0x2c8>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b2a:	65bb      	str	r3, [r7, #88]	; 0x58
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8006b2c:	4a4a      	ldr	r2, [pc, #296]	; (8006c58 <_tx_thread_system_resume+0x294>)
 8006b2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b34:	657b      	str	r3, [r7, #84]	; 0x54
                if (head_ptr == TX_NULL)
 8006b36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	f040 8097 	bne.w	8006c6c <_tx_thread_system_resume+0x2a8>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8006b3e:	4946      	ldr	r1, [pc, #280]	; (8006c58 <_tx_thread_system_resume+0x294>)
 8006b40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8006b54:	2201      	movs	r2, #1
 8006b56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b58:	fa02 f303 	lsl.w	r3, r2, r3
 8006b5c:	64fb      	str	r3, [r7, #76]	; 0x4c
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8006b5e:	4b3f      	ldr	r3, [pc, #252]	; (8006c5c <_tx_thread_system_resume+0x298>)
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b64:	4313      	orrs	r3, r2
 8006b66:	4a3d      	ldr	r2, [pc, #244]	; (8006c5c <_tx_thread_system_resume+0x298>)
 8006b68:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8006b6a:	4b3d      	ldr	r3, [pc, #244]	; (8006c60 <_tx_thread_system_resume+0x29c>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b70:	429a      	cmp	r2, r3
 8006b72:	f080 80ab 	bcs.w	8006ccc <_tx_thread_system_resume+0x308>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8006b76:	4a3a      	ldr	r2, [pc, #232]	; (8006c60 <_tx_thread_system_resume+0x29c>)
 8006b78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b7a:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8006b7c:	4b30      	ldr	r3, [pc, #192]	; (8006c40 <_tx_thread_system_resume+0x27c>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	60fb      	str	r3, [r7, #12]

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d103      	bne.n	8006b90 <_tx_thread_system_resume+0x1cc>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8006b88:	4a2d      	ldr	r2, [pc, #180]	; (8006c40 <_tx_thread_system_resume+0x27c>)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6013      	str	r3, [r2, #0]
 8006b8e:	e09d      	b.n	8006ccc <_tx_thread_system_resume+0x308>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b96:	429a      	cmp	r2, r3
 8006b98:	f080 8098 	bcs.w	8006ccc <_tx_thread_system_resume+0x308>
                            {

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

                                /* Determine if the preempted thread had preemption-threshold set.  */
                                if (execute_ptr -> tx_thread_preempt_threshold != execute_ptr -> tx_thread_priority)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d00b      	beq.n	8006bc0 <_tx_thread_system_resume+0x1fc>
                                    TX_DIV32_BIT_SET(execute_ptr -> tx_thread_priority, priority_bit)
                                    _tx_thread_preempted_map_active =  _tx_thread_preempted_map_active | priority_bit;
#endif

                                    /* Remember that this thread was preempted by a thread above the thread's threshold.  */
                                    TX_MOD32_BIT_SET(execute_ptr -> tx_thread_priority, priority_bit)
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bac:	2201      	movs	r2, #1
 8006bae:	fa02 f303 	lsl.w	r3, r2, r3
 8006bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
                                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 8006bb4:	4b2b      	ldr	r3, [pc, #172]	; (8006c64 <_tx_thread_system_resume+0x2a0>)
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	4a29      	ldr	r2, [pc, #164]	; (8006c64 <_tx_thread_system_resume+0x2a0>)
 8006bbe:	6013      	str	r3, [r2, #0]
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 8006bc0:	4a1f      	ldr	r2, [pc, #124]	; (8006c40 <_tx_thread_system_resume+0x27c>)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6013      	str	r3, [r2, #0]
#ifdef TX_ENABLE_EVENT_TRACE

                                /* Check that the event time stamp is unchanged.  A different
                                   timestamp means that a later event wrote over the thread
                                   resume event. In that case, do nothing here.  */
                                if (entry_ptr != TX_NULL)
 8006bc6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d009      	beq.n	8006be0 <_tx_thread_system_resume+0x21c>
                                {

                                    /* Is the timestamp the same?  */
                                    if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 8006bcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d104      	bne.n	8006be0 <_tx_thread_system_resume+0x21c>
                                    {

                                        /* Timestamp is the same, set the "next thread pointer" to NULL. This can
                                           be used by the trace analysis tool to show idle system conditions.  */
                                        entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 8006bd6:	4b1a      	ldr	r3, [pc, #104]	; (8006c40 <_tx_thread_system_resume+0x27c>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	461a      	mov	r2, r3
 8006bdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bde:	61da      	str	r2, [r3, #28]
 8006be0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006be2:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006be6:	f383 8810 	msr	PRIMASK, r3
}
 8006bea:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8006bec:	4b19      	ldr	r3, [pc, #100]	; (8006c54 <_tx_thread_system_resume+0x290>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	64bb      	str	r3, [r7, #72]	; 0x48
                                if (combined_flags == ((ULONG) 0))
 8006bf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	f040 80a2 	bne.w	8006d3e <_tx_thread_system_resume+0x37a>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8006bfa:	4b1b      	ldr	r3, [pc, #108]	; (8006c68 <_tx_thread_system_resume+0x2a4>)
 8006bfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c00:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006c02:	f3ef 8305 	mrs	r3, IPSR
 8006c06:	633b      	str	r3, [r7, #48]	; 0x30
    return(ipsr_value);
 8006c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    if (__get_ipsr_value() == 0)
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	f040 8099 	bne.w	8006d42 <_tx_thread_system_resume+0x37e>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006c10:	f3ef 8310 	mrs	r3, PRIMASK
 8006c14:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8006c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
        interrupt_save = __get_interrupt_posture();
 8006c18:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSIE  i": : : "memory");
 8006c1a:	b662      	cpsie	i
}
 8006c1c:	bf00      	nop
 8006c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c20:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c24:	f383 8810 	msr	PRIMASK, r3
}
 8006c28:	bf00      	nop
}
 8006c2a:	e08a      	b.n	8006d42 <_tx_thread_system_resume+0x37e>
 8006c2c:	2401107c 	.word	0x2401107c
 8006c30:	24011088 	.word	0x24011088
 8006c34:	2400fa10 	.word	0x2400fa10
 8006c38:	24010af8 	.word	0x24010af8
 8006c3c:	e0001004 	.word	0xe0001004
 8006c40:	24010afc 	.word	0x24010afc
 8006c44:	24011074 	.word	0x24011074
 8006c48:	24011090 	.word	0x24011090
 8006c4c:	24011084 	.word	0x24011084
 8006c50:	24011080 	.word	0x24011080
 8006c54:	24010af4 	.word	0x24010af4
 8006c58:	24010a5c 	.word	0x24010a5c
 8006c5c:	24010ae0 	.word	0x24010ae0
 8006c60:	24010b00 	.word	0x24010b00
 8006c64:	24010b04 	.word	0x24010b04
 8006c68:	e000ed04 	.word	0xe000ed04
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8006c6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c70:	653b      	str	r3, [r7, #80]	; 0x50
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8006c72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8006c78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006c82:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006c88:	621a      	str	r2, [r3, #32]
 8006c8a:	e01f      	b.n	8006ccc <_tx_thread_system_resume+0x308>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2203      	movs	r2, #3
 8006c96:	631a      	str	r2, [r3, #48]	; 0x30
 8006c98:	e018      	b.n	8006ccc <_tx_thread_system_resume+0x308>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d014      	beq.n	8006ccc <_tx_thread_system_resume+0x308>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca6:	2b02      	cmp	r3, #2
 8006ca8:	d010      	beq.n	8006ccc <_tx_thread_system_resume+0x308>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d106      	bne.n	8006cc0 <_tx_thread_system_resume+0x2fc>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	631a      	str	r2, [r3, #48]	; 0x30
 8006cbe:	e005      	b.n	8006ccc <_tx_thread_system_resume+0x308>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2203      	movs	r2, #3
 8006cca:	631a      	str	r2, [r3, #48]	; 0x30
#ifdef TX_ENABLE_EVENT_TRACE

    /* Check that the event time stamp is unchanged.  A different
       timestamp means that a later event wrote over the thread
       resume event. In that case, do nothing here.  */
    if (entry_ptr != TX_NULL)
 8006ccc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d009      	beq.n	8006ce6 <_tx_thread_system_resume+0x322>
    {

        /* Is the timestamp the same?  */
        if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 8006cd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d104      	bne.n	8006ce6 <_tx_thread_system_resume+0x322>
            /* Timestamp is the same, set the "next thread pointer" to NULL. This can
               be used by the trace analysis tool to show idle system conditions.  */
#ifdef TX_MISRA_ENABLE
            entry_ptr -> tx_trace_buffer_entry_info_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
#else
            entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 8006cdc:	4b1c      	ldr	r3, [pc, #112]	; (8006d50 <_tx_thread_system_resume+0x38c>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ce4:	61da      	str	r2, [r3, #28]
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8006ce6:	4b1b      	ldr	r3, [pc, #108]	; (8006d54 <_tx_thread_system_resume+0x390>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	647b      	str	r3, [r7, #68]	; 0x44
 8006cec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006cee:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006cf0:	6a3b      	ldr	r3, [r7, #32]
 8006cf2:	f383 8810 	msr	PRIMASK, r3
}
 8006cf6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8006cf8:	4b15      	ldr	r3, [pc, #84]	; (8006d50 <_tx_thread_system_resume+0x38c>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d022      	beq.n	8006d48 <_tx_thread_system_resume+0x384>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8006d02:	4b15      	ldr	r3, [pc, #84]	; (8006d58 <_tx_thread_system_resume+0x394>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	64bb      	str	r3, [r7, #72]	; 0x48
        if (combined_flags == ((ULONG) 0))
 8006d08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d11c      	bne.n	8006d48 <_tx_thread_system_resume+0x384>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8006d0e:	4b13      	ldr	r3, [pc, #76]	; (8006d5c <_tx_thread_system_resume+0x398>)
 8006d10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d14:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006d16:	f3ef 8305 	mrs	r3, IPSR
 8006d1a:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8006d1c:	69fb      	ldr	r3, [r7, #28]
    if (__get_ipsr_value() == 0)
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d111      	bne.n	8006d46 <_tx_thread_system_resume+0x382>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006d22:	f3ef 8310 	mrs	r3, PRIMASK
 8006d26:	61bb      	str	r3, [r7, #24]
    return(posture);
 8006d28:	69bb      	ldr	r3, [r7, #24]
        interrupt_save = __get_interrupt_posture();
 8006d2a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8006d2c:	b662      	cpsie	i
}
 8006d2e:	bf00      	nop
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	f383 8810 	msr	PRIMASK, r3
}
 8006d3a:	bf00      	nop
}
 8006d3c:	e003      	b.n	8006d46 <_tx_thread_system_resume+0x382>
                                return;
 8006d3e:	bf00      	nop
 8006d40:	e002      	b.n	8006d48 <_tx_thread_system_resume+0x384>
 8006d42:	bf00      	nop
 8006d44:	e000      	b.n	8006d48 <_tx_thread_system_resume+0x384>
 8006d46:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8006d48:	3778      	adds	r7, #120	; 0x78
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	24010afc 	.word	0x24010afc
 8006d54:	24010af8 	.word	0x24010af8
 8006d58:	24010af4 	.word	0x24010af4
 8006d5c:	e000ed04 	.word	0xe000ed04

08006d60 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b0a8      	sub	sp, #160	; 0xa0
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
ULONG           timeout;
#endif

#ifdef TX_ENABLE_EVENT_TRACE
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
 8006d68:	2300      	movs	r3, #0
 8006d6a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8006d6e:	4b85      	ldr	r3, [pc, #532]	; (8006f84 <_tx_thread_system_suspend+0x224>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006d76:	f3ef 8310 	mrs	r3, PRIMASK
 8006d7a:	663b      	str	r3, [r7, #96]	; 0x60
    return(posture);
 8006d7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    int_posture = __get_interrupt_posture();
 8006d7e:	65fb      	str	r3, [r7, #92]	; 0x5c
    __asm__ volatile ("CPSID i" : : : "memory");
 8006d80:	b672      	cpsid	i
    return(int_posture);
 8006d82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8006d84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d115      	bne.n	8006dbe <_tx_thread_system_suspend+0x5e>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d96:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8006d9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d009      	beq.n	8006db6 <_tx_thread_system_suspend+0x56>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8006da2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006daa:	d004      	beq.n	8006db6 <_tx_thread_system_suspend+0x56>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	334c      	adds	r3, #76	; 0x4c
 8006db0:	4618      	mov	r0, r3
 8006db2:	f000 fc11 	bl	80075d8 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	69db      	ldr	r3, [r3, #28]
 8006dba:	4a73      	ldr	r2, [pc, #460]	; (8006f88 <_tx_thread_system_suspend+0x228>)
 8006dbc:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8006dbe:	4b73      	ldr	r3, [pc, #460]	; (8006f8c <_tx_thread_system_suspend+0x22c>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	3b01      	subs	r3, #1
 8006dc4:	4a71      	ldr	r2, [pc, #452]	; (8006f8c <_tx_thread_system_suspend+0x22c>)
 8006dc6:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	f040 8206 	bne.w	80071de <_tx_thread_system_suspend+0x47e>
        TX_EL_THREAD_STATUS_CHANGE_INSERT(thread_ptr, thread_ptr -> tx_thread_state)

#ifdef TX_ENABLE_EVENT_TRACE

        /* If trace is enabled, save the current event pointer.  */
        entry_ptr =  _tx_trace_buffer_current_ptr;
 8006dd2:	4b6f      	ldr	r3, [pc, #444]	; (8006f90 <_tx_thread_system_suspend+0x230>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#endif

        /* Log the thread status change.  */
        TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_SUSPEND, thread_ptr, thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&priority), TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr), TX_TRACE_INTERNAL_EVENTS)
 8006dda:	4b6d      	ldr	r3, [pc, #436]	; (8006f90 <_tx_thread_system_suspend+0x230>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006de2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	f000 808e 	beq.w	8006f08 <_tx_thread_system_suspend+0x1a8>
 8006dec:	4b69      	ldr	r3, [pc, #420]	; (8006f94 <_tx_thread_system_suspend+0x234>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 0301 	and.w	r3, r3, #1
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f000 8087 	beq.w	8006f08 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006dfa:	f3ef 8305 	mrs	r3, IPSR
 8006dfe:	65bb      	str	r3, [r7, #88]	; 0x58
    return(ipsr_value);
 8006e00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e02:	4b65      	ldr	r3, [pc, #404]	; (8006f98 <_tx_thread_system_suspend+0x238>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006e0a:	4b5e      	ldr	r3, [pc, #376]	; (8006f84 <_tx_thread_system_suspend+0x224>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006e12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d110      	bne.n	8006e3a <_tx_thread_system_suspend+0xda>
 8006e18:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e28:	041a      	lsls	r2, r3, #16
 8006e2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e38:	e013      	b.n	8006e62 <_tx_thread_system_suspend+0x102>
 8006e3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006e3c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8006e40:	d208      	bcs.n	8006e54 <_tx_thread_system_suspend+0xf4>
 8006e42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006e52:	e006      	b.n	8006e62 <_tx_thread_system_suspend+0x102>
 8006e54:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8006e58:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e62:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8006e66:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e6a:	601a      	str	r2, [r3, #0]
 8006e6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e70:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006e74:	605a      	str	r2, [r3, #4]
 8006e76:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e7a:	2202      	movs	r2, #2
 8006e7c:	609a      	str	r2, [r3, #8]
 8006e7e:	4b47      	ldr	r3, [pc, #284]	; (8006f9c <_tx_thread_system_suspend+0x23c>)
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e86:	60da      	str	r2, [r3, #12]
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e8e:	611a      	str	r2, [r3, #16]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e98:	615a      	str	r2, [r3, #20]
 8006e9a:	f107 020c 	add.w	r2, r7, #12
 8006e9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006ea2:	619a      	str	r2, [r3, #24]
 8006ea4:	4b3e      	ldr	r3, [pc, #248]	; (8006fa0 <_tx_thread_system_suspend+0x240>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006eae:	61da      	str	r2, [r3, #28]
 8006eb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006eb4:	3320      	adds	r3, #32
 8006eb6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006eba:	4b3a      	ldr	r3, [pc, #232]	; (8006fa4 <_tx_thread_system_suspend+0x244>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d317      	bcc.n	8006ef6 <_tx_thread_system_suspend+0x196>
 8006ec6:	4b38      	ldr	r3, [pc, #224]	; (8006fa8 <_tx_thread_system_suspend+0x248>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006ece:	4a30      	ldr	r2, [pc, #192]	; (8006f90 <_tx_thread_system_suspend+0x230>)
 8006ed0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006ed4:	6013      	str	r3, [r2, #0]
 8006ed6:	4b35      	ldr	r3, [pc, #212]	; (8006fac <_tx_thread_system_suspend+0x24c>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006ede:	621a      	str	r2, [r3, #32]
 8006ee0:	4b33      	ldr	r3, [pc, #204]	; (8006fb0 <_tx_thread_system_suspend+0x250>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d00f      	beq.n	8006f08 <_tx_thread_system_suspend+0x1a8>
 8006ee8:	4b31      	ldr	r3, [pc, #196]	; (8006fb0 <_tx_thread_system_suspend+0x250>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a2f      	ldr	r2, [pc, #188]	; (8006fac <_tx_thread_system_suspend+0x24c>)
 8006eee:	6812      	ldr	r2, [r2, #0]
 8006ef0:	4610      	mov	r0, r2
 8006ef2:	4798      	blx	r3
 8006ef4:	e008      	b.n	8006f08 <_tx_thread_system_suspend+0x1a8>
 8006ef6:	4a26      	ldr	r2, [pc, #152]	; (8006f90 <_tx_thread_system_suspend+0x230>)
 8006ef8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006efc:	6013      	str	r3, [r2, #0]
 8006efe:	4b2b      	ldr	r3, [pc, #172]	; (8006fac <_tx_thread_system_suspend+0x24c>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006f06:	621a      	str	r2, [r3, #32]
#ifdef TX_ENABLE_EVENT_TRACE

        /* Save the time stamp for later comparison to verify that
           the event hasn't been overwritten by the time we have
           computed the next thread to execute.  */
        if (entry_ptr != TX_NULL)
 8006f08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d004      	beq.n	8006f1a <_tx_thread_system_suspend+0x1ba>
        {

            /* Save time stamp.  */
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
 8006f10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f24:	60fb      	str	r3, [r7, #12]

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a1b      	ldr	r3, [r3, #32]
 8006f2a:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8006f2c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d043      	beq.n	8006fbc <_tx_thread_system_suspend+0x25c>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f38:	667b      	str	r3, [r7, #100]	; 0x64

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8006f3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f3c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006f3e:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8006f40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f42:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006f44:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	4a1a      	ldr	r2, [pc, #104]	; (8006fb4 <_tx_thread_system_suspend+0x254>)
 8006f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	f040 80a5 	bne.w	80070a0 <_tx_thread_system_suspend+0x340>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	4916      	ldr	r1, [pc, #88]	; (8006fb4 <_tx_thread_system_suspend+0x254>)
 8006f5a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006f5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                /* Calculate the index into the bit map array.  */
                map_index =  priority/((UINT) 32);
#endif

                /* Check for a thread preempted that had preemption threshold set.  */
                if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8006f60:	4b15      	ldr	r3, [pc, #84]	; (8006fb8 <_tx_thread_system_suspend+0x258>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	f000 809b 	beq.w	80070a0 <_tx_thread_system_suspend+0x340>
                {

                    /* Ensure that this thread's priority is clear in the preempt map.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f72:	677b      	str	r3, [r7, #116]	; 0x74
                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 8006f74:	4b10      	ldr	r3, [pc, #64]	; (8006fb8 <_tx_thread_system_suspend+0x258>)
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f7a:	43db      	mvns	r3, r3
 8006f7c:	4013      	ands	r3, r2
 8006f7e:	4a0e      	ldr	r2, [pc, #56]	; (8006fb8 <_tx_thread_system_suspend+0x258>)
 8006f80:	6013      	str	r3, [r2, #0]
 8006f82:	e08d      	b.n	80070a0 <_tx_thread_system_suspend+0x340>
 8006f84:	24010af8 	.word	0x24010af8
 8006f88:	24010b90 	.word	0x24010b90
 8006f8c:	24010af4 	.word	0x24010af4
 8006f90:	2401107c 	.word	0x2401107c
 8006f94:	24011088 	.word	0x24011088
 8006f98:	2400fa10 	.word	0x2400fa10
 8006f9c:	e0001004 	.word	0xe0001004
 8006fa0:	24010afc 	.word	0x24010afc
 8006fa4:	24011074 	.word	0x24011074
 8006fa8:	24011090 	.word	0x24011090
 8006fac:	24011084 	.word	0x24011084
 8006fb0:	24011080 	.word	0x24011080
 8006fb4:	24010a5c 	.word	0x24010a5c
 8006fb8:	24010b04 	.word	0x24010b04
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	4aa2      	ldr	r2, [pc, #648]	; (8007248 <_tx_thread_system_suspend+0x4e8>)
 8006fc0:	2100      	movs	r1, #0
 8006fc2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2201      	movs	r2, #1
 8006fca:	fa02 f303 	lsl.w	r3, r2, r3
 8006fce:	677b      	str	r3, [r7, #116]	; 0x74
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8006fd0:	4b9e      	ldr	r3, [pc, #632]	; (800724c <_tx_thread_system_suspend+0x4ec>)
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fd6:	43db      	mvns	r3, r3
 8006fd8:	4013      	ands	r3, r2
 8006fda:	4a9c      	ldr	r2, [pc, #624]	; (800724c <_tx_thread_system_suspend+0x4ec>)
 8006fdc:	6013      	str	r3, [r2, #0]
#endif

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

            /* Check for a thread preempted that had preemption-threshold set.  */
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8006fde:	4b9c      	ldr	r3, [pc, #624]	; (8007250 <_tx_thread_system_suspend+0x4f0>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00b      	beq.n	8006ffe <_tx_thread_system_suspend+0x29e>
            {

                /* Ensure that this thread's priority is clear in the preempt map.  */
                TX_MOD32_BIT_SET(priority, priority_bit)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2201      	movs	r2, #1
 8006fea:	fa02 f303 	lsl.w	r3, r2, r3
 8006fee:	677b      	str	r3, [r7, #116]	; 0x74
                _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 8006ff0:	4b97      	ldr	r3, [pc, #604]	; (8007250 <_tx_thread_system_suspend+0x4f0>)
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ff6:	43db      	mvns	r3, r3
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	4a95      	ldr	r2, [pc, #596]	; (8007250 <_tx_thread_system_suspend+0x4f0>)
 8006ffc:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8006ffe:	2300      	movs	r3, #0
 8007000:	673b      	str	r3, [r7, #112]	; 0x70
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8007002:	4b92      	ldr	r3, [pc, #584]	; (800724c <_tx_thread_system_suspend+0x4ec>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8007008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800700a:	2b00      	cmp	r3, #0
 800700c:	d13b      	bne.n	8007086 <_tx_thread_system_suspend+0x326>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800700e:	4b91      	ldr	r3, [pc, #580]	; (8007254 <_tx_thread_system_suspend+0x4f4>)
 8007010:	2220      	movs	r2, #32
 8007012:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8007014:	4b90      	ldr	r3, [pc, #576]	; (8007258 <_tx_thread_system_suspend+0x4f8>)
 8007016:	2200      	movs	r2, #0
 8007018:	601a      	str	r2, [r3, #0]
#ifdef TX_ENABLE_EVENT_TRACE

                /* Check that the event time stamp is unchanged.  A different
                   timestamp means that a later event wrote over the thread
                   suspend event. In that case, do nothing here.  */
                if (entry_ptr != TX_NULL)
 800701a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00a      	beq.n	8007038 <_tx_thread_system_suspend+0x2d8>
                {

                    /* Is the timestamp the same?  */
                    if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 8007022:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800702c:	429a      	cmp	r2, r3
 800702e:	d103      	bne.n	8007038 <_tx_thread_system_suspend+0x2d8>
                    {

                        /* Timestamp is the same, set the "next thread pointer" to the new value of the
                           next thread to execute. This can be used by the trace analysis tool to keep
                           track of next thread execution.  */
                        entry_ptr -> tx_trace_buffer_entry_information_field_4 =  0;
 8007030:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007034:	2200      	movs	r2, #0
 8007036:	61da      	str	r2, [r3, #28]
 8007038:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800703c:	657b      	str	r3, [r7, #84]	; 0x54
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800703e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007040:	f383 8810 	msr	PRIMASK, r3
}
 8007044:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8007046:	4b85      	ldr	r3, [pc, #532]	; (800725c <_tx_thread_system_suspend+0x4fc>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	66bb      	str	r3, [r7, #104]	; 0x68
                if (combined_flags == ((ULONG) 0))
 800704c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800704e:	2b00      	cmp	r3, #0
 8007050:	f040 80f1 	bne.w	8007236 <_tx_thread_system_suspend+0x4d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8007054:	4b82      	ldr	r3, [pc, #520]	; (8007260 <_tx_thread_system_suspend+0x500>)
 8007056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800705a:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800705c:	f3ef 8305 	mrs	r3, IPSR
 8007060:	653b      	str	r3, [r7, #80]	; 0x50
    return(ipsr_value);
 8007062:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    if (__get_ipsr_value() == 0)
 8007064:	2b00      	cmp	r3, #0
 8007066:	d10c      	bne.n	8007082 <_tx_thread_system_suspend+0x322>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007068:	f3ef 8310 	mrs	r3, PRIMASK
 800706c:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 800706e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
        interrupt_save = __get_interrupt_posture();
 8007070:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSIE  i": : : "memory");
 8007072:	b662      	cpsie	i
}
 8007074:	bf00      	nop
 8007076:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007078:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800707a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800707c:	f383 8810 	msr	PRIMASK, r3
}
 8007080:	bf00      	nop
}
 8007082:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8007084:	e0d7      	b.n	8007236 <_tx_thread_system_suspend+0x4d6>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8007086:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007088:	fa93 f3a3 	rbit	r3, r3
 800708c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800708e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007090:	fab3 f383 	clz	r3, r3
 8007094:	677b      	str	r3, [r7, #116]	; 0x74

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8007096:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007098:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800709a:	4413      	add	r3, r2
 800709c:	4a6d      	ldr	r2, [pc, #436]	; (8007254 <_tx_thread_system_suspend+0x4f4>)
 800709e:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 80070a0:	4b6d      	ldr	r3, [pc, #436]	; (8007258 <_tx_thread_system_suspend+0x4f8>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	429a      	cmp	r2, r3
 80070a8:	f040 8088 	bne.w	80071bc <_tx_thread_system_suspend+0x45c>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 80070ac:	4b69      	ldr	r3, [pc, #420]	; (8007254 <_tx_thread_system_suspend+0x4f4>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a65      	ldr	r2, [pc, #404]	; (8007248 <_tx_thread_system_suspend+0x4e8>)
 80070b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070b6:	4a68      	ldr	r2, [pc, #416]	; (8007258 <_tx_thread_system_suspend+0x4f8>)
 80070b8:	6013      	str	r3, [r2, #0]

            /* Determine if a previous thread with preemption-threshold was preempted.  */
#if TX_MAX_PRIORITIES > 32
            if (_tx_thread_preempted_map_active != ((ULONG) 0))
#else
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 80070ba:	4b65      	ldr	r3, [pc, #404]	; (8007250 <_tx_thread_system_suspend+0x4f0>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d045      	beq.n	800714e <_tx_thread_system_suspend+0x3ee>
            {

                /* Yes, there was a thread preempted when it was using preemption-threshold.  */

                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 80070c2:	4b66      	ldr	r3, [pc, #408]	; (800725c <_tx_thread_system_suspend+0x4fc>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	3301      	adds	r3, #1
 80070c8:	4a64      	ldr	r2, [pc, #400]	; (800725c <_tx_thread_system_suspend+0x4fc>)
 80070ca:	6013      	str	r3, [r2, #0]
 80070cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070d0:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80070d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d4:	f383 8810 	msr	PRIMASK, r3
}
 80070d8:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80070da:	f3ef 8310 	mrs	r3, PRIMASK
 80070de:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 80070e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 80070e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 80070e4:	b672      	cpsid	i
    return(int_posture);
 80070e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

                /* Interrupts are enabled briefly here to keep the interrupt
                   lockout time deterministic.  */

                /* Disable interrupts again.  */
                TX_DISABLE
 80070e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 80070ec:	4b5b      	ldr	r3, [pc, #364]	; (800725c <_tx_thread_system_suspend+0x4fc>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	3b01      	subs	r3, #1
 80070f2:	4a5a      	ldr	r2, [pc, #360]	; (800725c <_tx_thread_system_suspend+0x4fc>)
 80070f4:	6013      	str	r3, [r2, #0]
                /* Calculate the base priority as well.  */
                base_priority =  map_index * ((UINT) 32);
#else

                /* Setup the base priority to zero.  */
                base_priority =   ((UINT) 0);
 80070f6:	2300      	movs	r3, #0
 80070f8:	673b      	str	r3, [r7, #112]	; 0x70
#endif

                /* Setup temporary preempted map.  */
                priority_map =  _tx_thread_preempted_maps[MAP_INDEX];
 80070fa:	4b55      	ldr	r3, [pc, #340]	; (8007250 <_tx_thread_system_suspend+0x4f0>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	66fb      	str	r3, [r7, #108]	; 0x6c

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8007100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007102:	fa93 f3a3 	rbit	r3, r3
 8007106:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800710a:	fab3 f383 	clz	r3, r3
 800710e:	677b      	str	r3, [r7, #116]	; 0x74

                /* Setup the highest priority preempted thread.  */
                priority =  base_priority + ((UINT) priority_bit);
 8007110:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007112:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007114:	4413      	add	r3, r2
 8007116:	60fb      	str	r3, [r7, #12]

                /* Determine if the next highest priority thread is above the highest priority threshold value.  */
                if (_tx_thread_highest_priority >= (_tx_thread_priority_list[priority] -> tx_thread_preempt_threshold))
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	4a4b      	ldr	r2, [pc, #300]	; (8007248 <_tx_thread_system_suspend+0x4e8>)
 800711c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007120:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007122:	4b4c      	ldr	r3, [pc, #304]	; (8007254 <_tx_thread_system_suspend+0x4f4>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	429a      	cmp	r2, r3
 8007128:	d811      	bhi.n	800714e <_tx_thread_system_suspend+0x3ee>
                {

                    /* Thread not allowed to execute until earlier preempted thread finishes or lowers its
                       preemption-threshold.  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[priority];
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	4a46      	ldr	r2, [pc, #280]	; (8007248 <_tx_thread_system_suspend+0x4e8>)
 800712e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007132:	4a49      	ldr	r2, [pc, #292]	; (8007258 <_tx_thread_system_suspend+0x4f8>)
 8007134:	6013      	str	r3, [r2, #0]

                    /* Clear the corresponding bit in the preempted map, since the preemption has been restored.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2201      	movs	r2, #1
 800713a:	fa02 f303 	lsl.w	r3, r2, r3
 800713e:	677b      	str	r3, [r7, #116]	; 0x74
                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 8007140:	4b43      	ldr	r3, [pc, #268]	; (8007250 <_tx_thread_system_suspend+0x4f0>)
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007146:	43db      	mvns	r3, r3
 8007148:	4013      	ands	r3, r2
 800714a:	4a41      	ldr	r2, [pc, #260]	; (8007250 <_tx_thread_system_suspend+0x4f0>)
 800714c:	6013      	str	r3, [r2, #0]
#ifdef TX_ENABLE_EVENT_TRACE

            /* Check that the event time stamp is unchanged.  A different
               timestamp means that a later event wrote over the thread
               suspend event. In that case, do nothing here.  */
            if (entry_ptr != TX_NULL)
 800714e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007152:	2b00      	cmp	r3, #0
 8007154:	d00c      	beq.n	8007170 <_tx_thread_system_suspend+0x410>
            {

                /* Is the timestamp the same?  */
                if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 8007156:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800715a:	68db      	ldr	r3, [r3, #12]
 800715c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007160:	429a      	cmp	r2, r3
 8007162:	d105      	bne.n	8007170 <_tx_thread_system_suspend+0x410>
                {

                    /* Timestamp is the same, set the "next thread pointer" to the new value of the
                       next thread to execute. This can be used by the trace analysis tool to keep
                       track of next thread execution.  */
                    entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 8007164:	4b3c      	ldr	r3, [pc, #240]	; (8007258 <_tx_thread_system_suspend+0x4f8>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	461a      	mov	r2, r3
 800716a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800716e:	61da      	str	r2, [r3, #28]
 8007170:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007174:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007178:	f383 8810 	msr	PRIMASK, r3
}
 800717c:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800717e:	4b37      	ldr	r3, [pc, #220]	; (800725c <_tx_thread_system_suspend+0x4fc>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	66bb      	str	r3, [r7, #104]	; 0x68
            if (combined_flags == ((ULONG) 0))
 8007184:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007186:	2b00      	cmp	r3, #0
 8007188:	d157      	bne.n	800723a <_tx_thread_system_suspend+0x4da>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800718a:	4b35      	ldr	r3, [pc, #212]	; (8007260 <_tx_thread_system_suspend+0x500>)
 800718c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007190:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007192:	f3ef 8305 	mrs	r3, IPSR
 8007196:	633b      	str	r3, [r7, #48]	; 0x30
    return(ipsr_value);
 8007198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    if (__get_ipsr_value() == 0)
 800719a:	2b00      	cmp	r3, #0
 800719c:	d10c      	bne.n	80071b8 <_tx_thread_system_suspend+0x458>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800719e:	f3ef 8310 	mrs	r3, PRIMASK
 80071a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80071a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
        interrupt_save = __get_interrupt_posture();
 80071a6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSIE  i": : : "memory");
 80071a8:	b662      	cpsie	i
}
 80071aa:	bf00      	nop
 80071ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ae:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80071b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b2:	f383 8810 	msr	PRIMASK, r3
}
 80071b6:	bf00      	nop
}
 80071b8:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 80071ba:	e03e      	b.n	800723a <_tx_thread_system_suspend+0x4da>
#ifdef TX_ENABLE_EVENT_TRACE

         /* Check that the event time stamp is unchanged.  A different
            timestamp means that a later event wrote over the thread
            suspend event. In that case, do nothing here.  */
         if (entry_ptr != TX_NULL)
 80071bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d00c      	beq.n	80071de <_tx_thread_system_suspend+0x47e>
         {

            /* Is the timestamp the same?  */
            if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 80071c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d105      	bne.n	80071de <_tx_thread_system_suspend+0x47e>
                   next thread to execute. This can be used by the trace analysis tool to keep
                   track of next thread execution.  */
#ifdef TX_MISRA_ENABLE
                entry_ptr -> tx_trace_buffer_entry_info_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
#else
                entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 80071d2:	4b21      	ldr	r3, [pc, #132]	; (8007258 <_tx_thread_system_suspend+0x4f8>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	461a      	mov	r2, r3
 80071d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80071dc:	61da      	str	r2, [r3, #28]
 80071de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071e2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80071e4:	6a3b      	ldr	r3, [r7, #32]
 80071e6:	f383 8810 	msr	PRIMASK, r3
}
 80071ea:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 80071ec:	4b1a      	ldr	r3, [pc, #104]	; (8007258 <_tx_thread_system_suspend+0x4f8>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d022      	beq.n	800723e <_tx_thread_system_suspend+0x4de>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80071f8:	4b18      	ldr	r3, [pc, #96]	; (800725c <_tx_thread_system_suspend+0x4fc>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	66bb      	str	r3, [r7, #104]	; 0x68
        if (combined_flags == ((ULONG) 0))
 80071fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007200:	2b00      	cmp	r3, #0
 8007202:	d11c      	bne.n	800723e <_tx_thread_system_suspend+0x4de>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8007204:	4b16      	ldr	r3, [pc, #88]	; (8007260 <_tx_thread_system_suspend+0x500>)
 8007206:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800720a:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800720c:	f3ef 8305 	mrs	r3, IPSR
 8007210:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8007212:	69fb      	ldr	r3, [r7, #28]
    if (__get_ipsr_value() == 0)
 8007214:	2b00      	cmp	r3, #0
 8007216:	d10c      	bne.n	8007232 <_tx_thread_system_suspend+0x4d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007218:	f3ef 8310 	mrs	r3, PRIMASK
 800721c:	61bb      	str	r3, [r7, #24]
    return(posture);
 800721e:	69bb      	ldr	r3, [r7, #24]
        interrupt_save = __get_interrupt_posture();
 8007220:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8007222:	b662      	cpsie	i
}
 8007224:	bf00      	nop
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	f383 8810 	msr	PRIMASK, r3
}
 8007230:	bf00      	nop
}
 8007232:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8007234:	e003      	b.n	800723e <_tx_thread_system_suspend+0x4de>
                return;
 8007236:	bf00      	nop
 8007238:	e002      	b.n	8007240 <_tx_thread_system_suspend+0x4e0>
            return;
 800723a:	bf00      	nop
 800723c:	e000      	b.n	8007240 <_tx_thread_system_suspend+0x4e0>
    return;
 800723e:	bf00      	nop
}
 8007240:	37a0      	adds	r7, #160	; 0xa0
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop
 8007248:	24010a5c 	.word	0x24010a5c
 800724c:	24010ae0 	.word	0x24010ae0
 8007250:	24010b04 	.word	0x24010b04
 8007254:	24010b00 	.word	0x24010b00
 8007258:	24010afc 	.word	0x24010afc
 800725c:	24010af4 	.word	0x24010af4
 8007260:	e000ed04 	.word	0xe000ed04

08007264 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b08e      	sub	sp, #56	; 0x38
 8007268:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800726a:	4b5f      	ldr	r3, [pc, #380]	; (80073e8 <_tx_thread_time_slice+0x184>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007270:	f3ef 8310 	mrs	r3, PRIMASK
 8007274:	61bb      	str	r3, [r7, #24]
    return(posture);
 8007276:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8007278:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800727a:	b672      	cpsid	i
    return(int_posture);
 800727c:	697b      	ldr	r3, [r7, #20]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 800727e:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8007280:	4b5a      	ldr	r3, [pc, #360]	; (80073ec <_tx_thread_time_slice+0x188>)
 8007282:	2200      	movs	r2, #0
 8007284:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d024      	beq.n	80072d6 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007290:	2b00      	cmp	r3, #0
 8007292:	d120      	bne.n	80072d6 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	69d2      	ldr	r2, [r2, #28]
 800729a:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	699b      	ldr	r3, [r3, #24]
 80072a0:	4a53      	ldr	r2, [pc, #332]	; (80073f0 <_tx_thread_time_slice+0x18c>)
 80072a2:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6a1a      	ldr	r2, [r3, #32]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d013      	beq.n	80072d6 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d10d      	bne.n	80072d6 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c0:	6a12      	ldr	r2, [r2, #32]
 80072c2:	494c      	ldr	r1, [pc, #304]	; (80073f4 <_tx_thread_time_slice+0x190>)
 80072c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 80072c8:	4b4b      	ldr	r3, [pc, #300]	; (80073f8 <_tx_thread_time_slice+0x194>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a49      	ldr	r2, [pc, #292]	; (80073f4 <_tx_thread_time_slice+0x190>)
 80072ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072d2:	4a4a      	ldr	r2, [pc, #296]	; (80073fc <_tx_thread_time_slice+0x198>)
 80072d4:	6013      	str	r3, [r2, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80072d6:	f3ef 8305 	mrs	r3, IPSR
 80072da:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80072dc:	693a      	ldr	r2, [r7, #16]
    }

#ifdef TX_ENABLE_EVENT_TRACE

    /* Pickup the volatile information.  */
    system_state =  TX_THREAD_GET_SYSTEM_STATE();
 80072de:	4b48      	ldr	r3, [pc, #288]	; (8007400 <_tx_thread_time_slice+0x19c>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4313      	orrs	r3, r2
 80072e4:	62bb      	str	r3, [r7, #40]	; 0x28
    preempt_disable =  _tx_thread_preempt_disable;
 80072e6:	4b47      	ldr	r3, [pc, #284]	; (8007404 <_tx_thread_time_slice+0x1a0>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	627b      	str	r3, [r7, #36]	; 0x24

    /* Insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_TIME_SLICE, _tx_thread_execute_ptr, system_state, preempt_disable, TX_POINTER_TO_ULONG_CONVERT(&thread_ptr), TX_TRACE_INTERNAL_EVENTS)
 80072ec:	4b46      	ldr	r3, [pc, #280]	; (8007408 <_tx_thread_time_slice+0x1a4>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	623b      	str	r3, [r7, #32]
 80072f2:	6a3b      	ldr	r3, [r7, #32]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d06d      	beq.n	80073d4 <_tx_thread_time_slice+0x170>
 80072f8:	4b44      	ldr	r3, [pc, #272]	; (800740c <_tx_thread_time_slice+0x1a8>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 0301 	and.w	r3, r3, #1
 8007300:	2b00      	cmp	r3, #0
 8007302:	d067      	beq.n	80073d4 <_tx_thread_time_slice+0x170>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007304:	f3ef 8305 	mrs	r3, IPSR
 8007308:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	4b3c      	ldr	r3, [pc, #240]	; (8007400 <_tx_thread_time_slice+0x19c>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4313      	orrs	r3, r2
 8007312:	61fb      	str	r3, [r7, #28]
 8007314:	4b34      	ldr	r3, [pc, #208]	; (80073e8 <_tx_thread_time_slice+0x184>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	633b      	str	r3, [r7, #48]	; 0x30
 800731a:	69fb      	ldr	r3, [r7, #28]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d10b      	bne.n	8007338 <_tx_thread_time_slice+0xd4>
 8007320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007324:	637b      	str	r3, [r7, #52]	; 0x34
 8007326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800732a:	041a      	lsls	r2, r3, #16
 800732c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800732e:	4313      	orrs	r3, r2
 8007330:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007334:	637b      	str	r3, [r7, #52]	; 0x34
 8007336:	e00e      	b.n	8007356 <_tx_thread_time_slice+0xf2>
 8007338:	69fb      	ldr	r3, [r7, #28]
 800733a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800733e:	d205      	bcs.n	800734c <_tx_thread_time_slice+0xe8>
 8007340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007342:	637b      	str	r3, [r7, #52]	; 0x34
 8007344:	f04f 33ff 	mov.w	r3, #4294967295
 8007348:	633b      	str	r3, [r7, #48]	; 0x30
 800734a:	e004      	b.n	8007356 <_tx_thread_time_slice+0xf2>
 800734c:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8007350:	633b      	str	r3, [r7, #48]	; 0x30
 8007352:	2300      	movs	r3, #0
 8007354:	637b      	str	r3, [r7, #52]	; 0x34
 8007356:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007358:	6a3b      	ldr	r3, [r7, #32]
 800735a:	601a      	str	r2, [r3, #0]
 800735c:	6a3b      	ldr	r3, [r7, #32]
 800735e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007360:	605a      	str	r2, [r3, #4]
 8007362:	6a3b      	ldr	r3, [r7, #32]
 8007364:	2205      	movs	r2, #5
 8007366:	609a      	str	r2, [r3, #8]
 8007368:	4b29      	ldr	r3, [pc, #164]	; (8007410 <_tx_thread_time_slice+0x1ac>)
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	6a3b      	ldr	r3, [r7, #32]
 800736e:	60da      	str	r2, [r3, #12]
 8007370:	4b22      	ldr	r3, [pc, #136]	; (80073fc <_tx_thread_time_slice+0x198>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	461a      	mov	r2, r3
 8007376:	6a3b      	ldr	r3, [r7, #32]
 8007378:	611a      	str	r2, [r3, #16]
 800737a:	6a3b      	ldr	r3, [r7, #32]
 800737c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800737e:	615a      	str	r2, [r3, #20]
 8007380:	6a3b      	ldr	r3, [r7, #32]
 8007382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007384:	619a      	str	r2, [r3, #24]
 8007386:	1d3a      	adds	r2, r7, #4
 8007388:	6a3b      	ldr	r3, [r7, #32]
 800738a:	61da      	str	r2, [r3, #28]
 800738c:	6a3b      	ldr	r3, [r7, #32]
 800738e:	3320      	adds	r3, #32
 8007390:	623b      	str	r3, [r7, #32]
 8007392:	4b20      	ldr	r3, [pc, #128]	; (8007414 <_tx_thread_time_slice+0x1b0>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	6a3a      	ldr	r2, [r7, #32]
 8007398:	429a      	cmp	r2, r3
 800739a:	d314      	bcc.n	80073c6 <_tx_thread_time_slice+0x162>
 800739c:	4b1e      	ldr	r3, [pc, #120]	; (8007418 <_tx_thread_time_slice+0x1b4>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	623b      	str	r3, [r7, #32]
 80073a2:	4a19      	ldr	r2, [pc, #100]	; (8007408 <_tx_thread_time_slice+0x1a4>)
 80073a4:	6a3b      	ldr	r3, [r7, #32]
 80073a6:	6013      	str	r3, [r2, #0]
 80073a8:	4b1c      	ldr	r3, [pc, #112]	; (800741c <_tx_thread_time_slice+0x1b8>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	6a3a      	ldr	r2, [r7, #32]
 80073ae:	621a      	str	r2, [r3, #32]
 80073b0:	4b1b      	ldr	r3, [pc, #108]	; (8007420 <_tx_thread_time_slice+0x1bc>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d00d      	beq.n	80073d4 <_tx_thread_time_slice+0x170>
 80073b8:	4b19      	ldr	r3, [pc, #100]	; (8007420 <_tx_thread_time_slice+0x1bc>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a17      	ldr	r2, [pc, #92]	; (800741c <_tx_thread_time_slice+0x1b8>)
 80073be:	6812      	ldr	r2, [r2, #0]
 80073c0:	4610      	mov	r0, r2
 80073c2:	4798      	blx	r3
 80073c4:	e006      	b.n	80073d4 <_tx_thread_time_slice+0x170>
 80073c6:	4a10      	ldr	r2, [pc, #64]	; (8007408 <_tx_thread_time_slice+0x1a4>)
 80073c8:	6a3b      	ldr	r3, [r7, #32]
 80073ca:	6013      	str	r3, [r2, #0]
 80073cc:	4b13      	ldr	r3, [pc, #76]	; (800741c <_tx_thread_time_slice+0x1b8>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	6a3a      	ldr	r2, [r7, #32]
 80073d2:	621a      	str	r2, [r3, #32]
 80073d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	f383 8810 	msr	PRIMASK, r3
}
 80073de:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 80073e0:	bf00      	nop
 80073e2:	3738      	adds	r7, #56	; 0x38
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	24010af8 	.word	0x24010af8
 80073ec:	24011064 	.word	0x24011064
 80073f0:	24010b90 	.word	0x24010b90
 80073f4:	24010a5c 	.word	0x24010a5c
 80073f8:	24010b00 	.word	0x24010b00
 80073fc:	24010afc 	.word	0x24010afc
 8007400:	2400fa10 	.word	0x2400fa10
 8007404:	24010af4 	.word	0x24010af4
 8007408:	2401107c 	.word	0x2401107c
 800740c:	24011088 	.word	0x24011088
 8007410:	e0001004 	.word	0xe0001004
 8007414:	24011074 	.word	0x24011074
 8007418:	24011090 	.word	0x24011090
 800741c:	24011084 	.word	0x24011084
 8007420:	24011080 	.word	0x24011080

08007424 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b08a      	sub	sp, #40	; 0x28
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007430:	f3ef 8310 	mrs	r3, PRIMASK
 8007434:	617b      	str	r3, [r7, #20]
    return(posture);
 8007436:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8007438:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800743a:	b672      	cpsid	i
    return(int_posture);
 800743c:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800743e:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8007440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007444:	2b04      	cmp	r3, #4
 8007446:	d10e      	bne.n	8007466 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8007448:	4b13      	ldr	r3, [pc, #76]	; (8007498 <_tx_thread_timeout+0x74>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	3301      	adds	r3, #1
 800744e:	4a12      	ldr	r2, [pc, #72]	; (8007498 <_tx_thread_timeout+0x74>)
 8007450:	6013      	str	r3, [r2, #0]
 8007452:	6a3b      	ldr	r3, [r7, #32]
 8007454:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f383 8810 	msr	PRIMASK, r3
}
 800745c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 800745e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007460:	f7ff fab0 	bl	80069c4 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8007464:	e013      	b.n	800748e <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8007466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007468:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800746a:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800746c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007472:	61bb      	str	r3, [r7, #24]
 8007474:	6a3b      	ldr	r3, [r7, #32]
 8007476:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	f383 8810 	msr	PRIMASK, r3
}
 800747e:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d003      	beq.n	800748e <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	69b9      	ldr	r1, [r7, #24]
 800748a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800748c:	4798      	blx	r3
}
 800748e:	bf00      	nop
 8007490:	3728      	adds	r7, #40	; 0x28
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	24010af4 	.word	0x24010af4

0800749c <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80074a2:	f3ef 8310 	mrs	r3, PRIMASK
 80074a6:	607b      	str	r3, [r7, #4]
    return(posture);
 80074a8:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 80074aa:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 80074ac:	b672      	cpsid	i
    return(int_posture);
 80074ae:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 80074b0:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 80074b2:	4b09      	ldr	r3, [pc, #36]	; (80074d8 <_tx_timer_expiration_process+0x3c>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	3301      	adds	r3, #1
 80074b8:	4a07      	ldr	r2, [pc, #28]	; (80074d8 <_tx_timer_expiration_process+0x3c>)
 80074ba:	6013      	str	r3, [r2, #0]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	f383 8810 	msr	PRIMASK, r3
}
 80074c6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 80074c8:	4804      	ldr	r0, [pc, #16]	; (80074dc <_tx_timer_expiration_process+0x40>)
 80074ca:	f7ff fa7b 	bl	80069c4 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80074ce:	bf00      	nop
 80074d0:	3710      	adds	r7, #16
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	24010af4 	.word	0x24010af4
 80074dc:	24010b9c 	.word	0x24010b9c

080074e0 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 80074e0:	b590      	push	{r4, r7, lr}
 80074e2:	b089      	sub	sp, #36	; 0x24
 80074e4:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 80074e6:	4b28      	ldr	r3, [pc, #160]	; (8007588 <_tx_timer_initialize+0xa8>)
 80074e8:	2200      	movs	r2, #0
 80074ea:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 80074ec:	4b27      	ldr	r3, [pc, #156]	; (800758c <_tx_timer_initialize+0xac>)
 80074ee:	2200      	movs	r2, #0
 80074f0:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 80074f2:	4b27      	ldr	r3, [pc, #156]	; (8007590 <_tx_timer_initialize+0xb0>)
 80074f4:	2200      	movs	r2, #0
 80074f6:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 80074f8:	4b26      	ldr	r3, [pc, #152]	; (8007594 <_tx_timer_initialize+0xb4>)
 80074fa:	2200      	movs	r2, #0
 80074fc:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 80074fe:	4b26      	ldr	r3, [pc, #152]	; (8007598 <_tx_timer_initialize+0xb8>)
 8007500:	2200      	movs	r2, #0
 8007502:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8007504:	2280      	movs	r2, #128	; 0x80
 8007506:	2100      	movs	r1, #0
 8007508:	4824      	ldr	r0, [pc, #144]	; (800759c <_tx_timer_initialize+0xbc>)
 800750a:	f000 fffd 	bl	8008508 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800750e:	4b24      	ldr	r3, [pc, #144]	; (80075a0 <_tx_timer_initialize+0xc0>)
 8007510:	4a22      	ldr	r2, [pc, #136]	; (800759c <_tx_timer_initialize+0xbc>)
 8007512:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8007514:	4b23      	ldr	r3, [pc, #140]	; (80075a4 <_tx_timer_initialize+0xc4>)
 8007516:	4a21      	ldr	r2, [pc, #132]	; (800759c <_tx_timer_initialize+0xbc>)
 8007518:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800751a:	4b23      	ldr	r3, [pc, #140]	; (80075a8 <_tx_timer_initialize+0xc8>)
 800751c:	4a23      	ldr	r2, [pc, #140]	; (80075ac <_tx_timer_initialize+0xcc>)
 800751e:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8007520:	4b21      	ldr	r3, [pc, #132]	; (80075a8 <_tx_timer_initialize+0xc8>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	3304      	adds	r3, #4
 8007526:	4a20      	ldr	r2, [pc, #128]	; (80075a8 <_tx_timer_initialize+0xc8>)
 8007528:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800752a:	4b21      	ldr	r3, [pc, #132]	; (80075b0 <_tx_timer_initialize+0xd0>)
 800752c:	4a21      	ldr	r2, [pc, #132]	; (80075b4 <_tx_timer_initialize+0xd4>)
 800752e:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8007530:	4b21      	ldr	r3, [pc, #132]	; (80075b8 <_tx_timer_initialize+0xd8>)
 8007532:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007536:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8007538:	4b20      	ldr	r3, [pc, #128]	; (80075bc <_tx_timer_initialize+0xdc>)
 800753a:	2200      	movs	r2, #0
 800753c:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800753e:	4b1c      	ldr	r3, [pc, #112]	; (80075b0 <_tx_timer_initialize+0xd0>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a1d      	ldr	r2, [pc, #116]	; (80075b8 <_tx_timer_initialize+0xd8>)
 8007544:	6812      	ldr	r2, [r2, #0]
 8007546:	491d      	ldr	r1, [pc, #116]	; (80075bc <_tx_timer_initialize+0xdc>)
 8007548:	6809      	ldr	r1, [r1, #0]
 800754a:	481c      	ldr	r0, [pc, #112]	; (80075bc <_tx_timer_initialize+0xdc>)
 800754c:	6800      	ldr	r0, [r0, #0]
 800754e:	2400      	movs	r4, #0
 8007550:	9405      	str	r4, [sp, #20]
 8007552:	2400      	movs	r4, #0
 8007554:	9404      	str	r4, [sp, #16]
 8007556:	9003      	str	r0, [sp, #12]
 8007558:	9102      	str	r1, [sp, #8]
 800755a:	9201      	str	r2, [sp, #4]
 800755c:	9300      	str	r3, [sp, #0]
 800755e:	4b18      	ldr	r3, [pc, #96]	; (80075c0 <_tx_timer_initialize+0xe0>)
 8007560:	4a18      	ldr	r2, [pc, #96]	; (80075c4 <_tx_timer_initialize+0xe4>)
 8007562:	4919      	ldr	r1, [pc, #100]	; (80075c8 <_tx_timer_initialize+0xe8>)
 8007564:	4819      	ldr	r0, [pc, #100]	; (80075cc <_tx_timer_initialize+0xec>)
 8007566:	f7fe feed 	bl	8006344 <_tx_thread_create>
 800756a:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d1e5      	bne.n	800753e <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8007572:	4b17      	ldr	r3, [pc, #92]	; (80075d0 <_tx_timer_initialize+0xf0>)
 8007574:	2200      	movs	r2, #0
 8007576:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8007578:	4b16      	ldr	r3, [pc, #88]	; (80075d4 <_tx_timer_initialize+0xf4>)
 800757a:	2200      	movs	r2, #0
 800757c:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800757e:	bf00      	nop
 8007580:	370c      	adds	r7, #12
 8007582:	46bd      	mov	sp, r7
 8007584:	bd90      	pop	{r4, r7, pc}
 8007586:	bf00      	nop
 8007588:	24011068 	.word	0x24011068
 800758c:	24010b90 	.word	0x24010b90
 8007590:	24011064 	.word	0x24011064
 8007594:	24010b8c 	.word	0x24010b8c
 8007598:	24010c4c 	.word	0x24010c4c
 800759c:	24010b0c 	.word	0x24010b0c
 80075a0:	24010c50 	.word	0x24010c50
 80075a4:	24010b08 	.word	0x24010b08
 80075a8:	24010b98 	.word	0x24010b98
 80075ac:	24010b88 	.word	0x24010b88
 80075b0:	2401105c 	.word	0x2401105c
 80075b4:	24010c5c 	.word	0x24010c5c
 80075b8:	24010c58 	.word	0x24010c58
 80075bc:	24010b94 	.word	0x24010b94
 80075c0:	4154494d 	.word	0x4154494d
 80075c4:	0800770d 	.word	0x0800770d
 80075c8:	0800855c 	.word	0x0800855c
 80075cc:	24010b9c 	.word	0x24010b9c
 80075d0:	24010c54 	.word	0x24010c54
 80075d4:	24011060 	.word	0x24011060

080075d8 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 80075d8:	b480      	push	{r7}
 80075da:	b089      	sub	sp, #36	; 0x24
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d04a      	beq.n	8007682 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075f2:	d046      	beq.n	8007682 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	699b      	ldr	r3, [r3, #24]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d142      	bne.n	8007682 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	2b20      	cmp	r3, #32
 8007600:	d902      	bls.n	8007608 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 8007602:	231f      	movs	r3, #31
 8007604:	61bb      	str	r3, [r7, #24]
 8007606:	e002      	b.n	800760e <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	3b01      	subs	r3, #1
 800760c:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800760e:	4b20      	ldr	r3, [pc, #128]	; (8007690 <_tx_timer_system_activate+0xb8>)
 8007610:	681a      	ldr	r2, [r3, #0]
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	4413      	add	r3, r2
 8007618:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800761a:	4b1e      	ldr	r3, [pc, #120]	; (8007694 <_tx_timer_system_activate+0xbc>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	69fa      	ldr	r2, [r7, #28]
 8007620:	429a      	cmp	r2, r3
 8007622:	d30b      	bcc.n	800763c <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8007624:	4b1b      	ldr	r3, [pc, #108]	; (8007694 <_tx_timer_system_activate+0xbc>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	69fa      	ldr	r2, [r7, #28]
 800762a:	1ad3      	subs	r3, r2, r3
 800762c:	109b      	asrs	r3, r3, #2
 800762e:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8007630:	4b19      	ldr	r3, [pc, #100]	; (8007698 <_tx_timer_system_activate+0xc0>)
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	4413      	add	r3, r2
 800763a:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800763c:	69fb      	ldr	r3, [r7, #28]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d109      	bne.n	8007658 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	601a      	str	r2, [r3, #0]
 8007656:	e011      	b.n	800767c <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	695b      	ldr	r3, [r3, #20]
 8007662:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	68fa      	ldr	r2, [r7, #12]
 8007674:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	68ba      	ldr	r2, [r7, #8]
 800767a:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	69fa      	ldr	r2, [r7, #28]
 8007680:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 8007682:	bf00      	nop
 8007684:	3724      	adds	r7, #36	; 0x24
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr
 800768e:	bf00      	nop
 8007690:	24010b08 	.word	0x24010b08
 8007694:	24010b98 	.word	0x24010b98
 8007698:	24010c50 	.word	0x24010c50

0800769c <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 800769c:	b480      	push	{r7}
 800769e:	b087      	sub	sp, #28
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	699b      	ldr	r3, [r3, #24]
 80076a8:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d026      	beq.n	80076fe <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	691b      	ldr	r3, [r3, #16]
 80076b4:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d108      	bne.n	80076d0 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d117      	bne.n	80076f8 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	2200      	movs	r2, #0
 80076cc:	601a      	str	r2, [r3, #0]
 80076ce:	e013      	b.n	80076f8 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	695b      	ldr	r3, [r3, #20]
 80076d4:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	68fa      	ldr	r2, [r7, #12]
 80076da:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	693a      	ldr	r2, [r7, #16]
 80076e0:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d105      	bne.n	80076f8 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	697a      	ldr	r2, [r7, #20]
 80076f0:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	693a      	ldr	r2, [r7, #16]
 80076f6:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	619a      	str	r2, [r3, #24]
    }
}
 80076fe:	bf00      	nop
 8007700:	371c      	adds	r7, #28
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr
	...

0800770c <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b098      	sub	sp, #96	; 0x60
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8007714:	2300      	movs	r3, #0
 8007716:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	4a73      	ldr	r2, [pc, #460]	; (80078e8 <_tx_timer_thread_entry+0x1dc>)
 800771c:	4293      	cmp	r3, r2
 800771e:	f040 80de 	bne.w	80078de <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007722:	f3ef 8310 	mrs	r3, PRIMASK
 8007726:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8007728:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800772a:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800772c:	b672      	cpsid	i
    return(int_posture);
 800772e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8007730:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 8007732:	4b6e      	ldr	r3, [pc, #440]	; (80078ec <_tx_timer_thread_entry+0x1e0>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d003      	beq.n	8007748 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f107 020c 	add.w	r2, r7, #12
 8007746:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8007748:	4b68      	ldr	r3, [pc, #416]	; (80078ec <_tx_timer_thread_entry+0x1e0>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2200      	movs	r2, #0
 800774e:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 8007750:	4b66      	ldr	r3, [pc, #408]	; (80078ec <_tx_timer_thread_entry+0x1e0>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	3304      	adds	r3, #4
 8007756:	4a65      	ldr	r2, [pc, #404]	; (80078ec <_tx_timer_thread_entry+0x1e0>)
 8007758:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800775a:	4b64      	ldr	r3, [pc, #400]	; (80078ec <_tx_timer_thread_entry+0x1e0>)
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	4b64      	ldr	r3, [pc, #400]	; (80078f0 <_tx_timer_thread_entry+0x1e4>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	429a      	cmp	r2, r3
 8007764:	d103      	bne.n	800776e <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 8007766:	4b63      	ldr	r3, [pc, #396]	; (80078f4 <_tx_timer_thread_entry+0x1e8>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a60      	ldr	r2, [pc, #384]	; (80078ec <_tx_timer_thread_entry+0x1e0>)
 800776c:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800776e:	4b62      	ldr	r3, [pc, #392]	; (80078f8 <_tx_timer_thread_entry+0x1ec>)
 8007770:	2200      	movs	r2, #0
 8007772:	601a      	str	r2, [r3, #0]
 8007774:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007776:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800777a:	f383 8810 	msr	PRIMASK, r3
}
 800777e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007780:	f3ef 8310 	mrs	r3, PRIMASK
 8007784:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8007786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8007788:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800778a:	b672      	cpsid	i
    return(int_posture);
 800778c:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800778e:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8007790:	e07f      	b.n	8007892 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	691b      	ldr	r3, [r3, #16]
 800779a:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800779c:	2300      	movs	r3, #0
 800779e:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 80077a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80077a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d102      	bne.n	80077ae <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 80077a8:	2300      	movs	r3, #0
 80077aa:	60fb      	str	r3, [r7, #12]
 80077ac:	e00e      	b.n	80077cc <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 80077ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077b0:	695b      	ldr	r3, [r3, #20]
 80077b2:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 80077b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077b8:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 80077ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077be:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 80077c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077c2:	f107 020c 	add.w	r2, r7, #12
 80077c6:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 80077c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077ca:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 80077cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2b20      	cmp	r3, #32
 80077d2:	d911      	bls.n	80077f8 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 80077d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 80077dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077de:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 80077e0:	2300      	movs	r3, #0
 80077e2:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 80077e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077e6:	f107 0208 	add.w	r2, r7, #8
 80077ea:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 80077ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80077f0:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 80077f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077f4:	60bb      	str	r3, [r7, #8]
 80077f6:	e01a      	b.n	800782e <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 80077f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 80077fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8007804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007806:	685a      	ldr	r2, [r3, #4]
 8007808:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800780a:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800780c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d009      	beq.n	8007828 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8007814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007816:	f107 0208 	add.w	r2, r7, #8
 800781a:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800781c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800781e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007820:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 8007822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007824:	60bb      	str	r3, [r7, #8]
 8007826:	e002      	b.n	800782e <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8007828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800782a:	2200      	movs	r2, #0
 800782c:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800782e:	4a33      	ldr	r2, [pc, #204]	; (80078fc <_tx_timer_thread_entry+0x1f0>)
 8007830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007832:	6013      	str	r3, [r2, #0]
 8007834:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007836:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800783a:	f383 8810 	msr	PRIMASK, r3
}
 800783e:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 8007840:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007842:	2b00      	cmp	r3, #0
 8007844:	d002      	beq.n	800784c <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 8007846:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007848:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800784a:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800784c:	f3ef 8310 	mrs	r3, PRIMASK
 8007850:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8007852:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8007854:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8007856:	b672      	cpsid	i
    return(int_posture);
 8007858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800785a:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800785c:	4b27      	ldr	r3, [pc, #156]	; (80078fc <_tx_timer_thread_entry+0x1f0>)
 800785e:	2200      	movs	r2, #0
 8007860:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007866:	429a      	cmp	r2, r3
 8007868:	d105      	bne.n	8007876 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800786a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800786c:	2200      	movs	r2, #0
 800786e:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8007870:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8007872:	f7ff feb1 	bl	80075d8 <_tx_timer_system_activate>
 8007876:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007878:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	f383 8810 	msr	PRIMASK, r3
}
 8007880:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007882:	f3ef 8310 	mrs	r3, PRIMASK
 8007886:	623b      	str	r3, [r7, #32]
    return(posture);
 8007888:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800788a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800788c:	b672      	cpsid	i
    return(int_posture);
 800788e:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8007890:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2b00      	cmp	r3, #0
 8007896:	f47f af7c 	bne.w	8007792 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800789a:	4b17      	ldr	r3, [pc, #92]	; (80078f8 <_tx_timer_thread_entry+0x1ec>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d116      	bne.n	80078d0 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 80078a2:	4b17      	ldr	r3, [pc, #92]	; (8007900 <_tx_timer_thread_entry+0x1f4>)
 80078a4:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 80078a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078a8:	2203      	movs	r2, #3
 80078aa:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80078ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078ae:	2201      	movs	r2, #1
 80078b0:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 80078b2:	4b14      	ldr	r3, [pc, #80]	; (8007904 <_tx_timer_thread_entry+0x1f8>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	3301      	adds	r3, #1
 80078b8:	4a12      	ldr	r2, [pc, #72]	; (8007904 <_tx_timer_thread_entry+0x1f8>)
 80078ba:	6013      	str	r3, [r2, #0]
 80078bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078be:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	f383 8810 	msr	PRIMASK, r3
}
 80078c6:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 80078c8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80078ca:	f7ff fa49 	bl	8006d60 <_tx_thread_system_suspend>
 80078ce:	e728      	b.n	8007722 <_tx_timer_thread_entry+0x16>
 80078d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078d2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	f383 8810 	msr	PRIMASK, r3
}
 80078da:	bf00      	nop
            TX_DISABLE
 80078dc:	e721      	b.n	8007722 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 80078de:	bf00      	nop
 80078e0:	3760      	adds	r7, #96	; 0x60
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop
 80078e8:	4154494d 	.word	0x4154494d
 80078ec:	24010b08 	.word	0x24010b08
 80078f0:	24010b98 	.word	0x24010b98
 80078f4:	24010c50 	.word	0x24010c50
 80078f8:	24010b8c 	.word	0x24010b8c
 80078fc:	24010c4c 	.word	0x24010c4c
 8007900:	24010b9c 	.word	0x24010b9c
 8007904:	24010af4 	.word	0x24010af4

08007908 <_tx_trace_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_trace_enable(VOID *trace_buffer_start, ULONG trace_buffer_size, ULONG registry_entries)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b0a6      	sub	sp, #152	; 0x98
 800790c:	af02      	add	r7, sp, #8
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	60b9      	str	r1, [r7, #8]
 8007912:	607a      	str	r2, [r7, #4]
UINT                            status;


    /* First, see if there is enough room for the control header, the registry entries, and at least one event in
       memory supplied to this call.  */
    if (trace_buffer_size < ((sizeof(TX_TRACE_HEADER)) + ((sizeof(TX_TRACE_OBJECT_ENTRY)) * registry_entries) + (sizeof(TX_TRACE_BUFFER_ENTRY))))
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	1c5a      	adds	r2, r3, #1
 8007918:	4613      	mov	r3, r2
 800791a:	005b      	lsls	r3, r3, #1
 800791c:	4413      	add	r3, r2
 800791e:	011b      	lsls	r3, r3, #4
 8007920:	3320      	adds	r3, #32
 8007922:	68ba      	ldr	r2, [r7, #8]
 8007924:	429a      	cmp	r2, r3
 8007926:	d202      	bcs.n	800792e <_tx_trace_enable+0x26>
    {

        /* No, the memory isn't big enough to hold one trace buffer entry.  Return an error.  */
        status =  TX_SIZE_ERROR;
 8007928:	2305      	movs	r3, #5
 800792a:	66bb      	str	r3, [r7, #104]	; 0x68
 800792c:	e309      	b.n	8007f42 <_tx_trace_enable+0x63a>
    }

    /* Determine if trace is already enabled.  */
    else if (_tx_trace_buffer_current_ptr != TX_NULL)
 800792e:	4b8f      	ldr	r3, [pc, #572]	; (8007b6c <_tx_trace_enable+0x264>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d002      	beq.n	800793c <_tx_trace_enable+0x34>
    {

        /* Yes, trace is already enabled.  */
        status =  TX_NOT_DONE;
 8007936:	2320      	movs	r3, #32
 8007938:	66bb      	str	r3, [r7, #104]	; 0x68
 800793a:	e302      	b.n	8007f42 <_tx_trace_enable+0x63a>
    }
    else
    {

        /* Set the enable bits for all events enabled.  */
        _tx_trace_event_enable_bits =  0xFFFFFFFFUL;
 800793c:	4b8c      	ldr	r3, [pc, #560]	; (8007b70 <_tx_trace_enable+0x268>)
 800793e:	f04f 32ff 	mov.w	r2, #4294967295
 8007942:	601a      	str	r2, [r3, #0]

        /* Setup working pointer to the supplied memory.  */
        work_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(trace_buffer_start);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	657b      	str	r3, [r7, #84]	; 0x54

        /* Setup pointer to the trace control area.  */
        _tx_trace_header_ptr =  TX_UCHAR_TO_HEADER_POINTER_CONVERT(work_ptr);
 8007948:	4a8a      	ldr	r2, [pc, #552]	; (8007b74 <_tx_trace_enable+0x26c>)
 800794a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800794c:	6013      	str	r3, [r2, #0]

        /* Move the working pointer past the control area.  */
        work_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(TX_TRACE_HEADER)));
 800794e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007950:	3330      	adds	r3, #48	; 0x30
 8007952:	657b      	str	r3, [r7, #84]	; 0x54

        /* Save the start of the trace object registry.  */
        _tx_trace_registry_start_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 8007954:	4a88      	ldr	r2, [pc, #544]	; (8007b78 <_tx_trace_enable+0x270>)
 8007956:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007958:	6013      	str	r3, [r2, #0]

        /* Setup the end of the trace object registry.  */
        work_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(TX_TRACE_OBJECT_ENTRY))*registry_entries);
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	4613      	mov	r3, r2
 800795e:	005b      	lsls	r3, r3, #1
 8007960:	4413      	add	r3, r2
 8007962:	011b      	lsls	r3, r3, #4
 8007964:	461a      	mov	r2, r3
 8007966:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007968:	4413      	add	r3, r2
 800796a:	657b      	str	r3, [r7, #84]	; 0x54
        _tx_trace_registry_end_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 800796c:	4a83      	ldr	r2, [pc, #524]	; (8007b7c <_tx_trace_enable+0x274>)
 800796e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007970:	6013      	str	r3, [r2, #0]

        /* Loop to make all trace object registry entries empty and valid.  */
        for (i = ((ULONG) 0); i < registry_entries; i++)
 8007972:	2300      	movs	r3, #0
 8007974:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007976:	e01f      	b.n	80079b8 <_tx_trace_enable+0xb0>
        {

            /* Setup the work pointer.  */
            work_ptr =  TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 8007978:	4b7f      	ldr	r3, [pc, #508]	; (8007b78 <_tx_trace_enable+0x270>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	657b      	str	r3, [r7, #84]	; 0x54
            work_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(TX_TRACE_OBJECT_ENTRY))*i);
 800797e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007980:	4613      	mov	r3, r2
 8007982:	005b      	lsls	r3, r3, #1
 8007984:	4413      	add	r3, r2
 8007986:	011b      	lsls	r3, r3, #4
 8007988:	461a      	mov	r2, r3
 800798a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800798c:	4413      	add	r3, r2
 800798e:	657b      	str	r3, [r7, #84]	; 0x54

            /* Convert to a registry entry pointer.  */
            entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 8007990:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007992:	637b      	str	r3, [r7, #52]	; 0x34

            /* Initialize object registry entry.  */
            entry_ptr -> tx_trace_object_entry_available =         (UCHAR) TX_TRUE;
 8007994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007996:	2201      	movs	r2, #1
 8007998:	701a      	strb	r2, [r3, #0]
            entry_ptr -> tx_trace_object_entry_type =              (UCHAR) TX_TRACE_OBJECT_TYPE_NOT_VALID;
 800799a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800799c:	2200      	movs	r2, #0
 800799e:	705a      	strb	r2, [r3, #1]
            entry_ptr -> tx_trace_object_entry_reserved1 =         (UCHAR) 0;
 80079a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079a2:	2200      	movs	r2, #0
 80079a4:	709a      	strb	r2, [r3, #2]
            entry_ptr -> tx_trace_object_entry_reserved2 =         (UCHAR) 0;
 80079a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079a8:	2200      	movs	r2, #0
 80079aa:	70da      	strb	r2, [r3, #3]
            entry_ptr -> tx_trace_object_entry_thread_pointer =    (ULONG) 0;
 80079ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079ae:	2200      	movs	r2, #0
 80079b0:	605a      	str	r2, [r3, #4]
        for (i = ((ULONG) 0); i < registry_entries; i++)
 80079b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079b4:	3301      	adds	r3, #1
 80079b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80079b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	429a      	cmp	r2, r3
 80079be:	d3db      	bcc.n	8007978 <_tx_trace_enable+0x70>
        }

        /* Setup the total number of registry entries.  */
        _tx_trace_total_registry_entries =  registry_entries;
 80079c0:	4a6f      	ldr	r2, [pc, #444]	; (8007b80 <_tx_trace_enable+0x278>)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6013      	str	r3, [r2, #0]

        /* Setup the object registry available count to the total number of registry entries.  */
        _tx_trace_available_registry_entries =  registry_entries;
 80079c6:	4a6f      	ldr	r2, [pc, #444]	; (8007b84 <_tx_trace_enable+0x27c>)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6013      	str	r3, [r2, #0]

        /* Setup the search starting index to the first entry.  */
        _tx_trace_registry_search_start =  ((ULONG) 0);
 80079cc:	4b6e      	ldr	r3, [pc, #440]	; (8007b88 <_tx_trace_enable+0x280>)
 80079ce:	2200      	movs	r2, #0
 80079d0:	601a      	str	r2, [r3, #0]

        /* Setup the work pointer to after the trace object registry.  */
        work_ptr =  TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_end_ptr);
 80079d2:	4b6a      	ldr	r3, [pc, #424]	; (8007b7c <_tx_trace_enable+0x274>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	657b      	str	r3, [r7, #84]	; 0x54

        /* Adjust the remaining trace buffer size.  */
        trace_buffer_size =  trace_buffer_size - ((sizeof(TX_TRACE_OBJECT_ENTRY)) * registry_entries) - (sizeof(TX_TRACE_HEADER));
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	4613      	mov	r3, r2
 80079dc:	005b      	lsls	r3, r3, #1
 80079de:	4413      	add	r3, r2
 80079e0:	011b      	lsls	r3, r3, #4
 80079e2:	461a      	mov	r2, r3
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	1a9b      	subs	r3, r3, r2
 80079e8:	3b30      	subs	r3, #48	; 0x30
 80079ea:	60bb      	str	r3, [r7, #8]

        /* Setup pointer to the start of the actual event trace log.  */
        _tx_trace_buffer_start_ptr =      TX_UCHAR_TO_ENTRY_POINTER_CONVERT(work_ptr);
 80079ec:	4a67      	ldr	r2, [pc, #412]	; (8007b8c <_tx_trace_enable+0x284>)
 80079ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079f0:	6013      	str	r3, [r2, #0]

        /* Save the event trace log start address.  */
        event_start_ptr =  work_ptr;
 80079f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079f4:	653b      	str	r3, [r7, #80]	; 0x50

        /* Calculate the end of the trace buffer.  */
        work_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, ((trace_buffer_size/(sizeof(TX_TRACE_BUFFER_ENTRY)))*(sizeof(TX_TRACE_BUFFER_ENTRY))));
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	f023 031f 	bic.w	r3, r3, #31
 80079fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80079fe:	4413      	add	r3, r2
 8007a00:	657b      	str	r3, [r7, #84]	; 0x54
        _tx_trace_buffer_end_ptr =        TX_UCHAR_TO_ENTRY_POINTER_CONVERT(work_ptr);
 8007a02:	4a63      	ldr	r2, [pc, #396]	; (8007b90 <_tx_trace_enable+0x288>)
 8007a04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a06:	6013      	str	r3, [r2, #0]

        /* Loop to mark all entries in the trace buffer as invalid.  */
        for (i = ((ULONG) 0); i < (trace_buffer_size/(sizeof(TX_TRACE_BUFFER_ENTRY))); i++)
 8007a08:	2300      	movs	r3, #0
 8007a0a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a0c:	e00c      	b.n	8007a28 <_tx_trace_enable+0x120>
        {

            /* Setup the work pointer.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(event_start_ptr, (sizeof(TX_TRACE_BUFFER_ENTRY))*i);
 8007a0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a10:	015b      	lsls	r3, r3, #5
 8007a12:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007a14:	4413      	add	r3, r2
 8007a16:	657b      	str	r3, [r7, #84]	; 0x54

            /* Convert to a trace event pointer.  */
            event_ptr =  TX_UCHAR_TO_ENTRY_POINTER_CONVERT(work_ptr);
 8007a18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a1a:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Mark this trace event as invalid.  */
            event_ptr -> tx_trace_buffer_entry_thread_pointer =  ((ULONG) 0);
 8007a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a1e:	2200      	movs	r2, #0
 8007a20:	601a      	str	r2, [r3, #0]
        for (i = ((ULONG) 0); i < (trace_buffer_size/(sizeof(TX_TRACE_BUFFER_ENTRY))); i++)
 8007a22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a24:	3301      	adds	r3, #1
 8007a26:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	095b      	lsrs	r3, r3, #5
 8007a2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d3ed      	bcc.n	8007a0e <_tx_trace_enable+0x106>
        }

        /* Now, fill in the event trace control header.  */
        _tx_trace_header_ptr -> tx_trace_header_id =                             TX_TRACE_VALID;
 8007a32:	4b50      	ldr	r3, [pc, #320]	; (8007b74 <_tx_trace_enable+0x26c>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a57      	ldr	r2, [pc, #348]	; (8007b94 <_tx_trace_enable+0x28c>)
 8007a38:	601a      	str	r2, [r3, #0]
        _tx_trace_header_ptr -> tx_trace_header_timer_valid_mask =               TX_TRACE_TIME_MASK;
 8007a3a:	4b4e      	ldr	r3, [pc, #312]	; (8007b74 <_tx_trace_enable+0x26c>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8007a42:	605a      	str	r2, [r3, #4]
        _tx_trace_header_ptr -> tx_trace_header_trace_base_address =             TX_POINTER_TO_ULONG_CONVERT(trace_buffer_start);
 8007a44:	4b4b      	ldr	r3, [pc, #300]	; (8007b74 <_tx_trace_enable+0x26c>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	68fa      	ldr	r2, [r7, #12]
 8007a4a:	609a      	str	r2, [r3, #8]
        _tx_trace_header_ptr -> tx_trace_header_registry_start_pointer =         TX_POINTER_TO_ULONG_CONVERT(_tx_trace_registry_start_ptr);
 8007a4c:	4b4a      	ldr	r3, [pc, #296]	; (8007b78 <_tx_trace_enable+0x270>)
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	4b48      	ldr	r3, [pc, #288]	; (8007b74 <_tx_trace_enable+0x26c>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	60da      	str	r2, [r3, #12]
        _tx_trace_header_ptr -> tx_trace_header_reserved1 =                      ((USHORT) 0);
 8007a56:	4b47      	ldr	r3, [pc, #284]	; (8007b74 <_tx_trace_enable+0x26c>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	821a      	strh	r2, [r3, #16]
        _tx_trace_header_ptr -> tx_trace_header_object_name_size =               ((USHORT) TX_TRACE_OBJECT_REGISTRY_NAME);
 8007a5e:	4b45      	ldr	r3, [pc, #276]	; (8007b74 <_tx_trace_enable+0x26c>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	2220      	movs	r2, #32
 8007a64:	825a      	strh	r2, [r3, #18]
        _tx_trace_header_ptr -> tx_trace_header_registry_end_pointer =           TX_POINTER_TO_ULONG_CONVERT(_tx_trace_registry_end_ptr);
 8007a66:	4b45      	ldr	r3, [pc, #276]	; (8007b7c <_tx_trace_enable+0x274>)
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	4b42      	ldr	r3, [pc, #264]	; (8007b74 <_tx_trace_enable+0x26c>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	615a      	str	r2, [r3, #20]
        _tx_trace_header_ptr -> tx_trace_header_buffer_start_pointer =           TX_POINTER_TO_ULONG_CONVERT(_tx_trace_buffer_start_ptr);
 8007a70:	4b46      	ldr	r3, [pc, #280]	; (8007b8c <_tx_trace_enable+0x284>)
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	4b3f      	ldr	r3, [pc, #252]	; (8007b74 <_tx_trace_enable+0x26c>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	619a      	str	r2, [r3, #24]
        _tx_trace_header_ptr -> tx_trace_header_buffer_end_pointer =             TX_POINTER_TO_ULONG_CONVERT(_tx_trace_buffer_end_ptr);
 8007a7a:	4b45      	ldr	r3, [pc, #276]	; (8007b90 <_tx_trace_enable+0x288>)
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	4b3d      	ldr	r3, [pc, #244]	; (8007b74 <_tx_trace_enable+0x26c>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	61da      	str	r2, [r3, #28]
        _tx_trace_header_ptr -> tx_trace_header_buffer_current_pointer =         TX_POINTER_TO_ULONG_CONVERT(_tx_trace_buffer_start_ptr);
 8007a84:	4b41      	ldr	r3, [pc, #260]	; (8007b8c <_tx_trace_enable+0x284>)
 8007a86:	681a      	ldr	r2, [r3, #0]
 8007a88:	4b3a      	ldr	r3, [pc, #232]	; (8007b74 <_tx_trace_enable+0x26c>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	621a      	str	r2, [r3, #32]
        _tx_trace_header_ptr -> tx_trace_header_reserved2 =                      0xAAAAAAAAUL;
 8007a8e:	4b39      	ldr	r3, [pc, #228]	; (8007b74 <_tx_trace_enable+0x26c>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8007a96:	625a      	str	r2, [r3, #36]	; 0x24
        _tx_trace_header_ptr -> tx_trace_header_reserved3 =                      0xBBBBBBBBUL;
 8007a98:	4b36      	ldr	r3, [pc, #216]	; (8007b74 <_tx_trace_enable+0x26c>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 8007aa0:	629a      	str	r2, [r3, #40]	; 0x28
        _tx_trace_header_ptr -> tx_trace_header_reserved4 =                      0xCCCCCCCCUL;
 8007aa2:	4b34      	ldr	r3, [pc, #208]	; (8007b74 <_tx_trace_enable+0x26c>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f04f 32cc 	mov.w	r2, #3435973836	; 0xcccccccc
 8007aaa:	62da      	str	r2, [r3, #44]	; 0x2c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007aac:	f3ef 8310 	mrs	r3, PRIMASK
 8007ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8007ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8007ab4:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8007ab6:	b672      	cpsid	i
    return(int_posture);
 8007ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Now, loop through all existing ThreadX objects and register them in the newly setup trace buffer.  */

        /* Disable interrupts.  */
        TX_DISABLE
 8007aba:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* First, disable preemption.  */
        _tx_thread_preempt_disable++;
 8007abc:	4b36      	ldr	r3, [pc, #216]	; (8007b98 <_tx_trace_enable+0x290>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	3301      	adds	r3, #1
 8007ac2:	4a35      	ldr	r2, [pc, #212]	; (8007b98 <_tx_trace_enable+0x290>)
 8007ac4:	6013      	str	r3, [r2, #0]
 8007ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ac8:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007acc:	f383 8810 	msr	PRIMASK, r3
}
 8007ad0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Pickup the first thread and the number of created threads.  */
        thread_ptr =  _tx_thread_created_ptr;
 8007ad2:	4b32      	ldr	r3, [pc, #200]	; (8007b9c <_tx_trace_enable+0x294>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        i =           _tx_thread_created_count;
 8007ada:	4b31      	ldr	r3, [pc, #196]	; (8007ba0 <_tx_trace_enable+0x298>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Loop to register all threads.  */
        while (i != ((ULONG) 0))
 8007ae0:	e019      	b.n	8007b16 <_tx_trace_enable+0x20e>
        {

            /* Decrement the counter.  */
            i--;
 8007ae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ae4:	3b01      	subs	r3, #1
 8007ae6:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* Register this thread.  */
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_THREAD, thread_ptr, thread_ptr -> tx_thread_name,
 8007ae8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007aec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                                        TX_POINTER_TO_ULONG_CONVERT(thread_ptr -> tx_thread_stack_start), (ULONG) thread_ptr -> tx_thread_stack_size);
 8007aee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007af2:	68db      	ldr	r3, [r3, #12]
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_THREAD, thread_ptr, thread_ptr -> tx_thread_name,
 8007af4:	4619      	mov	r1, r3
                                        TX_POINTER_TO_ULONG_CONVERT(thread_ptr -> tx_thread_stack_start), (ULONG) thread_ptr -> tx_thread_stack_size);
 8007af6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007afa:	695b      	ldr	r3, [r3, #20]
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_THREAD, thread_ptr, thread_ptr -> tx_thread_name,
 8007afc:	9300      	str	r3, [sp, #0]
 8007afe:	460b      	mov	r3, r1
 8007b00:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8007b04:	2001      	movs	r0, #1
 8007b06:	f000 fa59 	bl	8007fbc <_tx_trace_object_register>

            /* Move to the next thread.  */
            thread_ptr =  thread_ptr -> tx_thread_created_next;
 8007b0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        while (i != ((ULONG) 0))
 8007b16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d1e2      	bne.n	8007ae2 <_tx_trace_enable+0x1da>
        }

        /* Pickup the first timer and the number of created timers.  */
        timer_ptr =  _tx_timer_created_ptr;
 8007b1c:	4b21      	ldr	r3, [pc, #132]	; (8007ba4 <_tx_trace_enable+0x29c>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        i =          _tx_timer_created_count;
 8007b24:	4b20      	ldr	r3, [pc, #128]	; (8007ba8 <_tx_trace_enable+0x2a0>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Loop to register all timers.  */
        while (i != ((ULONG) 0))
 8007b2a:	e014      	b.n	8007b56 <_tx_trace_enable+0x24e>
        {

            /* Decrement the counter.  */
            i--;
 8007b2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b2e:	3b01      	subs	r3, #1
 8007b30:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* Register this timer.  */
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_TIMER, timer_ptr, timer_ptr -> tx_timer_name,
 8007b32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007b36:	685a      	ldr	r2, [r3, #4]
 8007b38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007b3c:	68db      	ldr	r3, [r3, #12]
 8007b3e:	9300      	str	r3, [sp, #0]
 8007b40:	2300      	movs	r3, #0
 8007b42:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8007b46:	2002      	movs	r0, #2
 8007b48:	f000 fa38 	bl	8007fbc <_tx_trace_object_register>
                                                       ((ULONG) 0), timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks);

            /* Move to the next timer.  */
            timer_ptr =  timer_ptr -> tx_timer_created_next;
 8007b4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        while (i != ((ULONG) 0))
 8007b56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d1e7      	bne.n	8007b2c <_tx_trace_enable+0x224>
        }


        /* Pickup the first event flag group and the number of created groups.  */
        event_flags_ptr =  _tx_event_flags_created_ptr;
 8007b5c:	4b13      	ldr	r3, [pc, #76]	; (8007bac <_tx_trace_enable+0x2a4>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        i =                _tx_event_flags_created_count;
 8007b64:	4b12      	ldr	r3, [pc, #72]	; (8007bb0 <_tx_trace_enable+0x2a8>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Loop to register all event flags groups.  */
        while (i != ((ULONG) 0))
 8007b6a:	e036      	b.n	8007bda <_tx_trace_enable+0x2d2>
 8007b6c:	2401107c 	.word	0x2401107c
 8007b70:	24011088 	.word	0x24011088
 8007b74:	24011084 	.word	0x24011084
 8007b78:	24011078 	.word	0x24011078
 8007b7c:	2401108c 	.word	0x2401108c
 8007b80:	24011098 	.word	0x24011098
 8007b84:	24011070 	.word	0x24011070
 8007b88:	24011094 	.word	0x24011094
 8007b8c:	24011090 	.word	0x24011090
 8007b90:	24011074 	.word	0x24011074
 8007b94:	54585442 	.word	0x54585442
 8007b98:	24010af4 	.word	0x24010af4
 8007b9c:	24010ae4 	.word	0x24010ae4
 8007ba0:	24010aec 	.word	0x24010aec
 8007ba4:	24010c54 	.word	0x24010c54
 8007ba8:	24011060 	.word	0x24011060
 8007bac:	24010a28 	.word	0x24010a28
 8007bb0:	24010a4c 	.word	0x24010a4c
        {

            /* Decrement the counter.  */
            i--;
 8007bb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bb6:	3b01      	subs	r3, #1
 8007bb8:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* Register this event flags group.  */
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_EVENT_FLAGS, event_flags_ptr, event_flags_ptr -> tx_event_flags_group_name, ((ULONG) 0), ((ULONG) 0));
 8007bba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007bbe:	685a      	ldr	r2, [r3, #4]
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	9300      	str	r3, [sp, #0]
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8007bca:	2006      	movs	r0, #6
 8007bcc:	f000 f9f6 	bl	8007fbc <_tx_trace_object_register>

            /* Move to the next event flags group.  */
            event_flags_ptr =  event_flags_ptr -> tx_event_flags_group_created_next;
 8007bd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007bd4:	699b      	ldr	r3, [r3, #24]
 8007bd6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        while (i != ((ULONG) 0))
 8007bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d1e9      	bne.n	8007bb4 <_tx_trace_enable+0x2ac>
        }

        /* Pickup the first queue and the number of created queues.  */
        queue_ptr =  _tx_queue_created_ptr;
 8007be0:	4b82      	ldr	r3, [pc, #520]	; (8007dec <_tx_trace_enable+0x4e4>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        i =          _tx_queue_created_count;
 8007be8:	4b81      	ldr	r3, [pc, #516]	; (8007df0 <_tx_trace_enable+0x4e8>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Loop to register all queues.  */
        while (i != ((ULONG) 0))
 8007bee:	e015      	b.n	8007c1c <_tx_trace_enable+0x314>
        {

            /* Decrement the counter.  */
            i--;
 8007bf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bf2:	3b01      	subs	r3, #1
 8007bf4:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* Register this queue.  */
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_QUEUE, queue_ptr, queue_ptr -> tx_queue_name,
 8007bf6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007bfa:	685a      	ldr	r2, [r3, #4]
                                                                    (queue_ptr -> tx_queue_capacity * (sizeof(ULONG))), ((ULONG) 0));
 8007bfc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	009b      	lsls	r3, r3, #2
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_QUEUE, queue_ptr, queue_ptr -> tx_queue_name,
 8007c04:	2100      	movs	r1, #0
 8007c06:	9100      	str	r1, [sp, #0]
 8007c08:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8007c0c:	2003      	movs	r0, #3
 8007c0e:	f000 f9d5 	bl	8007fbc <_tx_trace_object_register>

            /* Move to the next queue.  */
            queue_ptr =  queue_ptr -> tx_queue_created_next;
 8007c12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        while (i != ((ULONG) 0))
 8007c1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d1e6      	bne.n	8007bf0 <_tx_trace_enable+0x2e8>
        }

        /* Pickup the first semaphore and the number of created semaphores.  */
        semaphore_ptr =  _tx_semaphore_created_ptr;
 8007c22:	4b74      	ldr	r3, [pc, #464]	; (8007df4 <_tx_trace_enable+0x4ec>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	67fb      	str	r3, [r7, #124]	; 0x7c
        i =              _tx_semaphore_created_count;
 8007c28:	4b73      	ldr	r3, [pc, #460]	; (8007df8 <_tx_trace_enable+0x4f0>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Loop to register all semaphores.  */
        while (i != ((ULONG) 0))
 8007c2e:	e00e      	b.n	8007c4e <_tx_trace_enable+0x346>
        {

            /* Decrement the counter.  */
            i--;
 8007c30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c32:	3b01      	subs	r3, #1
 8007c34:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* Register this semaphore.  */
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_SEMAPHORE, semaphore_ptr, semaphore_ptr -> tx_semaphore_name, ((ULONG) 0), ((ULONG) 0));
 8007c36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007c38:	685a      	ldr	r2, [r3, #4]
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	9300      	str	r3, [sp, #0]
 8007c3e:	2300      	movs	r3, #0
 8007c40:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007c42:	2004      	movs	r0, #4
 8007c44:	f000 f9ba 	bl	8007fbc <_tx_trace_object_register>

            /* Move to the next semaphore.  */
            semaphore_ptr =  semaphore_ptr -> tx_semaphore_created_next;
 8007c48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007c4a:	695b      	ldr	r3, [r3, #20]
 8007c4c:	67fb      	str	r3, [r7, #124]	; 0x7c
        while (i != ((ULONG) 0))
 8007c4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d1ed      	bne.n	8007c30 <_tx_trace_enable+0x328>
        }

        /* Pickup the first mutex and the number of created mutexes.  */
        mutex_ptr =  _tx_mutex_created_ptr;
 8007c54:	4b69      	ldr	r3, [pc, #420]	; (8007dfc <_tx_trace_enable+0x4f4>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	67bb      	str	r3, [r7, #120]	; 0x78
        i =          _tx_mutex_created_count;
 8007c5a:	4b69      	ldr	r3, [pc, #420]	; (8007e00 <_tx_trace_enable+0x4f8>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Loop to register all mutexes.  */
        while (i != ((ULONG) 0))
 8007c60:	e00f      	b.n	8007c82 <_tx_trace_enable+0x37a>
        {

            /* Decrement the counter.  */
            i--;
 8007c62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c64:	3b01      	subs	r3, #1
 8007c66:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* Register this mutex.  */
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_MUTEX, mutex_ptr, mutex_ptr -> tx_mutex_name,
 8007c68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c6a:	685a      	ldr	r2, [r3, #4]
                                                                        (ULONG) mutex_ptr -> tx_mutex_inherit, ((ULONG) 0));
 8007c6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c6e:	691b      	ldr	r3, [r3, #16]
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_MUTEX, mutex_ptr, mutex_ptr -> tx_mutex_name,
 8007c70:	2100      	movs	r1, #0
 8007c72:	9100      	str	r1, [sp, #0]
 8007c74:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007c76:	2005      	movs	r0, #5
 8007c78:	f000 f9a0 	bl	8007fbc <_tx_trace_object_register>

            /* Move to the next mutex.  */
            mutex_ptr =  mutex_ptr -> tx_mutex_created_next;
 8007c7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c7e:	6a1b      	ldr	r3, [r3, #32]
 8007c80:	67bb      	str	r3, [r7, #120]	; 0x78
        while (i != ((ULONG) 0))
 8007c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d1ec      	bne.n	8007c62 <_tx_trace_enable+0x35a>
        }

        /* Pickup the first block pool and the number of created block pools.  */
        block_pool_ptr =  _tx_block_pool_created_ptr;
 8007c88:	4b5e      	ldr	r3, [pc, #376]	; (8007e04 <_tx_trace_enable+0x4fc>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	677b      	str	r3, [r7, #116]	; 0x74
        i =               _tx_block_pool_created_count;
 8007c8e:	4b5e      	ldr	r3, [pc, #376]	; (8007e08 <_tx_trace_enable+0x500>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Loop to register all block pools.  */
        while (i != ((ULONG) 0))
 8007c94:	e00f      	b.n	8007cb6 <_tx_trace_enable+0x3ae>
        {

             /* Decrement the counter.  */
            i--;
 8007c96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c98:	3b01      	subs	r3, #1
 8007c9a:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* Register this block pool.  */
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_BLOCK_POOL, block_pool_ptr, block_pool_ptr -> tx_block_pool_name,
 8007c9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c9e:	685a      	ldr	r2, [r3, #4]
 8007ca0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ca2:	699b      	ldr	r3, [r3, #24]
 8007ca4:	2100      	movs	r1, #0
 8007ca6:	9100      	str	r1, [sp, #0]
 8007ca8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8007caa:	2007      	movs	r0, #7
 8007cac:	f000 f986 	bl	8007fbc <_tx_trace_object_register>
                                                                            block_pool_ptr -> tx_block_pool_size, ((ULONG) 0));

            /* Move to the next block pool.  */
            block_pool_ptr =  block_pool_ptr -> tx_block_pool_created_next;
 8007cb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cb4:	677b      	str	r3, [r7, #116]	; 0x74
        while (i != ((ULONG) 0))
 8007cb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d1ec      	bne.n	8007c96 <_tx_trace_enable+0x38e>
        }

        /* Pickup the first byte pool and the number of created byte pools.  */
        byte_pool_ptr =  _tx_byte_pool_created_ptr;
 8007cbc:	4b53      	ldr	r3, [pc, #332]	; (8007e0c <_tx_trace_enable+0x504>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	673b      	str	r3, [r7, #112]	; 0x70
        i =              _tx_byte_pool_created_count;
 8007cc2:	4b53      	ldr	r3, [pc, #332]	; (8007e10 <_tx_trace_enable+0x508>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Loop to register all byte pools.  */
        while (i != ((ULONG) 0))
 8007cc8:	e00f      	b.n	8007cea <_tx_trace_enable+0x3e2>
        {

            /* Decrement the counter.  */
            i--;
 8007cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ccc:	3b01      	subs	r3, #1
 8007cce:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* Register this byte pool.  */
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_BYTE_POOL, byte_pool_ptr, byte_pool_ptr -> tx_byte_pool_name,
 8007cd0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cd2:	685a      	ldr	r2, [r3, #4]
 8007cd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cd6:	69db      	ldr	r3, [r3, #28]
 8007cd8:	2100      	movs	r1, #0
 8007cda:	9100      	str	r1, [sp, #0]
 8007cdc:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8007cde:	2008      	movs	r0, #8
 8007ce0:	f000 f96c 	bl	8007fbc <_tx_trace_object_register>
                                                                            byte_pool_ptr -> tx_byte_pool_size, ((ULONG) 0));

            /* Move to the next byte pool.  */
            byte_pool_ptr =  byte_pool_ptr -> tx_byte_pool_created_next;
 8007ce4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce8:	673b      	str	r3, [r7, #112]	; 0x70
        while (i != ((ULONG) 0))
 8007cea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d1ec      	bne.n	8007cca <_tx_trace_enable+0x3c2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007cf0:	f3ef 8310 	mrs	r3, PRIMASK
 8007cf4:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8007cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8007cf8:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007cfa:	b672      	cpsid	i
    return(int_posture);
 8007cfc:	6a3b      	ldr	r3, [r7, #32]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8007cfe:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Release the preeemption.  */
        _tx_thread_preempt_disable--;
 8007d00:	4b44      	ldr	r3, [pc, #272]	; (8007e14 <_tx_trace_enable+0x50c>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	3b01      	subs	r3, #1
 8007d06:	4a43      	ldr	r2, [pc, #268]	; (8007e14 <_tx_trace_enable+0x50c>)
 8007d08:	6013      	str	r3, [r2, #0]

        /* Finally, setup the current buffer pointer, which effectively enables the trace!  */
        _tx_trace_buffer_current_ptr =    (TX_TRACE_BUFFER_ENTRY *) _tx_trace_buffer_start_ptr;
 8007d0a:	4b43      	ldr	r3, [pc, #268]	; (8007e18 <_tx_trace_enable+0x510>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a43      	ldr	r2, [pc, #268]	; (8007e1c <_tx_trace_enable+0x514>)
 8007d10:	6013      	str	r3, [r2, #0]

        /* Insert two RUNNING events so the buffer is not empty.  */
        TX_TRACE_IN_LINE_INSERT(TX_TRACE_RUNNING, 0, 0, 0, 0, TX_TRACE_INTERNAL_EVENTS)
 8007d12:	4b42      	ldr	r3, [pc, #264]	; (8007e1c <_tx_trace_enable+0x514>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	f000 8095 	beq.w	8007e4a <_tx_trace_enable+0x542>
 8007d20:	4b3f      	ldr	r3, [pc, #252]	; (8007e20 <_tx_trace_enable+0x518>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f003 0301 	and.w	r3, r3, #1
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	f000 808e 	beq.w	8007e4a <_tx_trace_enable+0x542>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007d2e:	f3ef 8305 	mrs	r3, IPSR
 8007d32:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8007d34:	69fa      	ldr	r2, [r7, #28]
 8007d36:	4b3b      	ldr	r3, [pc, #236]	; (8007e24 <_tx_trace_enable+0x51c>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	647b      	str	r3, [r7, #68]	; 0x44
 8007d3e:	4b3a      	ldr	r3, [pc, #232]	; (8007e28 <_tx_trace_enable+0x520>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	663b      	str	r3, [r7, #96]	; 0x60
 8007d44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d10b      	bne.n	8007d62 <_tx_trace_enable+0x45a>
 8007d4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d4e:	667b      	str	r3, [r7, #100]	; 0x64
 8007d50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d54:	041a      	lsls	r2, r3, #16
 8007d56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007d5e:	667b      	str	r3, [r7, #100]	; 0x64
 8007d60:	e00e      	b.n	8007d80 <_tx_trace_enable+0x478>
 8007d62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d64:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8007d68:	d205      	bcs.n	8007d76 <_tx_trace_enable+0x46e>
 8007d6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d6c:	667b      	str	r3, [r7, #100]	; 0x64
 8007d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8007d72:	663b      	str	r3, [r7, #96]	; 0x60
 8007d74:	e004      	b.n	8007d80 <_tx_trace_enable+0x478>
 8007d76:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8007d7a:	663b      	str	r3, [r7, #96]	; 0x60
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	667b      	str	r3, [r7, #100]	; 0x64
 8007d80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007d82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d84:	601a      	str	r2, [r3, #0]
 8007d86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d88:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007d8a:	605a      	str	r2, [r3, #4]
 8007d8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d8e:	2206      	movs	r2, #6
 8007d90:	609a      	str	r2, [r3, #8]
 8007d92:	4b26      	ldr	r3, [pc, #152]	; (8007e2c <_tx_trace_enable+0x524>)
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d98:	60da      	str	r2, [r3, #12]
 8007d9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	611a      	str	r2, [r3, #16]
 8007da0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007da2:	2200      	movs	r2, #0
 8007da4:	615a      	str	r2, [r3, #20]
 8007da6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007da8:	2200      	movs	r2, #0
 8007daa:	619a      	str	r2, [r3, #24]
 8007dac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007dae:	2200      	movs	r2, #0
 8007db0:	61da      	str	r2, [r3, #28]
 8007db2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007db4:	3320      	adds	r3, #32
 8007db6:	64bb      	str	r3, [r7, #72]	; 0x48
 8007db8:	4b1d      	ldr	r3, [pc, #116]	; (8007e30 <_tx_trace_enable+0x528>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d33c      	bcc.n	8007e3c <_tx_trace_enable+0x534>
 8007dc2:	4b15      	ldr	r3, [pc, #84]	; (8007e18 <_tx_trace_enable+0x510>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8007dc8:	4a14      	ldr	r2, [pc, #80]	; (8007e1c <_tx_trace_enable+0x514>)
 8007dca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007dcc:	6013      	str	r3, [r2, #0]
 8007dce:	4b19      	ldr	r3, [pc, #100]	; (8007e34 <_tx_trace_enable+0x52c>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007dd4:	621a      	str	r2, [r3, #32]
 8007dd6:	4b18      	ldr	r3, [pc, #96]	; (8007e38 <_tx_trace_enable+0x530>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d035      	beq.n	8007e4a <_tx_trace_enable+0x542>
 8007dde:	4b16      	ldr	r3, [pc, #88]	; (8007e38 <_tx_trace_enable+0x530>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a14      	ldr	r2, [pc, #80]	; (8007e34 <_tx_trace_enable+0x52c>)
 8007de4:	6812      	ldr	r2, [r2, #0]
 8007de6:	4610      	mov	r0, r2
 8007de8:	4798      	blx	r3
 8007dea:	e02e      	b.n	8007e4a <_tx_trace_enable+0x542>
 8007dec:	24010a54 	.word	0x24010a54
 8007df0:	24010a34 	.word	0x24010a34
 8007df4:	24010a38 	.word	0x24010a38
 8007df8:	24010a48 	.word	0x24010a48
 8007dfc:	24010a30 	.word	0x24010a30
 8007e00:	24010a2c 	.word	0x24010a2c
 8007e04:	24010a50 	.word	0x24010a50
 8007e08:	24010a44 	.word	0x24010a44
 8007e0c:	24010a3c 	.word	0x24010a3c
 8007e10:	24010a58 	.word	0x24010a58
 8007e14:	24010af4 	.word	0x24010af4
 8007e18:	24011090 	.word	0x24011090
 8007e1c:	2401107c 	.word	0x2401107c
 8007e20:	24011088 	.word	0x24011088
 8007e24:	2400fa10 	.word	0x2400fa10
 8007e28:	24010af8 	.word	0x24010af8
 8007e2c:	e0001004 	.word	0xe0001004
 8007e30:	24011074 	.word	0x24011074
 8007e34:	24011084 	.word	0x24011084
 8007e38:	24011080 	.word	0x24011080
 8007e3c:	4a43      	ldr	r2, [pc, #268]	; (8007f4c <_tx_trace_enable+0x644>)
 8007e3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e40:	6013      	str	r3, [r2, #0]
 8007e42:	4b43      	ldr	r3, [pc, #268]	; (8007f50 <_tx_trace_enable+0x648>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e48:	621a      	str	r2, [r3, #32]
        TX_TRACE_IN_LINE_INSERT(TX_TRACE_RUNNING, 0, 0, 0, 0, TX_TRACE_INTERNAL_EVENTS)
 8007e4a:	4b40      	ldr	r3, [pc, #256]	; (8007f4c <_tx_trace_enable+0x644>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	643b      	str	r3, [r7, #64]	; 0x40
 8007e50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d06b      	beq.n	8007f2e <_tx_trace_enable+0x626>
 8007e56:	4b3f      	ldr	r3, [pc, #252]	; (8007f54 <_tx_trace_enable+0x64c>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f003 0301 	and.w	r3, r3, #1
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d065      	beq.n	8007f2e <_tx_trace_enable+0x626>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007e62:	f3ef 8305 	mrs	r3, IPSR
 8007e66:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8007e68:	69ba      	ldr	r2, [r7, #24]
 8007e6a:	4b3b      	ldr	r3, [pc, #236]	; (8007f58 <_tx_trace_enable+0x650>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e72:	4b3a      	ldr	r3, [pc, #232]	; (8007f5c <_tx_trace_enable+0x654>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d10b      	bne.n	8007e96 <_tx_trace_enable+0x58e>
 8007e7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e88:	041a      	lsls	r2, r3, #16
 8007e8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e94:	e00e      	b.n	8007eb4 <_tx_trace_enable+0x5ac>
 8007e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e98:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8007e9c:	d205      	bcs.n	8007eaa <_tx_trace_enable+0x5a2>
 8007e9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ea0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ea6:	65bb      	str	r3, [r7, #88]	; 0x58
 8007ea8:	e004      	b.n	8007eb4 <_tx_trace_enable+0x5ac>
 8007eaa:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8007eae:	65bb      	str	r3, [r7, #88]	; 0x58
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007eb4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007eb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007eb8:	601a      	str	r2, [r3, #0]
 8007eba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ebc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007ebe:	605a      	str	r2, [r3, #4]
 8007ec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ec2:	2206      	movs	r2, #6
 8007ec4:	609a      	str	r2, [r3, #8]
 8007ec6:	4b26      	ldr	r3, [pc, #152]	; (8007f60 <_tx_trace_enable+0x658>)
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ecc:	60da      	str	r2, [r3, #12]
 8007ece:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	611a      	str	r2, [r3, #16]
 8007ed4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	615a      	str	r2, [r3, #20]
 8007eda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007edc:	2200      	movs	r2, #0
 8007ede:	619a      	str	r2, [r3, #24]
 8007ee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	61da      	str	r2, [r3, #28]
 8007ee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ee8:	3320      	adds	r3, #32
 8007eea:	643b      	str	r3, [r7, #64]	; 0x40
 8007eec:	4b1d      	ldr	r3, [pc, #116]	; (8007f64 <_tx_trace_enable+0x65c>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d314      	bcc.n	8007f20 <_tx_trace_enable+0x618>
 8007ef6:	4b1c      	ldr	r3, [pc, #112]	; (8007f68 <_tx_trace_enable+0x660>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	643b      	str	r3, [r7, #64]	; 0x40
 8007efc:	4a13      	ldr	r2, [pc, #76]	; (8007f4c <_tx_trace_enable+0x644>)
 8007efe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f00:	6013      	str	r3, [r2, #0]
 8007f02:	4b13      	ldr	r3, [pc, #76]	; (8007f50 <_tx_trace_enable+0x648>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f08:	621a      	str	r2, [r3, #32]
 8007f0a:	4b18      	ldr	r3, [pc, #96]	; (8007f6c <_tx_trace_enable+0x664>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d00d      	beq.n	8007f2e <_tx_trace_enable+0x626>
 8007f12:	4b16      	ldr	r3, [pc, #88]	; (8007f6c <_tx_trace_enable+0x664>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a0e      	ldr	r2, [pc, #56]	; (8007f50 <_tx_trace_enable+0x648>)
 8007f18:	6812      	ldr	r2, [r2, #0]
 8007f1a:	4610      	mov	r0, r2
 8007f1c:	4798      	blx	r3
 8007f1e:	e006      	b.n	8007f2e <_tx_trace_enable+0x626>
 8007f20:	4a0a      	ldr	r2, [pc, #40]	; (8007f4c <_tx_trace_enable+0x644>)
 8007f22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f24:	6013      	str	r3, [r2, #0]
 8007f26:	4b0a      	ldr	r3, [pc, #40]	; (8007f50 <_tx_trace_enable+0x648>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f2c:	621a      	str	r2, [r3, #32]
 8007f2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f30:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	f383 8810 	msr	PRIMASK, r3
}
 8007f38:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8007f3a:	f7fe fd09 	bl	8006950 <_tx_thread_system_preempt_check>

        /* Return successful completion.  */
        status =  TX_SUCCESS;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	66bb      	str	r3, [r7, #104]	; 0x68
    }

    /* Return completion status.  */
    return(status);
 8007f42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    }

    /* Return completion status.  */
    return(status);
#endif
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3790      	adds	r7, #144	; 0x90
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}
 8007f4c:	2401107c 	.word	0x2401107c
 8007f50:	24011084 	.word	0x24011084
 8007f54:	24011088 	.word	0x24011088
 8007f58:	2400fa10 	.word	0x2400fa10
 8007f5c:	24010af8 	.word	0x24010af8
 8007f60:	e0001004 	.word	0xe0001004
 8007f64:	24011074 	.word	0x24011074
 8007f68:	24011090 	.word	0x24011090
 8007f6c:	24011080 	.word	0x24011080

08007f70 <_tx_trace_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_trace_initialize(VOID)
{
 8007f70:	b480      	push	{r7}
 8007f72:	af00      	add	r7, sp, #0

#ifdef TX_ENABLE_EVENT_TRACE
#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize all the pointers to the trace buffer to NULL.  */
    _tx_trace_header_ptr =          TX_NULL;
 8007f74:	4b0b      	ldr	r3, [pc, #44]	; (8007fa4 <_tx_trace_initialize+0x34>)
 8007f76:	2200      	movs	r2, #0
 8007f78:	601a      	str	r2, [r3, #0]
    _tx_trace_registry_start_ptr =  TX_NULL;
 8007f7a:	4b0b      	ldr	r3, [pc, #44]	; (8007fa8 <_tx_trace_initialize+0x38>)
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	601a      	str	r2, [r3, #0]
    _tx_trace_registry_end_ptr =    TX_NULL;
 8007f80:	4b0a      	ldr	r3, [pc, #40]	; (8007fac <_tx_trace_initialize+0x3c>)
 8007f82:	2200      	movs	r2, #0
 8007f84:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_start_ptr =    TX_NULL;
 8007f86:	4b0a      	ldr	r3, [pc, #40]	; (8007fb0 <_tx_trace_initialize+0x40>)
 8007f88:	2200      	movs	r2, #0
 8007f8a:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_end_ptr =      TX_NULL;
 8007f8c:	4b09      	ldr	r3, [pc, #36]	; (8007fb4 <_tx_trace_initialize+0x44>)
 8007f8e:	2200      	movs	r2, #0
 8007f90:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_current_ptr =  TX_NULL;
 8007f92:	4b09      	ldr	r3, [pc, #36]	; (8007fb8 <_tx_trace_initialize+0x48>)
 8007f94:	2200      	movs	r2, #0
 8007f96:	601a      	str	r2, [r3, #0]
#endif
#endif
}
 8007f98:	bf00      	nop
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr
 8007fa2:	bf00      	nop
 8007fa4:	24011084 	.word	0x24011084
 8007fa8:	24011078 	.word	0x24011078
 8007fac:	2401108c 	.word	0x2401108c
 8007fb0:	24011090 	.word	0x24011090
 8007fb4:	24011074 	.word	0x24011074
 8007fb8:	2401107c 	.word	0x2401107c

08007fbc <_tx_trace_object_register>:
/*                                            check for null name,        */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_trace_object_register(UCHAR object_type, VOID *object_ptr, CHAR *object_name, ULONG parameter_1, ULONG parameter_2)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b08d      	sub	sp, #52	; 0x34
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	60b9      	str	r1, [r7, #8]
 8007fc4:	607a      	str	r2, [r7, #4]
 8007fc6:	603b      	str	r3, [r7, #0]
 8007fc8:	4603      	mov	r3, r0
 8007fca:	73fb      	strb	r3, [r7, #15]
UCHAR                           *work_ptr;
TX_TRACE_OBJECT_ENTRY           *entry_ptr;


    /* Determine if the registry area is setup.  */
    if (_tx_trace_registry_start_ptr != TX_NULL)
 8007fcc:	4b6f      	ldr	r3, [pc, #444]	; (800818c <_tx_trace_object_register+0x1d0>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	f000 80d5 	beq.w	8008180 <_tx_trace_object_register+0x1c4>
    {

        /* Trace buffer is enabled, proceed.  */

        /* Pickup the total entries.  */
        entries =  _tx_trace_total_registry_entries;
 8007fd6:	4b6e      	ldr	r3, [pc, #440]	; (8008190 <_tx_trace_object_register+0x1d4>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	623b      	str	r3, [r7, #32]

        /* Determine if there are available entries in the registry.  */
        if (_tx_trace_available_registry_entries != ((ULONG) 0))
 8007fdc:	4b6d      	ldr	r3, [pc, #436]	; (8008194 <_tx_trace_object_register+0x1d8>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	f000 80cd 	beq.w	8008180 <_tx_trace_object_register+0x1c4>
        {

            /* There are more available entries, proceed.  */

            /* Initialize found to the max entries... indicating no space was found.  */
            found =       entries;
 8007fe6:	6a3b      	ldr	r3, [r7, #32]
 8007fe8:	62bb      	str	r3, [r7, #40]	; 0x28
            loop_break =  TX_FALSE;
 8007fea:	2300      	movs	r3, #0
 8007fec:	627b      	str	r3, [r7, #36]	; 0x24

            /* Loop to find available entry.  */
            i =  _tx_trace_registry_search_start;
 8007fee:	4b6a      	ldr	r3, [pc, #424]	; (8008198 <_tx_trace_object_register+0x1dc>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
            do
            {

                /* Setup the registry entry pointer.  */
                work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 8007ff4:	4b65      	ldr	r3, [pc, #404]	; (800818c <_tx_trace_object_register+0x1d0>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	61fb      	str	r3, [r7, #28]
                work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*i));
 8007ffa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ffc:	4613      	mov	r3, r2
 8007ffe:	005b      	lsls	r3, r3, #1
 8008000:	4413      	add	r3, r2
 8008002:	011b      	lsls	r3, r3, #4
 8008004:	461a      	mov	r2, r3
 8008006:	69fb      	ldr	r3, [r7, #28]
 8008008:	4413      	add	r3, r2
 800800a:	61fb      	str	r3, [r7, #28]
                entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 800800c:	69fb      	ldr	r3, [r7, #28]
 800800e:	61bb      	str	r3, [r7, #24]

                /* Determine if this is the first pass building the registry. A NULL object value indicates this part
                   of the registry has never been used.  */
                if (entry_ptr -> tx_trace_object_entry_thread_pointer == (ULONG) 0)
 8008010:	69bb      	ldr	r3, [r7, #24]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d103      	bne.n	8008020 <_tx_trace_object_register+0x64>
                {

                    /* Set found to this index and break out of the loop.  */
                    found =  i;
 8008018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800801a:	62bb      	str	r3, [r7, #40]	; 0x28
                    loop_break =  TX_TRUE;
 800801c:	2301      	movs	r3, #1
 800801e:	627b      	str	r3, [r7, #36]	; 0x24
                }

                /* Determine if this entry matches the object pointer... we must reuse old entries left in the
                   registry.  */
                if (entry_ptr -> tx_trace_object_entry_thread_pointer == TX_POINTER_TO_ULONG_CONVERT(object_ptr))
 8008020:	69bb      	ldr	r3, [r7, #24]
 8008022:	685a      	ldr	r2, [r3, #4]
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	429a      	cmp	r2, r3
 8008028:	d103      	bne.n	8008032 <_tx_trace_object_register+0x76>
                {

                    /* Set found to this index and break out of the loop.  */
                    found =  i;
 800802a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800802c:	62bb      	str	r3, [r7, #40]	; 0x28
                    loop_break =  TX_TRUE;
 800802e:	2301      	movs	r3, #1
 8008030:	627b      	str	r3, [r7, #36]	; 0x24
                }

                /* Determine if we should break out of the loop.  */
                if (loop_break == TX_TRUE)
 8008032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008034:	2b01      	cmp	r3, #1
 8008036:	d02d      	beq.n	8008094 <_tx_trace_object_register+0xd8>
                    /* Yes, break out of the loop.  */
                    break;
                }

                /* Is this entry available?  */
                if (entry_ptr -> tx_trace_object_entry_available == TX_TRUE)
 8008038:	69bb      	ldr	r3, [r7, #24]
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	2b01      	cmp	r3, #1
 800803e:	d11a      	bne.n	8008076 <_tx_trace_object_register+0xba>
                {

                    /* Yes, determine if we have not already found an empty slot.  */
                    if (found == entries)
 8008040:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008042:	6a3b      	ldr	r3, [r7, #32]
 8008044:	429a      	cmp	r2, r3
 8008046:	d102      	bne.n	800804e <_tx_trace_object_register+0x92>
                    {
                        found =  i;
 8008048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800804a:	62bb      	str	r3, [r7, #40]	; 0x28
 800804c:	e013      	b.n	8008076 <_tx_trace_object_register+0xba>
                    }
                    else
                    {

                        /* Setup a pointer to the found entry.  */
                        work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 800804e:	4b4f      	ldr	r3, [pc, #316]	; (800818c <_tx_trace_object_register+0x1d0>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	61fb      	str	r3, [r7, #28]
                        work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*found));
 8008054:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008056:	4613      	mov	r3, r2
 8008058:	005b      	lsls	r3, r3, #1
 800805a:	4413      	add	r3, r2
 800805c:	011b      	lsls	r3, r3, #4
 800805e:	461a      	mov	r2, r3
 8008060:	69fb      	ldr	r3, [r7, #28]
 8008062:	4413      	add	r3, r2
 8008064:	61fb      	str	r3, [r7, #28]
                        entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 8008066:	69fb      	ldr	r3, [r7, #28]
 8008068:	61bb      	str	r3, [r7, #24]

                         if (entry_ptr -> tx_trace_object_entry_type != ((UCHAR) 0))
 800806a:	69bb      	ldr	r3, [r7, #24]
 800806c:	785b      	ldrb	r3, [r3, #1]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d001      	beq.n	8008076 <_tx_trace_object_register+0xba>
                         {
                            found =  i;
 8008072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008074:	62bb      	str	r3, [r7, #40]	; 0x28
                         }
                    }
                }

                /* Move to the next entry.  */
                i++;
 8008076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008078:	3301      	adds	r3, #1
 800807a:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Determine if we have wrapped the list.  */
                if (i >= entries)
 800807c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800807e:	6a3b      	ldr	r3, [r7, #32]
 8008080:	429a      	cmp	r2, r3
 8008082:	d301      	bcc.n	8008088 <_tx_trace_object_register+0xcc>
                {

                    /* Yes, wrap to the beginning of the list.  */
                    i =  ((ULONG) 0);
 8008084:	2300      	movs	r3, #0
 8008086:	62fb      	str	r3, [r7, #44]	; 0x2c
                }

            } while (i != _tx_trace_registry_search_start);
 8008088:	4b43      	ldr	r3, [pc, #268]	; (8008198 <_tx_trace_object_register+0x1dc>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800808e:	429a      	cmp	r2, r3
 8008090:	d1b0      	bne.n	8007ff4 <_tx_trace_object_register+0x38>
 8008092:	e000      	b.n	8008096 <_tx_trace_object_register+0xda>
                    break;
 8008094:	bf00      	nop

            /* Now determine if an empty or reuse entry has been found.  */
            if (found < entries)
 8008096:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008098:	6a3b      	ldr	r3, [r7, #32]
 800809a:	429a      	cmp	r2, r3
 800809c:	d270      	bcs.n	8008180 <_tx_trace_object_register+0x1c4>
            {

                /* Decrement the number of available entries.  */
                _tx_trace_available_registry_entries--;
 800809e:	4b3d      	ldr	r3, [pc, #244]	; (8008194 <_tx_trace_object_register+0x1d8>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	3b01      	subs	r3, #1
 80080a4:	4a3b      	ldr	r2, [pc, #236]	; (8008194 <_tx_trace_object_register+0x1d8>)
 80080a6:	6013      	str	r3, [r2, #0]

                /* Adjust the search index to the next entry.  */
                if ((found + ((ULONG) 1)) < entries)
 80080a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080aa:	3301      	adds	r3, #1
 80080ac:	6a3a      	ldr	r2, [r7, #32]
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d904      	bls.n	80080bc <_tx_trace_object_register+0x100>
                {

                    /* Start searching from the next index.  */
                    _tx_trace_registry_search_start =  found + ((ULONG) 1);
 80080b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b4:	3301      	adds	r3, #1
 80080b6:	4a38      	ldr	r2, [pc, #224]	; (8008198 <_tx_trace_object_register+0x1dc>)
 80080b8:	6013      	str	r3, [r2, #0]
 80080ba:	e002      	b.n	80080c2 <_tx_trace_object_register+0x106>
                }
                else
                {

                    /* Reset the search to the beginning of the list. */
                    _tx_trace_registry_search_start =  ((ULONG) 0);
 80080bc:	4b36      	ldr	r3, [pc, #216]	; (8008198 <_tx_trace_object_register+0x1dc>)
 80080be:	2200      	movs	r2, #0
 80080c0:	601a      	str	r2, [r3, #0]
                }

                /* Yes, an entry has been found...  */

                /* Build a pointer to the found entry.  */
                work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 80080c2:	4b32      	ldr	r3, [pc, #200]	; (800818c <_tx_trace_object_register+0x1d0>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	61fb      	str	r3, [r7, #28]
                work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*found));
 80080c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080ca:	4613      	mov	r3, r2
 80080cc:	005b      	lsls	r3, r3, #1
 80080ce:	4413      	add	r3, r2
 80080d0:	011b      	lsls	r3, r3, #4
 80080d2:	461a      	mov	r2, r3
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	4413      	add	r3, r2
 80080d8:	61fb      	str	r3, [r7, #28]
                entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 80080da:	69fb      	ldr	r3, [r7, #28]
 80080dc:	61bb      	str	r3, [r7, #24]

                /* Populate the found entry!  */
                entry_ptr -> tx_trace_object_entry_available =       ((UCHAR) TX_FALSE);
 80080de:	69bb      	ldr	r3, [r7, #24]
 80080e0:	2200      	movs	r2, #0
 80080e2:	701a      	strb	r2, [r3, #0]
                entry_ptr -> tx_trace_object_entry_type =            object_type;
 80080e4:	69bb      	ldr	r3, [r7, #24]
 80080e6:	7bfa      	ldrb	r2, [r7, #15]
 80080e8:	705a      	strb	r2, [r3, #1]
                entry_ptr -> tx_trace_object_entry_thread_pointer =  TX_POINTER_TO_ULONG_CONVERT(object_ptr);
 80080ea:	68ba      	ldr	r2, [r7, #8]
 80080ec:	69bb      	ldr	r3, [r7, #24]
 80080ee:	605a      	str	r2, [r3, #4]
                entry_ptr -> tx_trace_object_entry_param_1 =         parameter_1;
 80080f0:	69bb      	ldr	r3, [r7, #24]
 80080f2:	683a      	ldr	r2, [r7, #0]
 80080f4:	609a      	str	r2, [r3, #8]
                entry_ptr -> tx_trace_object_entry_param_2 =         parameter_2;
 80080f6:	69bb      	ldr	r3, [r7, #24]
 80080f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080fa:	60da      	str	r2, [r3, #12]

                /* Loop to copy the object name string...  */
                for (i = ((ULONG) 0); i < (((ULONG) TX_TRACE_OBJECT_REGISTRY_NAME)-((ULONG) 1)); i++)
 80080fc:	2300      	movs	r3, #0
 80080fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008100:	e017      	b.n	8008132 <_tx_trace_object_register+0x176>
                {

                    /* Setup work pointer to the object name character.  */
                    work_ptr =  TX_CHAR_TO_UCHAR_POINTER_CONVERT(object_name);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	61fb      	str	r3, [r7, #28]
                    work_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, i);
 8008106:	69fa      	ldr	r2, [r7, #28]
 8008108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800810a:	4413      	add	r3, r2
 800810c:	61fb      	str	r3, [r7, #28]

                    /* Determine if object_name (work_ptr) is null.  */
                    if (work_ptr == TX_NULL)
 800810e:	69fb      	ldr	r3, [r7, #28]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d012      	beq.n	800813a <_tx_trace_object_register+0x17e>
                    {
                        break;
                    }

                    /* Copy a character of the name.  */
                    entry_ptr -> tx_trace_object_entry_name[i] =  (UCHAR) *work_ptr;
 8008114:	69fb      	ldr	r3, [r7, #28]
 8008116:	7819      	ldrb	r1, [r3, #0]
 8008118:	69ba      	ldr	r2, [r7, #24]
 800811a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800811c:	4413      	add	r3, r2
 800811e:	3310      	adds	r3, #16
 8008120:	460a      	mov	r2, r1
 8008122:	701a      	strb	r2, [r3, #0]

                    /* Determine if we are at the end.  */
                    if (*work_ptr == ((UCHAR) 0))
 8008124:	69fb      	ldr	r3, [r7, #28]
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d008      	beq.n	800813e <_tx_trace_object_register+0x182>
                for (i = ((ULONG) 0); i < (((ULONG) TX_TRACE_OBJECT_REGISTRY_NAME)-((ULONG) 1)); i++)
 800812c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800812e:	3301      	adds	r3, #1
 8008130:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008134:	2b1e      	cmp	r3, #30
 8008136:	d9e4      	bls.n	8008102 <_tx_trace_object_register+0x146>
 8008138:	e002      	b.n	8008140 <_tx_trace_object_register+0x184>
                        break;
 800813a:	bf00      	nop
 800813c:	e000      	b.n	8008140 <_tx_trace_object_register+0x184>
                    {
                        break;
 800813e:	bf00      	nop
                    }
                }

                /* Null terminate the object string.  */
                entry_ptr -> tx_trace_object_entry_name[i] =  (UCHAR) 0;
 8008140:	69ba      	ldr	r2, [r7, #24]
 8008142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008144:	4413      	add	r3, r2
 8008146:	3310      	adds	r3, #16
 8008148:	2200      	movs	r2, #0
 800814a:	701a      	strb	r2, [r3, #0]

                /* Determine if a thread object type is present.  */
                if (object_type == TX_TRACE_OBJECT_TYPE_THREAD)
 800814c:	7bfb      	ldrb	r3, [r7, #15]
 800814e:	2b01      	cmp	r3, #1
 8008150:	d110      	bne.n	8008174 <_tx_trace_object_register+0x1b8>
                {

                    /* Yes, a thread object is present.  */

                    /* Setup a pointer to the thread.  */
                    thread_ptr =  TX_VOID_TO_THREAD_POINTER_CONVERT(object_ptr);
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	617b      	str	r3, [r7, #20]

                    /* Store the thread's priority in the reserved bits.  */
                    entry_ptr -> tx_trace_object_entry_reserved1 =  ((UCHAR) 0x80) | ((UCHAR) (thread_ptr -> tx_thread_priority >> ((UCHAR) 8)));
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800815a:	0a1b      	lsrs	r3, r3, #8
 800815c:	b2db      	uxtb	r3, r3
 800815e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008162:	b2da      	uxtb	r2, r3
 8008164:	69bb      	ldr	r3, [r7, #24]
 8008166:	709a      	strb	r2, [r3, #2]
                    entry_ptr -> tx_trace_object_entry_reserved2 =  (UCHAR) (thread_ptr -> tx_thread_priority & ((UCHAR) 0xFF));
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800816c:	b2da      	uxtb	r2, r3
 800816e:	69bb      	ldr	r3, [r7, #24]
 8008170:	70da      	strb	r2, [r3, #3]
                }
            }
        }
    }
#endif
}
 8008172:	e005      	b.n	8008180 <_tx_trace_object_register+0x1c4>
                    entry_ptr -> tx_trace_object_entry_reserved1 =  ((UCHAR) 0);
 8008174:	69bb      	ldr	r3, [r7, #24]
 8008176:	2200      	movs	r2, #0
 8008178:	709a      	strb	r2, [r3, #2]
                    entry_ptr -> tx_trace_object_entry_reserved2 =  ((UCHAR) 0);
 800817a:	69bb      	ldr	r3, [r7, #24]
 800817c:	2200      	movs	r2, #0
 800817e:	70da      	strb	r2, [r3, #3]
}
 8008180:	bf00      	nop
 8008182:	3734      	adds	r7, #52	; 0x34
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr
 800818c:	24011078 	.word	0x24011078
 8008190:	24011098 	.word	0x24011098
 8008194:	24011070 	.word	0x24011070
 8008198:	24011094 	.word	0x24011094

0800819c <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b092      	sub	sp, #72	; 0x48
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	60f8      	str	r0, [r7, #12]
 80081a4:	60b9      	str	r1, [r7, #8]
 80081a6:	607a      	str	r2, [r7, #4]
 80081a8:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80081aa:	2300      	movs	r3, #0
 80081ac:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d102      	bne.n	80081ba <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80081b4:	2302      	movs	r3, #2
 80081b6:	647b      	str	r3, [r7, #68]	; 0x44
 80081b8:	e075      	b.n	80082a6 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 80081ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081bc:	2b34      	cmp	r3, #52	; 0x34
 80081be:	d002      	beq.n	80081c6 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80081c0:	2302      	movs	r3, #2
 80081c2:	647b      	str	r3, [r7, #68]	; 0x44
 80081c4:	e06f      	b.n	80082a6 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80081c6:	f3ef 8310 	mrs	r3, PRIMASK
 80081ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80081cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80081ce:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80081d0:	b672      	cpsid	i
    return(int_posture);
 80081d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80081d4:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80081d6:	4b3b      	ldr	r3, [pc, #236]	; (80082c4 <_txe_byte_pool_create+0x128>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	3301      	adds	r3, #1
 80081dc:	4a39      	ldr	r2, [pc, #228]	; (80082c4 <_txe_byte_pool_create+0x128>)
 80081de:	6013      	str	r3, [r2, #0]
 80081e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e2:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80081e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e6:	f383 8810 	msr	PRIMASK, r3
}
 80081ea:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 80081ec:	4b36      	ldr	r3, [pc, #216]	; (80082c8 <_txe_byte_pool_create+0x12c>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 80081f2:	2300      	movs	r3, #0
 80081f4:	643b      	str	r3, [r7, #64]	; 0x40
 80081f6:	e009      	b.n	800820c <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 80081f8:	68fa      	ldr	r2, [r7, #12]
 80081fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d00b      	beq.n	8008218 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8008200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008204:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8008206:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008208:	3301      	adds	r3, #1
 800820a:	643b      	str	r3, [r7, #64]	; 0x40
 800820c:	4b2f      	ldr	r3, [pc, #188]	; (80082cc <_txe_byte_pool_create+0x130>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008212:	429a      	cmp	r2, r3
 8008214:	d3f0      	bcc.n	80081f8 <_txe_byte_pool_create+0x5c>
 8008216:	e000      	b.n	800821a <_txe_byte_pool_create+0x7e>
                break;
 8008218:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800821a:	f3ef 8310 	mrs	r3, PRIMASK
 800821e:	623b      	str	r3, [r7, #32]
    return(posture);
 8008220:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8008222:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008224:	b672      	cpsid	i
    return(int_posture);
 8008226:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8008228:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800822a:	4b26      	ldr	r3, [pc, #152]	; (80082c4 <_txe_byte_pool_create+0x128>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	3b01      	subs	r3, #1
 8008230:	4a24      	ldr	r2, [pc, #144]	; (80082c4 <_txe_byte_pool_create+0x128>)
 8008232:	6013      	str	r3, [r2, #0]
 8008234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008236:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823a:	f383 8810 	msr	PRIMASK, r3
}
 800823e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8008240:	f7fe fb86 	bl	8006950 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8008244:	68fa      	ldr	r2, [r7, #12]
 8008246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008248:	429a      	cmp	r2, r3
 800824a:	d102      	bne.n	8008252 <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800824c:	2302      	movs	r3, #2
 800824e:	647b      	str	r3, [r7, #68]	; 0x44
 8008250:	e029      	b.n	80082a6 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d102      	bne.n	800825e <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8008258:	2303      	movs	r3, #3
 800825a:	647b      	str	r3, [r7, #68]	; 0x44
 800825c:	e023      	b.n	80082a6 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	2b63      	cmp	r3, #99	; 0x63
 8008262:	d802      	bhi.n	800826a <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8008264:	2305      	movs	r3, #5
 8008266:	647b      	str	r3, [r7, #68]	; 0x44
 8008268:	e01d      	b.n	80082a6 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800826a:	4b19      	ldr	r3, [pc, #100]	; (80082d0 <_txe_byte_pool_create+0x134>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8008270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008272:	4a18      	ldr	r2, [pc, #96]	; (80082d4 <_txe_byte_pool_create+0x138>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d101      	bne.n	800827c <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8008278:	2313      	movs	r3, #19
 800827a:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800827c:	f3ef 8305 	mrs	r3, IPSR
 8008280:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8008282:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8008284:	4b14      	ldr	r3, [pc, #80]	; (80082d8 <_txe_byte_pool_create+0x13c>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4313      	orrs	r3, r2
 800828a:	2b00      	cmp	r3, #0
 800828c:	d00b      	beq.n	80082a6 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800828e:	f3ef 8305 	mrs	r3, IPSR
 8008292:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8008294:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8008296:	4b10      	ldr	r3, [pc, #64]	; (80082d8 <_txe_byte_pool_create+0x13c>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4313      	orrs	r3, r2
 800829c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80082a0:	d201      	bcs.n	80082a6 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 80082a2:	2313      	movs	r3, #19
 80082a4:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80082a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d106      	bne.n	80082ba <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	68b9      	ldr	r1, [r7, #8]
 80082b2:	68f8      	ldr	r0, [r7, #12]
 80082b4:	f7fd feb2 	bl	800601c <_tx_byte_pool_create>
 80082b8:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 80082ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3748      	adds	r7, #72	; 0x48
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}
 80082c4:	24010af4 	.word	0x24010af4
 80082c8:	24010a3c 	.word	0x24010a3c
 80082cc:	24010a58 	.word	0x24010a58
 80082d0:	24010af8 	.word	0x24010af8
 80082d4:	24010b9c 	.word	0x24010b9c
 80082d8:	2400fa10 	.word	0x2400fa10

080082dc <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b09a      	sub	sp, #104	; 0x68
 80082e0:	af06      	add	r7, sp, #24
 80082e2:	60f8      	str	r0, [r7, #12]
 80082e4:	60b9      	str	r1, [r7, #8]
 80082e6:	607a      	str	r2, [r7, #4]
 80082e8:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80082ea:	2300      	movs	r3, #0
 80082ec:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d102      	bne.n	80082fa <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80082f4:	230e      	movs	r3, #14
 80082f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082f8:	e0bb      	b.n	8008472 <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 80082fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082fc:	2bb0      	cmp	r3, #176	; 0xb0
 80082fe:	d002      	beq.n	8008306 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8008300:	230e      	movs	r3, #14
 8008302:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008304:	e0b5      	b.n	8008472 <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008306:	f3ef 8310 	mrs	r3, PRIMASK
 800830a:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800830c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800830e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8008310:	b672      	cpsid	i
    return(int_posture);
 8008312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8008314:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8008316:	4b64      	ldr	r3, [pc, #400]	; (80084a8 <_txe_thread_create+0x1cc>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	3301      	adds	r3, #1
 800831c:	4a62      	ldr	r2, [pc, #392]	; (80084a8 <_txe_thread_create+0x1cc>)
 800831e:	6013      	str	r3, [r2, #0]
 8008320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008322:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008326:	f383 8810 	msr	PRIMASK, r3
}
 800832a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800832c:	2300      	movs	r3, #0
 800832e:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 8008330:	4b5e      	ldr	r3, [pc, #376]	; (80084ac <_txe_thread_create+0x1d0>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8008336:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008338:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800833a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800833c:	3b01      	subs	r3, #1
 800833e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008340:	4413      	add	r3, r2
 8008342:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 8008344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008346:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8008348:	2300      	movs	r3, #0
 800834a:	647b      	str	r3, [r7, #68]	; 0x44
 800834c:	e02b      	b.n	80083a6 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800834e:	68fa      	ldr	r2, [r7, #12]
 8008350:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008352:	429a      	cmp	r2, r3
 8008354:	d101      	bne.n	800835a <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 8008356:	2301      	movs	r3, #1
 8008358:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800835a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800835c:	2b01      	cmp	r3, #1
 800835e:	d028      	beq.n	80083b2 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 8008360:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008362:	68db      	ldr	r3, [r3, #12]
 8008364:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008366:	429a      	cmp	r2, r3
 8008368:	d308      	bcc.n	800837c <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800836a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800836c:	691b      	ldr	r3, [r3, #16]
 800836e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008370:	429a      	cmp	r2, r3
 8008372:	d203      	bcs.n	800837c <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8008374:	2300      	movs	r3, #0
 8008376:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8008378:	2301      	movs	r3, #1
 800837a:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800837c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800837e:	68db      	ldr	r3, [r3, #12]
 8008380:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008382:	429a      	cmp	r2, r3
 8008384:	d308      	bcc.n	8008398 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 8008386:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008388:	691b      	ldr	r3, [r3, #16]
 800838a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800838c:	429a      	cmp	r2, r3
 800838e:	d203      	bcs.n	8008398 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8008390:	2300      	movs	r3, #0
 8008392:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8008394:	2301      	movs	r3, #1
 8008396:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8008398:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800839a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800839e:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 80083a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083a2:	3301      	adds	r3, #1
 80083a4:	647b      	str	r3, [r7, #68]	; 0x44
 80083a6:	4b42      	ldr	r3, [pc, #264]	; (80084b0 <_txe_thread_create+0x1d4>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80083ac:	429a      	cmp	r2, r3
 80083ae:	d3ce      	bcc.n	800834e <_txe_thread_create+0x72>
 80083b0:	e000      	b.n	80083b4 <_txe_thread_create+0xd8>
                break;
 80083b2:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80083b4:	f3ef 8310 	mrs	r3, PRIMASK
 80083b8:	61fb      	str	r3, [r7, #28]
    return(posture);
 80083ba:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80083bc:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80083be:	b672      	cpsid	i
    return(int_posture);
 80083c0:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80083c2:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80083c4:	4b38      	ldr	r3, [pc, #224]	; (80084a8 <_txe_thread_create+0x1cc>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	3b01      	subs	r3, #1
 80083ca:	4a37      	ldr	r2, [pc, #220]	; (80084a8 <_txe_thread_create+0x1cc>)
 80083cc:	6013      	str	r3, [r2, #0]
 80083ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083d0:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80083d2:	6a3b      	ldr	r3, [r7, #32]
 80083d4:	f383 8810 	msr	PRIMASK, r3
}
 80083d8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80083da:	f7fe fab9 	bl	8006950 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 80083de:	68fa      	ldr	r2, [r7, #12]
 80083e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083e2:	429a      	cmp	r2, r3
 80083e4:	d102      	bne.n	80083ec <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 80083e6:	230e      	movs	r3, #14
 80083e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083ea:	e042      	b.n	8008472 <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 80083ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d102      	bne.n	80083f8 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 80083f2:	2303      	movs	r3, #3
 80083f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083f6:	e03c      	b.n	8008472 <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d102      	bne.n	8008404 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 80083fe:	2303      	movs	r3, #3
 8008400:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008402:	e036      	b.n	8008472 <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 8008404:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008406:	2bc7      	cmp	r3, #199	; 0xc7
 8008408:	d802      	bhi.n	8008410 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800840a:	2305      	movs	r3, #5
 800840c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800840e:	e030      	b.n	8008472 <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 8008410:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008412:	2b1f      	cmp	r3, #31
 8008414:	d902      	bls.n	800841c <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 8008416:	230f      	movs	r3, #15
 8008418:	64fb      	str	r3, [r7, #76]	; 0x4c
 800841a:	e02a      	b.n	8008472 <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800841c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800841e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008420:	429a      	cmp	r2, r3
 8008422:	d902      	bls.n	800842a <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 8008424:	2318      	movs	r3, #24
 8008426:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008428:	e023      	b.n	8008472 <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800842a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800842c:	2b01      	cmp	r3, #1
 800842e:	d902      	bls.n	8008436 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 8008430:	2310      	movs	r3, #16
 8008432:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008434:	e01d      	b.n	8008472 <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 8008436:	4b1f      	ldr	r3, [pc, #124]	; (80084b4 <_txe_thread_create+0x1d8>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800843c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800843e:	4a1e      	ldr	r2, [pc, #120]	; (80084b8 <_txe_thread_create+0x1dc>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d101      	bne.n	8008448 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8008444:	2313      	movs	r3, #19
 8008446:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008448:	f3ef 8305 	mrs	r3, IPSR
 800844c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800844e:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8008450:	4b1a      	ldr	r3, [pc, #104]	; (80084bc <_txe_thread_create+0x1e0>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4313      	orrs	r3, r2
 8008456:	2b00      	cmp	r3, #0
 8008458:	d00b      	beq.n	8008472 <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800845a:	f3ef 8305 	mrs	r3, IPSR
 800845e:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8008460:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8008462:	4b16      	ldr	r3, [pc, #88]	; (80084bc <_txe_thread_create+0x1e0>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4313      	orrs	r3, r2
 8008468:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800846c:	d201      	bcs.n	8008472 <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800846e:	2313      	movs	r3, #19
 8008470:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8008472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008474:	2b00      	cmp	r3, #0
 8008476:	d112      	bne.n	800849e <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8008478:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800847a:	9305      	str	r3, [sp, #20]
 800847c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800847e:	9304      	str	r3, [sp, #16]
 8008480:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008482:	9303      	str	r3, [sp, #12]
 8008484:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008486:	9302      	str	r3, [sp, #8]
 8008488:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800848a:	9301      	str	r3, [sp, #4]
 800848c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800848e:	9300      	str	r3, [sp, #0]
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	68b9      	ldr	r1, [r7, #8]
 8008496:	68f8      	ldr	r0, [r7, #12]
 8008498:	f7fd ff54 	bl	8006344 <_tx_thread_create>
 800849c:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800849e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3750      	adds	r7, #80	; 0x50
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}
 80084a8:	24010af4 	.word	0x24010af4
 80084ac:	24010ae4 	.word	0x24010ae4
 80084b0:	24010aec 	.word	0x24010aec
 80084b4:	24010af8 	.word	0x24010af8
 80084b8:	24010b9c 	.word	0x24010b9c
 80084bc:	2400fa10 	.word	0x2400fa10

080084c0 <__libc_init_array>:
 80084c0:	b570      	push	{r4, r5, r6, lr}
 80084c2:	4d0d      	ldr	r5, [pc, #52]	; (80084f8 <__libc_init_array+0x38>)
 80084c4:	4c0d      	ldr	r4, [pc, #52]	; (80084fc <__libc_init_array+0x3c>)
 80084c6:	1b64      	subs	r4, r4, r5
 80084c8:	10a4      	asrs	r4, r4, #2
 80084ca:	2600      	movs	r6, #0
 80084cc:	42a6      	cmp	r6, r4
 80084ce:	d109      	bne.n	80084e4 <__libc_init_array+0x24>
 80084d0:	4d0b      	ldr	r5, [pc, #44]	; (8008500 <__libc_init_array+0x40>)
 80084d2:	4c0c      	ldr	r4, [pc, #48]	; (8008504 <__libc_init_array+0x44>)
 80084d4:	f000 f820 	bl	8008518 <_init>
 80084d8:	1b64      	subs	r4, r4, r5
 80084da:	10a4      	asrs	r4, r4, #2
 80084dc:	2600      	movs	r6, #0
 80084de:	42a6      	cmp	r6, r4
 80084e0:	d105      	bne.n	80084ee <__libc_init_array+0x2e>
 80084e2:	bd70      	pop	{r4, r5, r6, pc}
 80084e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80084e8:	4798      	blx	r3
 80084ea:	3601      	adds	r6, #1
 80084ec:	e7ee      	b.n	80084cc <__libc_init_array+0xc>
 80084ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80084f2:	4798      	blx	r3
 80084f4:	3601      	adds	r6, #1
 80084f6:	e7f2      	b.n	80084de <__libc_init_array+0x1e>
 80084f8:	080085b0 	.word	0x080085b0
 80084fc:	080085b0 	.word	0x080085b0
 8008500:	080085b0 	.word	0x080085b0
 8008504:	080085b4 	.word	0x080085b4

08008508 <memset>:
 8008508:	4402      	add	r2, r0
 800850a:	4603      	mov	r3, r0
 800850c:	4293      	cmp	r3, r2
 800850e:	d100      	bne.n	8008512 <memset+0xa>
 8008510:	4770      	bx	lr
 8008512:	f803 1b01 	strb.w	r1, [r3], #1
 8008516:	e7f9      	b.n	800850c <memset+0x4>

08008518 <_init>:
 8008518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800851a:	bf00      	nop
 800851c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800851e:	bc08      	pop	{r3}
 8008520:	469e      	mov	lr, r3
 8008522:	4770      	bx	lr

08008524 <_fini>:
 8008524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008526:	bf00      	nop
 8008528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800852a:	bc08      	pop	{r3}
 800852c:	469e      	mov	lr, r3
 800852e:	4770      	bx	lr
